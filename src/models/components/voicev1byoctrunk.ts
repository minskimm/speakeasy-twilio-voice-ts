/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The HTTP method we use to call `voice_url`. Can be: `GET` or `POST`.
 */
export const VoiceMethod = {
  Get: "GET",
  Post: "POST",
} as const;
/**
 * The HTTP method we use to call `voice_url`. Can be: `GET` or `POST`.
 */
export type VoiceMethod = ClosedEnum<typeof VoiceMethod>;

/**
 * The HTTP method we use to call `voice_fallback_url`. Can be: `GET` or `POST`.
 */
export const VoiceFallbackMethod = {
  Get: "GET",
  Post: "POST",
} as const;
/**
 * The HTTP method we use to call `voice_fallback_url`. Can be: `GET` or `POST`.
 */
export type VoiceFallbackMethod = ClosedEnum<typeof VoiceFallbackMethod>;

/**
 * The HTTP method we use to call `status_callback_url`. Either `GET` or `POST`.
 */
export const StatusCallbackMethod = {
  Get: "GET",
  Post: "POST",
} as const;
/**
 * The HTTP method we use to call `status_callback_url`. Either `GET` or `POST`.
 */
export type StatusCallbackMethod = ClosedEnum<typeof StatusCallbackMethod>;

export type VoiceV1ByocTrunk = {
  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the BYOC Trunk resource.
   */
  accountSid?: string | null | undefined;
  /**
   * The unique string that that we created to identify the BYOC Trunk resource.
   */
  sid?: string | null | undefined;
  /**
   * The string that you assigned to describe the resource.
   */
  friendlyName?: string | null | undefined;
  /**
   * The URL we call using the `voice_method` when the BYOC Trunk receives a call.
   */
  voiceUrl?: string | null | undefined;
  /**
   * The HTTP method we use to call `voice_url`. Can be: `GET` or `POST`.
   */
  voiceMethod?: VoiceMethod | null | undefined;
  /**
   * The URL that we call when an error occurs while retrieving or executing the TwiML requested from `voice_url`.
   */
  voiceFallbackUrl?: string | null | undefined;
  /**
   * The HTTP method we use to call `voice_fallback_url`. Can be: `GET` or `POST`.
   */
  voiceFallbackMethod?: VoiceFallbackMethod | null | undefined;
  /**
   * The URL that we call to pass status parameters (such as call ended) to your application.
   */
  statusCallbackUrl?: string | null | undefined;
  /**
   * The HTTP method we use to call `status_callback_url`. Either `GET` or `POST`.
   */
  statusCallbackMethod?: StatusCallbackMethod | null | undefined;
  /**
   * Whether Caller ID Name (CNAM) lookup is enabled for the trunk. If enabled, all inbound calls to the BYOC Trunk from the United States and Canada automatically perform a CNAM Lookup and display Caller ID data on your phone. See [CNAM Lookups](https://www.twilio.com/docs/sip-trunking#CNAM) for more information.
   */
  cnamLookupEnabled?: boolean | null | undefined;
  /**
   * The SID of the Connection Policy that Twilio will use when routing traffic to your communications infrastructure.
   */
  connectionPolicySid?: string | null | undefined;
  /**
   * The SID of the SIP Domain that should be used in the `From` header of originating calls sent to your SIP infrastructure. If your SIP infrastructure allows users to "call back" an incoming call, configure this with a [SIP Domain](https://www.twilio.com/docs/voice/api/sending-sip) to ensure proper routing. If not configured, the from domain will default to "sip.twilio.com".
   */
  fromDomainSid?: string | null | undefined;
  /**
   * The date and time in GMT that the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.
   */
  dateCreated?: Date | null | undefined;
  /**
   * The date and time in GMT that the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.
   */
  dateUpdated?: Date | null | undefined;
  /**
   * The absolute URL of the resource.
   */
  url?: string | null | undefined;
};

/** @internal */
export const VoiceMethod$inboundSchema: z.ZodNativeEnum<typeof VoiceMethod> = z
  .nativeEnum(VoiceMethod);

/** @internal */
export const VoiceMethod$outboundSchema: z.ZodNativeEnum<typeof VoiceMethod> =
  VoiceMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VoiceMethod$ {
  /** @deprecated use `VoiceMethod$inboundSchema` instead. */
  export const inboundSchema = VoiceMethod$inboundSchema;
  /** @deprecated use `VoiceMethod$outboundSchema` instead. */
  export const outboundSchema = VoiceMethod$outboundSchema;
}

/** @internal */
export const VoiceFallbackMethod$inboundSchema: z.ZodNativeEnum<
  typeof VoiceFallbackMethod
> = z.nativeEnum(VoiceFallbackMethod);

/** @internal */
export const VoiceFallbackMethod$outboundSchema: z.ZodNativeEnum<
  typeof VoiceFallbackMethod
> = VoiceFallbackMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VoiceFallbackMethod$ {
  /** @deprecated use `VoiceFallbackMethod$inboundSchema` instead. */
  export const inboundSchema = VoiceFallbackMethod$inboundSchema;
  /** @deprecated use `VoiceFallbackMethod$outboundSchema` instead. */
  export const outboundSchema = VoiceFallbackMethod$outboundSchema;
}

/** @internal */
export const StatusCallbackMethod$inboundSchema: z.ZodNativeEnum<
  typeof StatusCallbackMethod
> = z.nativeEnum(StatusCallbackMethod);

/** @internal */
export const StatusCallbackMethod$outboundSchema: z.ZodNativeEnum<
  typeof StatusCallbackMethod
> = StatusCallbackMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusCallbackMethod$ {
  /** @deprecated use `StatusCallbackMethod$inboundSchema` instead. */
  export const inboundSchema = StatusCallbackMethod$inboundSchema;
  /** @deprecated use `StatusCallbackMethod$outboundSchema` instead. */
  export const outboundSchema = StatusCallbackMethod$outboundSchema;
}

/** @internal */
export const VoiceV1ByocTrunk$inboundSchema: z.ZodType<
  VoiceV1ByocTrunk,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_sid: z.nullable(z.string()).optional(),
  sid: z.nullable(z.string()).optional(),
  friendly_name: z.nullable(z.string()).optional(),
  voice_url: z.nullable(z.string()).optional(),
  voice_method: z.nullable(VoiceMethod$inboundSchema).optional(),
  voice_fallback_url: z.nullable(z.string()).optional(),
  voice_fallback_method: z.nullable(VoiceFallbackMethod$inboundSchema)
    .optional(),
  status_callback_url: z.nullable(z.string()).optional(),
  status_callback_method: z.nullable(StatusCallbackMethod$inboundSchema)
    .optional(),
  cnam_lookup_enabled: z.nullable(z.boolean()).optional(),
  connection_policy_sid: z.nullable(z.string()).optional(),
  from_domain_sid: z.nullable(z.string()).optional(),
  date_created: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  date_updated: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "account_sid": "accountSid",
    "friendly_name": "friendlyName",
    "voice_url": "voiceUrl",
    "voice_method": "voiceMethod",
    "voice_fallback_url": "voiceFallbackUrl",
    "voice_fallback_method": "voiceFallbackMethod",
    "status_callback_url": "statusCallbackUrl",
    "status_callback_method": "statusCallbackMethod",
    "cnam_lookup_enabled": "cnamLookupEnabled",
    "connection_policy_sid": "connectionPolicySid",
    "from_domain_sid": "fromDomainSid",
    "date_created": "dateCreated",
    "date_updated": "dateUpdated",
  });
});

/** @internal */
export type VoiceV1ByocTrunk$Outbound = {
  account_sid?: string | null | undefined;
  sid?: string | null | undefined;
  friendly_name?: string | null | undefined;
  voice_url?: string | null | undefined;
  voice_method?: string | null | undefined;
  voice_fallback_url?: string | null | undefined;
  voice_fallback_method?: string | null | undefined;
  status_callback_url?: string | null | undefined;
  status_callback_method?: string | null | undefined;
  cnam_lookup_enabled?: boolean | null | undefined;
  connection_policy_sid?: string | null | undefined;
  from_domain_sid?: string | null | undefined;
  date_created?: string | null | undefined;
  date_updated?: string | null | undefined;
  url?: string | null | undefined;
};

/** @internal */
export const VoiceV1ByocTrunk$outboundSchema: z.ZodType<
  VoiceV1ByocTrunk$Outbound,
  z.ZodTypeDef,
  VoiceV1ByocTrunk
> = z.object({
  accountSid: z.nullable(z.string()).optional(),
  sid: z.nullable(z.string()).optional(),
  friendlyName: z.nullable(z.string()).optional(),
  voiceUrl: z.nullable(z.string()).optional(),
  voiceMethod: z.nullable(VoiceMethod$outboundSchema).optional(),
  voiceFallbackUrl: z.nullable(z.string()).optional(),
  voiceFallbackMethod: z.nullable(VoiceFallbackMethod$outboundSchema)
    .optional(),
  statusCallbackUrl: z.nullable(z.string()).optional(),
  statusCallbackMethod: z.nullable(StatusCallbackMethod$outboundSchema)
    .optional(),
  cnamLookupEnabled: z.nullable(z.boolean()).optional(),
  connectionPolicySid: z.nullable(z.string()).optional(),
  fromDomainSid: z.nullable(z.string()).optional(),
  dateCreated: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  dateUpdated: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    accountSid: "account_sid",
    friendlyName: "friendly_name",
    voiceUrl: "voice_url",
    voiceMethod: "voice_method",
    voiceFallbackUrl: "voice_fallback_url",
    voiceFallbackMethod: "voice_fallback_method",
    statusCallbackUrl: "status_callback_url",
    statusCallbackMethod: "status_callback_method",
    cnamLookupEnabled: "cnam_lookup_enabled",
    connectionPolicySid: "connection_policy_sid",
    fromDomainSid: "from_domain_sid",
    dateCreated: "date_created",
    dateUpdated: "date_updated",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VoiceV1ByocTrunk$ {
  /** @deprecated use `VoiceV1ByocTrunk$inboundSchema` instead. */
  export const inboundSchema = VoiceV1ByocTrunk$inboundSchema;
  /** @deprecated use `VoiceV1ByocTrunk$outboundSchema` instead. */
  export const outboundSchema = VoiceV1ByocTrunk$outboundSchema;
  /** @deprecated use `VoiceV1ByocTrunk$Outbound` instead. */
  export type Outbound = VoiceV1ByocTrunk$Outbound;
}

export function voiceV1ByocTrunkToJSON(
  voiceV1ByocTrunk: VoiceV1ByocTrunk,
): string {
  return JSON.stringify(
    VoiceV1ByocTrunk$outboundSchema.parse(voiceV1ByocTrunk),
  );
}

export function voiceV1ByocTrunkFromJSON(
  jsonString: string,
): SafeParseResult<VoiceV1ByocTrunk, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VoiceV1ByocTrunk$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VoiceV1ByocTrunk' from JSON`,
  );
}
