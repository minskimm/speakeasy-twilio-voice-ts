/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The URLs of related resources.
 */
export type Links = {};

export type VoiceV1ConnectionPolicy = {
  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Connection Policy resource.
   */
  accountSid?: string | null | undefined;
  /**
   * The unique string that we created to identify the Connection Policy resource.
   */
  sid?: string | null | undefined;
  /**
   * The string that you assigned to describe the resource.
   */
  friendlyName?: string | null | undefined;
  /**
   * The date and time in GMT when the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.
   */
  dateCreated?: Date | null | undefined;
  /**
   * The date and time in GMT when the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.
   */
  dateUpdated?: Date | null | undefined;
  /**
   * The absolute URL of the resource.
   */
  url?: string | null | undefined;
  /**
   * The URLs of related resources.
   */
  links?: Links | null | undefined;
};

/** @internal */
export const Links$inboundSchema: z.ZodType<Links, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Links$Outbound = {};

/** @internal */
export const Links$outboundSchema: z.ZodType<
  Links$Outbound,
  z.ZodTypeDef,
  Links
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Links$ {
  /** @deprecated use `Links$inboundSchema` instead. */
  export const inboundSchema = Links$inboundSchema;
  /** @deprecated use `Links$outboundSchema` instead. */
  export const outboundSchema = Links$outboundSchema;
  /** @deprecated use `Links$Outbound` instead. */
  export type Outbound = Links$Outbound;
}

export function linksToJSON(links: Links): string {
  return JSON.stringify(Links$outboundSchema.parse(links));
}

export function linksFromJSON(
  jsonString: string,
): SafeParseResult<Links, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Links$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Links' from JSON`,
  );
}

/** @internal */
export const VoiceV1ConnectionPolicy$inboundSchema: z.ZodType<
  VoiceV1ConnectionPolicy,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_sid: z.nullable(z.string()).optional(),
  sid: z.nullable(z.string()).optional(),
  friendly_name: z.nullable(z.string()).optional(),
  date_created: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  date_updated: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  url: z.nullable(z.string()).optional(),
  links: z.nullable(z.lazy(() => Links$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "account_sid": "accountSid",
    "friendly_name": "friendlyName",
    "date_created": "dateCreated",
    "date_updated": "dateUpdated",
  });
});

/** @internal */
export type VoiceV1ConnectionPolicy$Outbound = {
  account_sid?: string | null | undefined;
  sid?: string | null | undefined;
  friendly_name?: string | null | undefined;
  date_created?: string | null | undefined;
  date_updated?: string | null | undefined;
  url?: string | null | undefined;
  links?: Links$Outbound | null | undefined;
};

/** @internal */
export const VoiceV1ConnectionPolicy$outboundSchema: z.ZodType<
  VoiceV1ConnectionPolicy$Outbound,
  z.ZodTypeDef,
  VoiceV1ConnectionPolicy
> = z.object({
  accountSid: z.nullable(z.string()).optional(),
  sid: z.nullable(z.string()).optional(),
  friendlyName: z.nullable(z.string()).optional(),
  dateCreated: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  dateUpdated: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  url: z.nullable(z.string()).optional(),
  links: z.nullable(z.lazy(() => Links$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    accountSid: "account_sid",
    friendlyName: "friendly_name",
    dateCreated: "date_created",
    dateUpdated: "date_updated",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VoiceV1ConnectionPolicy$ {
  /** @deprecated use `VoiceV1ConnectionPolicy$inboundSchema` instead. */
  export const inboundSchema = VoiceV1ConnectionPolicy$inboundSchema;
  /** @deprecated use `VoiceV1ConnectionPolicy$outboundSchema` instead. */
  export const outboundSchema = VoiceV1ConnectionPolicy$outboundSchema;
  /** @deprecated use `VoiceV1ConnectionPolicy$Outbound` instead. */
  export type Outbound = VoiceV1ConnectionPolicy$Outbound;
}

export function voiceV1ConnectionPolicyToJSON(
  voiceV1ConnectionPolicy: VoiceV1ConnectionPolicy,
): string {
  return JSON.stringify(
    VoiceV1ConnectionPolicy$outboundSchema.parse(voiceV1ConnectionPolicy),
  );
}

export function voiceV1ConnectionPolicyFromJSON(
  jsonString: string,
): SafeParseResult<VoiceV1ConnectionPolicy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VoiceV1ConnectionPolicy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VoiceV1ConnectionPolicy' from JSON`,
  );
}
