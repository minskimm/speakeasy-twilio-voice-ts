/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type VoiceV1DialingPermissionsDialingPermissionsCountryDialingPermissionsHrsPrefixes =
  {
    /**
     * A prefix is a contiguous number range for a block of E.164 numbers that includes the E.164 assigned country code. For example, a North American Numbering Plan prefix like `+1510720` written like `+1(510) 720` matches all numbers inclusive from `+1(510) 720-0000` to `+1(510) 720-9999`.
     */
    prefix?: string | null | undefined;
  };

/** @internal */
export const VoiceV1DialingPermissionsDialingPermissionsCountryDialingPermissionsHrsPrefixes$inboundSchema:
  z.ZodType<
    VoiceV1DialingPermissionsDialingPermissionsCountryDialingPermissionsHrsPrefixes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    prefix: z.nullable(z.string()).optional(),
  });

/** @internal */
export type VoiceV1DialingPermissionsDialingPermissionsCountryDialingPermissionsHrsPrefixes$Outbound =
  {
    prefix?: string | null | undefined;
  };

/** @internal */
export const VoiceV1DialingPermissionsDialingPermissionsCountryDialingPermissionsHrsPrefixes$outboundSchema:
  z.ZodType<
    VoiceV1DialingPermissionsDialingPermissionsCountryDialingPermissionsHrsPrefixes$Outbound,
    z.ZodTypeDef,
    VoiceV1DialingPermissionsDialingPermissionsCountryDialingPermissionsHrsPrefixes
  > = z.object({
    prefix: z.nullable(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VoiceV1DialingPermissionsDialingPermissionsCountryDialingPermissionsHrsPrefixes$ {
  /** @deprecated use `VoiceV1DialingPermissionsDialingPermissionsCountryDialingPermissionsHrsPrefixes$inboundSchema` instead. */
  export const inboundSchema =
    VoiceV1DialingPermissionsDialingPermissionsCountryDialingPermissionsHrsPrefixes$inboundSchema;
  /** @deprecated use `VoiceV1DialingPermissionsDialingPermissionsCountryDialingPermissionsHrsPrefixes$outboundSchema` instead. */
  export const outboundSchema =
    VoiceV1DialingPermissionsDialingPermissionsCountryDialingPermissionsHrsPrefixes$outboundSchema;
  /** @deprecated use `VoiceV1DialingPermissionsDialingPermissionsCountryDialingPermissionsHrsPrefixes$Outbound` instead. */
  export type Outbound =
    VoiceV1DialingPermissionsDialingPermissionsCountryDialingPermissionsHrsPrefixes$Outbound;
}

export function voiceV1DialingPermissionsDialingPermissionsCountryDialingPermissionsHrsPrefixesToJSON(
  voiceV1DialingPermissionsDialingPermissionsCountryDialingPermissionsHrsPrefixes:
    VoiceV1DialingPermissionsDialingPermissionsCountryDialingPermissionsHrsPrefixes,
): string {
  return JSON.stringify(
    VoiceV1DialingPermissionsDialingPermissionsCountryDialingPermissionsHrsPrefixes$outboundSchema
      .parse(
        voiceV1DialingPermissionsDialingPermissionsCountryDialingPermissionsHrsPrefixes,
      ),
  );
}

export function voiceV1DialingPermissionsDialingPermissionsCountryDialingPermissionsHrsPrefixesFromJSON(
  jsonString: string,
): SafeParseResult<
  VoiceV1DialingPermissionsDialingPermissionsCountryDialingPermissionsHrsPrefixes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      VoiceV1DialingPermissionsDialingPermissionsCountryDialingPermissionsHrsPrefixes$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'VoiceV1DialingPermissionsDialingPermissionsCountryDialingPermissionsHrsPrefixes' from JSON`,
  );
}
