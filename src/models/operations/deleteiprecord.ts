/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const DeleteIpRecordServerList = [
  "https://voice.twilio.com",
] as const;

export type DeleteIpRecordRequest = {
  /**
   * The Twilio-provided string that uniquely identifies the IP Record resource to delete.
   */
  sid: string;
};

/** @internal */
export const DeleteIpRecordRequest$inboundSchema: z.ZodType<
  DeleteIpRecordRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  Sid: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Sid": "sid",
  });
});

/** @internal */
export type DeleteIpRecordRequest$Outbound = {
  Sid: string;
};

/** @internal */
export const DeleteIpRecordRequest$outboundSchema: z.ZodType<
  DeleteIpRecordRequest$Outbound,
  z.ZodTypeDef,
  DeleteIpRecordRequest
> = z.object({
  sid: z.string(),
}).transform((v) => {
  return remap$(v, {
    sid: "Sid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteIpRecordRequest$ {
  /** @deprecated use `DeleteIpRecordRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteIpRecordRequest$inboundSchema;
  /** @deprecated use `DeleteIpRecordRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteIpRecordRequest$outboundSchema;
  /** @deprecated use `DeleteIpRecordRequest$Outbound` instead. */
  export type Outbound = DeleteIpRecordRequest$Outbound;
}

export function deleteIpRecordRequestToJSON(
  deleteIpRecordRequest: DeleteIpRecordRequest,
): string {
  return JSON.stringify(
    DeleteIpRecordRequest$outboundSchema.parse(deleteIpRecordRequest),
  );
}

export function deleteIpRecordRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteIpRecordRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteIpRecordRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteIpRecordRequest' from JSON`,
  );
}
