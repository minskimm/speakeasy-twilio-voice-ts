/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const FetchConnectionPolicyTargetServerList = [
  "https://voice.twilio.com",
] as const;

export type FetchConnectionPolicyTargetRequest = {
  /**
   * The SID of the Connection Policy that owns the Target.
   */
  connectionPolicySid: string;
  /**
   * The unique string that we created to identify the Target resource to fetch.
   */
  sid: string;
};

export type FetchConnectionPolicyTargetResponse = {
  headers: { [k: string]: Array<string> };
  result: components.VoiceV1ConnectionPolicyConnectionPolicyTarget;
};

/** @internal */
export const FetchConnectionPolicyTargetRequest$inboundSchema: z.ZodType<
  FetchConnectionPolicyTargetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ConnectionPolicySid: z.string(),
  Sid: z.string(),
}).transform((v) => {
  return remap$(v, {
    "ConnectionPolicySid": "connectionPolicySid",
    "Sid": "sid",
  });
});

/** @internal */
export type FetchConnectionPolicyTargetRequest$Outbound = {
  ConnectionPolicySid: string;
  Sid: string;
};

/** @internal */
export const FetchConnectionPolicyTargetRequest$outboundSchema: z.ZodType<
  FetchConnectionPolicyTargetRequest$Outbound,
  z.ZodTypeDef,
  FetchConnectionPolicyTargetRequest
> = z.object({
  connectionPolicySid: z.string(),
  sid: z.string(),
}).transform((v) => {
  return remap$(v, {
    connectionPolicySid: "ConnectionPolicySid",
    sid: "Sid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FetchConnectionPolicyTargetRequest$ {
  /** @deprecated use `FetchConnectionPolicyTargetRequest$inboundSchema` instead. */
  export const inboundSchema = FetchConnectionPolicyTargetRequest$inboundSchema;
  /** @deprecated use `FetchConnectionPolicyTargetRequest$outboundSchema` instead. */
  export const outboundSchema =
    FetchConnectionPolicyTargetRequest$outboundSchema;
  /** @deprecated use `FetchConnectionPolicyTargetRequest$Outbound` instead. */
  export type Outbound = FetchConnectionPolicyTargetRequest$Outbound;
}

export function fetchConnectionPolicyTargetRequestToJSON(
  fetchConnectionPolicyTargetRequest: FetchConnectionPolicyTargetRequest,
): string {
  return JSON.stringify(
    FetchConnectionPolicyTargetRequest$outboundSchema.parse(
      fetchConnectionPolicyTargetRequest,
    ),
  );
}

export function fetchConnectionPolicyTargetRequestFromJSON(
  jsonString: string,
): SafeParseResult<FetchConnectionPolicyTargetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FetchConnectionPolicyTargetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FetchConnectionPolicyTargetRequest' from JSON`,
  );
}

/** @internal */
export const FetchConnectionPolicyTargetResponse$inboundSchema: z.ZodType<
  FetchConnectionPolicyTargetResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result:
    components.VoiceV1ConnectionPolicyConnectionPolicyTarget$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type FetchConnectionPolicyTargetResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.VoiceV1ConnectionPolicyConnectionPolicyTarget$Outbound;
};

/** @internal */
export const FetchConnectionPolicyTargetResponse$outboundSchema: z.ZodType<
  FetchConnectionPolicyTargetResponse$Outbound,
  z.ZodTypeDef,
  FetchConnectionPolicyTargetResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result:
    components.VoiceV1ConnectionPolicyConnectionPolicyTarget$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FetchConnectionPolicyTargetResponse$ {
  /** @deprecated use `FetchConnectionPolicyTargetResponse$inboundSchema` instead. */
  export const inboundSchema =
    FetchConnectionPolicyTargetResponse$inboundSchema;
  /** @deprecated use `FetchConnectionPolicyTargetResponse$outboundSchema` instead. */
  export const outboundSchema =
    FetchConnectionPolicyTargetResponse$outboundSchema;
  /** @deprecated use `FetchConnectionPolicyTargetResponse$Outbound` instead. */
  export type Outbound = FetchConnectionPolicyTargetResponse$Outbound;
}

export function fetchConnectionPolicyTargetResponseToJSON(
  fetchConnectionPolicyTargetResponse: FetchConnectionPolicyTargetResponse,
): string {
  return JSON.stringify(
    FetchConnectionPolicyTargetResponse$outboundSchema.parse(
      fetchConnectionPolicyTargetResponse,
    ),
  );
}

export function fetchConnectionPolicyTargetResponseFromJSON(
  jsonString: string,
): SafeParseResult<FetchConnectionPolicyTargetResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FetchConnectionPolicyTargetResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FetchConnectionPolicyTargetResponse' from JSON`,
  );
}
