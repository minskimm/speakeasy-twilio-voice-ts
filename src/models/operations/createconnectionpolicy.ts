/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CreateConnectionPolicyServerList = [
  "https://voice.twilio.com",
] as const;

export type CreateConnectionPolicyCreateConnectionPolicyRequest = {
  /**
   * A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long.
   */
  friendlyName?: string | undefined;
};

export type CreateConnectionPolicyResponse = {
  headers: { [k: string]: Array<string> };
  result: components.VoiceV1ConnectionPolicy;
};

/** @internal */
export const CreateConnectionPolicyCreateConnectionPolicyRequest$inboundSchema:
  z.ZodType<
    CreateConnectionPolicyCreateConnectionPolicyRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    FriendlyName: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "FriendlyName": "friendlyName",
    });
  });

/** @internal */
export type CreateConnectionPolicyCreateConnectionPolicyRequest$Outbound = {
  FriendlyName?: string | undefined;
};

/** @internal */
export const CreateConnectionPolicyCreateConnectionPolicyRequest$outboundSchema:
  z.ZodType<
    CreateConnectionPolicyCreateConnectionPolicyRequest$Outbound,
    z.ZodTypeDef,
    CreateConnectionPolicyCreateConnectionPolicyRequest
  > = z.object({
    friendlyName: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      friendlyName: "FriendlyName",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateConnectionPolicyCreateConnectionPolicyRequest$ {
  /** @deprecated use `CreateConnectionPolicyCreateConnectionPolicyRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateConnectionPolicyCreateConnectionPolicyRequest$inboundSchema;
  /** @deprecated use `CreateConnectionPolicyCreateConnectionPolicyRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateConnectionPolicyCreateConnectionPolicyRequest$outboundSchema;
  /** @deprecated use `CreateConnectionPolicyCreateConnectionPolicyRequest$Outbound` instead. */
  export type Outbound =
    CreateConnectionPolicyCreateConnectionPolicyRequest$Outbound;
}

export function createConnectionPolicyCreateConnectionPolicyRequestToJSON(
  createConnectionPolicyCreateConnectionPolicyRequest:
    CreateConnectionPolicyCreateConnectionPolicyRequest,
): string {
  return JSON.stringify(
    CreateConnectionPolicyCreateConnectionPolicyRequest$outboundSchema.parse(
      createConnectionPolicyCreateConnectionPolicyRequest,
    ),
  );
}

export function createConnectionPolicyCreateConnectionPolicyRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateConnectionPolicyCreateConnectionPolicyRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateConnectionPolicyCreateConnectionPolicyRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateConnectionPolicyCreateConnectionPolicyRequest' from JSON`,
  );
}

/** @internal */
export const CreateConnectionPolicyResponse$inboundSchema: z.ZodType<
  CreateConnectionPolicyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.VoiceV1ConnectionPolicy$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type CreateConnectionPolicyResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.VoiceV1ConnectionPolicy$Outbound;
};

/** @internal */
export const CreateConnectionPolicyResponse$outboundSchema: z.ZodType<
  CreateConnectionPolicyResponse$Outbound,
  z.ZodTypeDef,
  CreateConnectionPolicyResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.VoiceV1ConnectionPolicy$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateConnectionPolicyResponse$ {
  /** @deprecated use `CreateConnectionPolicyResponse$inboundSchema` instead. */
  export const inboundSchema = CreateConnectionPolicyResponse$inboundSchema;
  /** @deprecated use `CreateConnectionPolicyResponse$outboundSchema` instead. */
  export const outboundSchema = CreateConnectionPolicyResponse$outboundSchema;
  /** @deprecated use `CreateConnectionPolicyResponse$Outbound` instead. */
  export type Outbound = CreateConnectionPolicyResponse$Outbound;
}

export function createConnectionPolicyResponseToJSON(
  createConnectionPolicyResponse: CreateConnectionPolicyResponse,
): string {
  return JSON.stringify(
    CreateConnectionPolicyResponse$outboundSchema.parse(
      createConnectionPolicyResponse,
    ),
  );
}

export function createConnectionPolicyResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateConnectionPolicyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateConnectionPolicyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateConnectionPolicyResponse' from JSON`,
  );
}
