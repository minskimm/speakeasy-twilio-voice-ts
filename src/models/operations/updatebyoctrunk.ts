/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const UpdateByocTrunkServerList = [
  "https://voice.twilio.com",
] as const;

/**
 * The HTTP method we should use to call `voice_url`
 */
export const UpdateByocTrunkVoiceMethod = {
  Get: "GET",
  Post: "POST",
} as const;
/**
 * The HTTP method we should use to call `voice_url`
 */
export type UpdateByocTrunkVoiceMethod = ClosedEnum<
  typeof UpdateByocTrunkVoiceMethod
>;

/**
 * The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`.
 */
export const UpdateByocTrunkVoiceFallbackMethod = {
  Get: "GET",
  Post: "POST",
} as const;
/**
 * The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`.
 */
export type UpdateByocTrunkVoiceFallbackMethod = ClosedEnum<
  typeof UpdateByocTrunkVoiceFallbackMethod
>;

/**
 * The HTTP method we should use to call `status_callback_url`. Can be: `GET` or `POST`.
 */
export const UpdateByocTrunkStatusCallbackMethod = {
  Get: "GET",
  Post: "POST",
} as const;
/**
 * The HTTP method we should use to call `status_callback_url`. Can be: `GET` or `POST`.
 */
export type UpdateByocTrunkStatusCallbackMethod = ClosedEnum<
  typeof UpdateByocTrunkStatusCallbackMethod
>;

export type UpdateByocTrunkUpdateByocTrunkRequest = {
  /**
   * A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long.
   */
  friendlyName?: string | undefined;
  /**
   * The URL we should call when the BYOC Trunk receives a call.
   */
  voiceUrl?: string | undefined;
  /**
   * The HTTP method we should use to call `voice_url`
   */
  voiceMethod?: UpdateByocTrunkVoiceMethod | undefined;
  /**
   * The URL that we should call when an error occurs while retrieving or executing the TwiML requested by `voice_url`.
   */
  voiceFallbackUrl?: string | undefined;
  /**
   * The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`.
   */
  voiceFallbackMethod?: UpdateByocTrunkVoiceFallbackMethod | undefined;
  /**
   * The URL that we should call to pass status parameters (such as call ended) to your application.
   */
  statusCallbackUrl?: string | undefined;
  /**
   * The HTTP method we should use to call `status_callback_url`. Can be: `GET` or `POST`.
   */
  statusCallbackMethod?: UpdateByocTrunkStatusCallbackMethod | undefined;
  /**
   * Whether Caller ID Name (CNAM) lookup is enabled for the trunk. If enabled, all inbound calls to the BYOC Trunk from the United States and Canada automatically perform a CNAM Lookup and display Caller ID data on your phone. See [CNAM Lookups](https://www.twilio.com/docs/sip-trunking#CNAM) for more information.
   */
  cnamLookupEnabled?: boolean | undefined;
  /**
   * The SID of the Connection Policy that Twilio will use when routing traffic to your communications infrastructure.
   */
  connectionPolicySid?: string | undefined;
  /**
   * The SID of the SIP Domain that should be used in the `From` header of originating calls sent to your SIP infrastructure. If your SIP infrastructure allows users to "call back" an incoming call, configure this with a [SIP Domain](https://www.twilio.com/docs/voice/api/sending-sip) to ensure proper routing. If not configured, the from domain will default to "sip.twilio.com".
   */
  fromDomainSid?: string | undefined;
};

export type UpdateByocTrunkRequest = {
  /**
   * The Twilio-provided string that uniquely identifies the BYOC Trunk resource to update.
   */
  sid: string;
  requestBody?: UpdateByocTrunkUpdateByocTrunkRequest | undefined;
};

export type UpdateByocTrunkResponse = {
  headers: { [k: string]: Array<string> };
  result: components.VoiceV1ByocTrunk;
};

/** @internal */
export const UpdateByocTrunkVoiceMethod$inboundSchema: z.ZodNativeEnum<
  typeof UpdateByocTrunkVoiceMethod
> = z.nativeEnum(UpdateByocTrunkVoiceMethod);

/** @internal */
export const UpdateByocTrunkVoiceMethod$outboundSchema: z.ZodNativeEnum<
  typeof UpdateByocTrunkVoiceMethod
> = UpdateByocTrunkVoiceMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateByocTrunkVoiceMethod$ {
  /** @deprecated use `UpdateByocTrunkVoiceMethod$inboundSchema` instead. */
  export const inboundSchema = UpdateByocTrunkVoiceMethod$inboundSchema;
  /** @deprecated use `UpdateByocTrunkVoiceMethod$outboundSchema` instead. */
  export const outboundSchema = UpdateByocTrunkVoiceMethod$outboundSchema;
}

/** @internal */
export const UpdateByocTrunkVoiceFallbackMethod$inboundSchema: z.ZodNativeEnum<
  typeof UpdateByocTrunkVoiceFallbackMethod
> = z.nativeEnum(UpdateByocTrunkVoiceFallbackMethod);

/** @internal */
export const UpdateByocTrunkVoiceFallbackMethod$outboundSchema: z.ZodNativeEnum<
  typeof UpdateByocTrunkVoiceFallbackMethod
> = UpdateByocTrunkVoiceFallbackMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateByocTrunkVoiceFallbackMethod$ {
  /** @deprecated use `UpdateByocTrunkVoiceFallbackMethod$inboundSchema` instead. */
  export const inboundSchema = UpdateByocTrunkVoiceFallbackMethod$inboundSchema;
  /** @deprecated use `UpdateByocTrunkVoiceFallbackMethod$outboundSchema` instead. */
  export const outboundSchema =
    UpdateByocTrunkVoiceFallbackMethod$outboundSchema;
}

/** @internal */
export const UpdateByocTrunkStatusCallbackMethod$inboundSchema: z.ZodNativeEnum<
  typeof UpdateByocTrunkStatusCallbackMethod
> = z.nativeEnum(UpdateByocTrunkStatusCallbackMethod);

/** @internal */
export const UpdateByocTrunkStatusCallbackMethod$outboundSchema:
  z.ZodNativeEnum<typeof UpdateByocTrunkStatusCallbackMethod> =
    UpdateByocTrunkStatusCallbackMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateByocTrunkStatusCallbackMethod$ {
  /** @deprecated use `UpdateByocTrunkStatusCallbackMethod$inboundSchema` instead. */
  export const inboundSchema =
    UpdateByocTrunkStatusCallbackMethod$inboundSchema;
  /** @deprecated use `UpdateByocTrunkStatusCallbackMethod$outboundSchema` instead. */
  export const outboundSchema =
    UpdateByocTrunkStatusCallbackMethod$outboundSchema;
}

/** @internal */
export const UpdateByocTrunkUpdateByocTrunkRequest$inboundSchema: z.ZodType<
  UpdateByocTrunkUpdateByocTrunkRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  FriendlyName: z.string().optional(),
  VoiceUrl: z.string().optional(),
  VoiceMethod: UpdateByocTrunkVoiceMethod$inboundSchema.optional(),
  VoiceFallbackUrl: z.string().optional(),
  VoiceFallbackMethod: UpdateByocTrunkVoiceFallbackMethod$inboundSchema
    .optional(),
  StatusCallbackUrl: z.string().optional(),
  StatusCallbackMethod: UpdateByocTrunkStatusCallbackMethod$inboundSchema
    .optional(),
  CnamLookupEnabled: z.boolean().optional(),
  ConnectionPolicySid: z.string().optional(),
  FromDomainSid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "FriendlyName": "friendlyName",
    "VoiceUrl": "voiceUrl",
    "VoiceMethod": "voiceMethod",
    "VoiceFallbackUrl": "voiceFallbackUrl",
    "VoiceFallbackMethod": "voiceFallbackMethod",
    "StatusCallbackUrl": "statusCallbackUrl",
    "StatusCallbackMethod": "statusCallbackMethod",
    "CnamLookupEnabled": "cnamLookupEnabled",
    "ConnectionPolicySid": "connectionPolicySid",
    "FromDomainSid": "fromDomainSid",
  });
});

/** @internal */
export type UpdateByocTrunkUpdateByocTrunkRequest$Outbound = {
  FriendlyName?: string | undefined;
  VoiceUrl?: string | undefined;
  VoiceMethod?: string | undefined;
  VoiceFallbackUrl?: string | undefined;
  VoiceFallbackMethod?: string | undefined;
  StatusCallbackUrl?: string | undefined;
  StatusCallbackMethod?: string | undefined;
  CnamLookupEnabled?: boolean | undefined;
  ConnectionPolicySid?: string | undefined;
  FromDomainSid?: string | undefined;
};

/** @internal */
export const UpdateByocTrunkUpdateByocTrunkRequest$outboundSchema: z.ZodType<
  UpdateByocTrunkUpdateByocTrunkRequest$Outbound,
  z.ZodTypeDef,
  UpdateByocTrunkUpdateByocTrunkRequest
> = z.object({
  friendlyName: z.string().optional(),
  voiceUrl: z.string().optional(),
  voiceMethod: UpdateByocTrunkVoiceMethod$outboundSchema.optional(),
  voiceFallbackUrl: z.string().optional(),
  voiceFallbackMethod: UpdateByocTrunkVoiceFallbackMethod$outboundSchema
    .optional(),
  statusCallbackUrl: z.string().optional(),
  statusCallbackMethod: UpdateByocTrunkStatusCallbackMethod$outboundSchema
    .optional(),
  cnamLookupEnabled: z.boolean().optional(),
  connectionPolicySid: z.string().optional(),
  fromDomainSid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    friendlyName: "FriendlyName",
    voiceUrl: "VoiceUrl",
    voiceMethod: "VoiceMethod",
    voiceFallbackUrl: "VoiceFallbackUrl",
    voiceFallbackMethod: "VoiceFallbackMethod",
    statusCallbackUrl: "StatusCallbackUrl",
    statusCallbackMethod: "StatusCallbackMethod",
    cnamLookupEnabled: "CnamLookupEnabled",
    connectionPolicySid: "ConnectionPolicySid",
    fromDomainSid: "FromDomainSid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateByocTrunkUpdateByocTrunkRequest$ {
  /** @deprecated use `UpdateByocTrunkUpdateByocTrunkRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateByocTrunkUpdateByocTrunkRequest$inboundSchema;
  /** @deprecated use `UpdateByocTrunkUpdateByocTrunkRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateByocTrunkUpdateByocTrunkRequest$outboundSchema;
  /** @deprecated use `UpdateByocTrunkUpdateByocTrunkRequest$Outbound` instead. */
  export type Outbound = UpdateByocTrunkUpdateByocTrunkRequest$Outbound;
}

export function updateByocTrunkUpdateByocTrunkRequestToJSON(
  updateByocTrunkUpdateByocTrunkRequest: UpdateByocTrunkUpdateByocTrunkRequest,
): string {
  return JSON.stringify(
    UpdateByocTrunkUpdateByocTrunkRequest$outboundSchema.parse(
      updateByocTrunkUpdateByocTrunkRequest,
    ),
  );
}

export function updateByocTrunkUpdateByocTrunkRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateByocTrunkUpdateByocTrunkRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateByocTrunkUpdateByocTrunkRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateByocTrunkUpdateByocTrunkRequest' from JSON`,
  );
}

/** @internal */
export const UpdateByocTrunkRequest$inboundSchema: z.ZodType<
  UpdateByocTrunkRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  Sid: z.string(),
  RequestBody: z.lazy(() => UpdateByocTrunkUpdateByocTrunkRequest$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Sid": "sid",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateByocTrunkRequest$Outbound = {
  Sid: string;
  RequestBody?: UpdateByocTrunkUpdateByocTrunkRequest$Outbound | undefined;
};

/** @internal */
export const UpdateByocTrunkRequest$outboundSchema: z.ZodType<
  UpdateByocTrunkRequest$Outbound,
  z.ZodTypeDef,
  UpdateByocTrunkRequest
> = z.object({
  sid: z.string(),
  requestBody: z.lazy(() =>
    UpdateByocTrunkUpdateByocTrunkRequest$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    sid: "Sid",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateByocTrunkRequest$ {
  /** @deprecated use `UpdateByocTrunkRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateByocTrunkRequest$inboundSchema;
  /** @deprecated use `UpdateByocTrunkRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateByocTrunkRequest$outboundSchema;
  /** @deprecated use `UpdateByocTrunkRequest$Outbound` instead. */
  export type Outbound = UpdateByocTrunkRequest$Outbound;
}

export function updateByocTrunkRequestToJSON(
  updateByocTrunkRequest: UpdateByocTrunkRequest,
): string {
  return JSON.stringify(
    UpdateByocTrunkRequest$outboundSchema.parse(updateByocTrunkRequest),
  );
}

export function updateByocTrunkRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateByocTrunkRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateByocTrunkRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateByocTrunkRequest' from JSON`,
  );
}

/** @internal */
export const UpdateByocTrunkResponse$inboundSchema: z.ZodType<
  UpdateByocTrunkResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.VoiceV1ByocTrunk$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type UpdateByocTrunkResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.VoiceV1ByocTrunk$Outbound;
};

/** @internal */
export const UpdateByocTrunkResponse$outboundSchema: z.ZodType<
  UpdateByocTrunkResponse$Outbound,
  z.ZodTypeDef,
  UpdateByocTrunkResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.VoiceV1ByocTrunk$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateByocTrunkResponse$ {
  /** @deprecated use `UpdateByocTrunkResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateByocTrunkResponse$inboundSchema;
  /** @deprecated use `UpdateByocTrunkResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateByocTrunkResponse$outboundSchema;
  /** @deprecated use `UpdateByocTrunkResponse$Outbound` instead. */
  export type Outbound = UpdateByocTrunkResponse$Outbound;
}

export function updateByocTrunkResponseToJSON(
  updateByocTrunkResponse: UpdateByocTrunkResponse,
): string {
  return JSON.stringify(
    UpdateByocTrunkResponse$outboundSchema.parse(updateByocTrunkResponse),
  );
}

export function updateByocTrunkResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateByocTrunkResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateByocTrunkResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateByocTrunkResponse' from JSON`,
  );
}
