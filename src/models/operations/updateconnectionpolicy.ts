/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const UpdateConnectionPolicyServerList = [
  "https://voice.twilio.com",
] as const;

export type UpdateConnectionPolicyUpdateConnectionPolicyRequest = {
  /**
   * A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long.
   */
  friendlyName?: string | undefined;
};

export type UpdateConnectionPolicyRequest = {
  /**
   * The unique string that we created to identify the Connection Policy resource to update.
   */
  sid: string;
  requestBody?: UpdateConnectionPolicyUpdateConnectionPolicyRequest | undefined;
};

export type UpdateConnectionPolicyResponse = {
  headers: { [k: string]: Array<string> };
  result: components.VoiceV1ConnectionPolicy;
};

/** @internal */
export const UpdateConnectionPolicyUpdateConnectionPolicyRequest$inboundSchema:
  z.ZodType<
    UpdateConnectionPolicyUpdateConnectionPolicyRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    FriendlyName: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "FriendlyName": "friendlyName",
    });
  });

/** @internal */
export type UpdateConnectionPolicyUpdateConnectionPolicyRequest$Outbound = {
  FriendlyName?: string | undefined;
};

/** @internal */
export const UpdateConnectionPolicyUpdateConnectionPolicyRequest$outboundSchema:
  z.ZodType<
    UpdateConnectionPolicyUpdateConnectionPolicyRequest$Outbound,
    z.ZodTypeDef,
    UpdateConnectionPolicyUpdateConnectionPolicyRequest
  > = z.object({
    friendlyName: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      friendlyName: "FriendlyName",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConnectionPolicyUpdateConnectionPolicyRequest$ {
  /** @deprecated use `UpdateConnectionPolicyUpdateConnectionPolicyRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateConnectionPolicyUpdateConnectionPolicyRequest$inboundSchema;
  /** @deprecated use `UpdateConnectionPolicyUpdateConnectionPolicyRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateConnectionPolicyUpdateConnectionPolicyRequest$outboundSchema;
  /** @deprecated use `UpdateConnectionPolicyUpdateConnectionPolicyRequest$Outbound` instead. */
  export type Outbound =
    UpdateConnectionPolicyUpdateConnectionPolicyRequest$Outbound;
}

export function updateConnectionPolicyUpdateConnectionPolicyRequestToJSON(
  updateConnectionPolicyUpdateConnectionPolicyRequest:
    UpdateConnectionPolicyUpdateConnectionPolicyRequest,
): string {
  return JSON.stringify(
    UpdateConnectionPolicyUpdateConnectionPolicyRequest$outboundSchema.parse(
      updateConnectionPolicyUpdateConnectionPolicyRequest,
    ),
  );
}

export function updateConnectionPolicyUpdateConnectionPolicyRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateConnectionPolicyUpdateConnectionPolicyRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateConnectionPolicyUpdateConnectionPolicyRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateConnectionPolicyUpdateConnectionPolicyRequest' from JSON`,
  );
}

/** @internal */
export const UpdateConnectionPolicyRequest$inboundSchema: z.ZodType<
  UpdateConnectionPolicyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  Sid: z.string(),
  RequestBody: z.lazy(() =>
    UpdateConnectionPolicyUpdateConnectionPolicyRequest$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "Sid": "sid",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateConnectionPolicyRequest$Outbound = {
  Sid: string;
  RequestBody?:
    | UpdateConnectionPolicyUpdateConnectionPolicyRequest$Outbound
    | undefined;
};

/** @internal */
export const UpdateConnectionPolicyRequest$outboundSchema: z.ZodType<
  UpdateConnectionPolicyRequest$Outbound,
  z.ZodTypeDef,
  UpdateConnectionPolicyRequest
> = z.object({
  sid: z.string(),
  requestBody: z.lazy(() =>
    UpdateConnectionPolicyUpdateConnectionPolicyRequest$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    sid: "Sid",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConnectionPolicyRequest$ {
  /** @deprecated use `UpdateConnectionPolicyRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateConnectionPolicyRequest$inboundSchema;
  /** @deprecated use `UpdateConnectionPolicyRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateConnectionPolicyRequest$outboundSchema;
  /** @deprecated use `UpdateConnectionPolicyRequest$Outbound` instead. */
  export type Outbound = UpdateConnectionPolicyRequest$Outbound;
}

export function updateConnectionPolicyRequestToJSON(
  updateConnectionPolicyRequest: UpdateConnectionPolicyRequest,
): string {
  return JSON.stringify(
    UpdateConnectionPolicyRequest$outboundSchema.parse(
      updateConnectionPolicyRequest,
    ),
  );
}

export function updateConnectionPolicyRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateConnectionPolicyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateConnectionPolicyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateConnectionPolicyRequest' from JSON`,
  );
}

/** @internal */
export const UpdateConnectionPolicyResponse$inboundSchema: z.ZodType<
  UpdateConnectionPolicyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.VoiceV1ConnectionPolicy$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type UpdateConnectionPolicyResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.VoiceV1ConnectionPolicy$Outbound;
};

/** @internal */
export const UpdateConnectionPolicyResponse$outboundSchema: z.ZodType<
  UpdateConnectionPolicyResponse$Outbound,
  z.ZodTypeDef,
  UpdateConnectionPolicyResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.VoiceV1ConnectionPolicy$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConnectionPolicyResponse$ {
  /** @deprecated use `UpdateConnectionPolicyResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateConnectionPolicyResponse$inboundSchema;
  /** @deprecated use `UpdateConnectionPolicyResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateConnectionPolicyResponse$outboundSchema;
  /** @deprecated use `UpdateConnectionPolicyResponse$Outbound` instead. */
  export type Outbound = UpdateConnectionPolicyResponse$Outbound;
}

export function updateConnectionPolicyResponseToJSON(
  updateConnectionPolicyResponse: UpdateConnectionPolicyResponse,
): string {
  return JSON.stringify(
    UpdateConnectionPolicyResponse$outboundSchema.parse(
      updateConnectionPolicyResponse,
    ),
  );
}

export function updateConnectionPolicyResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateConnectionPolicyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateConnectionPolicyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateConnectionPolicyResponse' from JSON`,
  );
}
