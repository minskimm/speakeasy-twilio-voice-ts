/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ListConnectionPolicyTargetServerList = [
  "https://voice.twilio.com",
] as const;

export type ListConnectionPolicyTargetRequest = {
  /**
   * The SID of the Connection Policy from which to read the Targets.
   */
  connectionPolicySid: string;
  /**
   * How many resources to return in each list page. The default is 50, and the maximum is 1000.
   */
  pageSize?: number | undefined;
  /**
   * The page index. This value is simply for client state.
   */
  page?: number | undefined;
  /**
   * The page token. This is provided by the API.
   */
  pageToken?: string | undefined;
};

export type ListConnectionPolicyTargetMeta = {
  firstPageUrl?: string | undefined;
  key?: string | undefined;
  nextPageUrl?: string | null | undefined;
  page?: number | undefined;
  pageSize?: number | undefined;
  previousPageUrl?: string | null | undefined;
  url?: string | undefined;
};

/**
 * OK
 */
export type ListConnectionPolicyTargetListConnectionPolicyTargetResponse = {
  targets?:
    | Array<components.VoiceV1ConnectionPolicyConnectionPolicyTarget>
    | undefined;
  meta?: ListConnectionPolicyTargetMeta | undefined;
};

export type ListConnectionPolicyTargetResponse = {
  headers: { [k: string]: Array<string> };
  result: ListConnectionPolicyTargetListConnectionPolicyTargetResponse;
};

/** @internal */
export const ListConnectionPolicyTargetRequest$inboundSchema: z.ZodType<
  ListConnectionPolicyTargetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ConnectionPolicySid: z.string(),
  PageSize: z.number().int().optional(),
  Page: z.number().int().optional(),
  PageToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "ConnectionPolicySid": "connectionPolicySid",
    "PageSize": "pageSize",
    "Page": "page",
    "PageToken": "pageToken",
  });
});

/** @internal */
export type ListConnectionPolicyTargetRequest$Outbound = {
  ConnectionPolicySid: string;
  PageSize?: number | undefined;
  Page?: number | undefined;
  PageToken?: string | undefined;
};

/** @internal */
export const ListConnectionPolicyTargetRequest$outboundSchema: z.ZodType<
  ListConnectionPolicyTargetRequest$Outbound,
  z.ZodTypeDef,
  ListConnectionPolicyTargetRequest
> = z.object({
  connectionPolicySid: z.string(),
  pageSize: z.number().int().optional(),
  page: z.number().int().optional(),
  pageToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    connectionPolicySid: "ConnectionPolicySid",
    pageSize: "PageSize",
    page: "Page",
    pageToken: "PageToken",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListConnectionPolicyTargetRequest$ {
  /** @deprecated use `ListConnectionPolicyTargetRequest$inboundSchema` instead. */
  export const inboundSchema = ListConnectionPolicyTargetRequest$inboundSchema;
  /** @deprecated use `ListConnectionPolicyTargetRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListConnectionPolicyTargetRequest$outboundSchema;
  /** @deprecated use `ListConnectionPolicyTargetRequest$Outbound` instead. */
  export type Outbound = ListConnectionPolicyTargetRequest$Outbound;
}

export function listConnectionPolicyTargetRequestToJSON(
  listConnectionPolicyTargetRequest: ListConnectionPolicyTargetRequest,
): string {
  return JSON.stringify(
    ListConnectionPolicyTargetRequest$outboundSchema.parse(
      listConnectionPolicyTargetRequest,
    ),
  );
}

export function listConnectionPolicyTargetRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListConnectionPolicyTargetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListConnectionPolicyTargetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListConnectionPolicyTargetRequest' from JSON`,
  );
}

/** @internal */
export const ListConnectionPolicyTargetMeta$inboundSchema: z.ZodType<
  ListConnectionPolicyTargetMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  first_page_url: z.string().optional(),
  key: z.string().optional(),
  next_page_url: z.nullable(z.string()).optional(),
  page: z.number().int().optional(),
  page_size: z.number().int().optional(),
  previous_page_url: z.nullable(z.string()).optional(),
  url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "first_page_url": "firstPageUrl",
    "next_page_url": "nextPageUrl",
    "page_size": "pageSize",
    "previous_page_url": "previousPageUrl",
  });
});

/** @internal */
export type ListConnectionPolicyTargetMeta$Outbound = {
  first_page_url?: string | undefined;
  key?: string | undefined;
  next_page_url?: string | null | undefined;
  page?: number | undefined;
  page_size?: number | undefined;
  previous_page_url?: string | null | undefined;
  url?: string | undefined;
};

/** @internal */
export const ListConnectionPolicyTargetMeta$outboundSchema: z.ZodType<
  ListConnectionPolicyTargetMeta$Outbound,
  z.ZodTypeDef,
  ListConnectionPolicyTargetMeta
> = z.object({
  firstPageUrl: z.string().optional(),
  key: z.string().optional(),
  nextPageUrl: z.nullable(z.string()).optional(),
  page: z.number().int().optional(),
  pageSize: z.number().int().optional(),
  previousPageUrl: z.nullable(z.string()).optional(),
  url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    firstPageUrl: "first_page_url",
    nextPageUrl: "next_page_url",
    pageSize: "page_size",
    previousPageUrl: "previous_page_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListConnectionPolicyTargetMeta$ {
  /** @deprecated use `ListConnectionPolicyTargetMeta$inboundSchema` instead. */
  export const inboundSchema = ListConnectionPolicyTargetMeta$inboundSchema;
  /** @deprecated use `ListConnectionPolicyTargetMeta$outboundSchema` instead. */
  export const outboundSchema = ListConnectionPolicyTargetMeta$outboundSchema;
  /** @deprecated use `ListConnectionPolicyTargetMeta$Outbound` instead. */
  export type Outbound = ListConnectionPolicyTargetMeta$Outbound;
}

export function listConnectionPolicyTargetMetaToJSON(
  listConnectionPolicyTargetMeta: ListConnectionPolicyTargetMeta,
): string {
  return JSON.stringify(
    ListConnectionPolicyTargetMeta$outboundSchema.parse(
      listConnectionPolicyTargetMeta,
    ),
  );
}

export function listConnectionPolicyTargetMetaFromJSON(
  jsonString: string,
): SafeParseResult<ListConnectionPolicyTargetMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListConnectionPolicyTargetMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListConnectionPolicyTargetMeta' from JSON`,
  );
}

/** @internal */
export const ListConnectionPolicyTargetListConnectionPolicyTargetResponse$inboundSchema:
  z.ZodType<
    ListConnectionPolicyTargetListConnectionPolicyTargetResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    targets: z.array(
      components.VoiceV1ConnectionPolicyConnectionPolicyTarget$inboundSchema,
    ).optional(),
    meta: z.lazy(() => ListConnectionPolicyTargetMeta$inboundSchema).optional(),
  });

/** @internal */
export type ListConnectionPolicyTargetListConnectionPolicyTargetResponse$Outbound =
  {
    targets?:
      | Array<components.VoiceV1ConnectionPolicyConnectionPolicyTarget$Outbound>
      | undefined;
    meta?: ListConnectionPolicyTargetMeta$Outbound | undefined;
  };

/** @internal */
export const ListConnectionPolicyTargetListConnectionPolicyTargetResponse$outboundSchema:
  z.ZodType<
    ListConnectionPolicyTargetListConnectionPolicyTargetResponse$Outbound,
    z.ZodTypeDef,
    ListConnectionPolicyTargetListConnectionPolicyTargetResponse
  > = z.object({
    targets: z.array(
      components.VoiceV1ConnectionPolicyConnectionPolicyTarget$outboundSchema,
    ).optional(),
    meta: z.lazy(() => ListConnectionPolicyTargetMeta$outboundSchema)
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListConnectionPolicyTargetListConnectionPolicyTargetResponse$ {
  /** @deprecated use `ListConnectionPolicyTargetListConnectionPolicyTargetResponse$inboundSchema` instead. */
  export const inboundSchema =
    ListConnectionPolicyTargetListConnectionPolicyTargetResponse$inboundSchema;
  /** @deprecated use `ListConnectionPolicyTargetListConnectionPolicyTargetResponse$outboundSchema` instead. */
  export const outboundSchema =
    ListConnectionPolicyTargetListConnectionPolicyTargetResponse$outboundSchema;
  /** @deprecated use `ListConnectionPolicyTargetListConnectionPolicyTargetResponse$Outbound` instead. */
  export type Outbound =
    ListConnectionPolicyTargetListConnectionPolicyTargetResponse$Outbound;
}

export function listConnectionPolicyTargetListConnectionPolicyTargetResponseToJSON(
  listConnectionPolicyTargetListConnectionPolicyTargetResponse:
    ListConnectionPolicyTargetListConnectionPolicyTargetResponse,
): string {
  return JSON.stringify(
    ListConnectionPolicyTargetListConnectionPolicyTargetResponse$outboundSchema
      .parse(listConnectionPolicyTargetListConnectionPolicyTargetResponse),
  );
}

export function listConnectionPolicyTargetListConnectionPolicyTargetResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  ListConnectionPolicyTargetListConnectionPolicyTargetResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListConnectionPolicyTargetListConnectionPolicyTargetResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'ListConnectionPolicyTargetListConnectionPolicyTargetResponse' from JSON`,
  );
}

/** @internal */
export const ListConnectionPolicyTargetResponse$inboundSchema: z.ZodType<
  ListConnectionPolicyTargetResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.lazy(() =>
    ListConnectionPolicyTargetListConnectionPolicyTargetResponse$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ListConnectionPolicyTargetResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: ListConnectionPolicyTargetListConnectionPolicyTargetResponse$Outbound;
};

/** @internal */
export const ListConnectionPolicyTargetResponse$outboundSchema: z.ZodType<
  ListConnectionPolicyTargetResponse$Outbound,
  z.ZodTypeDef,
  ListConnectionPolicyTargetResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.lazy(() =>
    ListConnectionPolicyTargetListConnectionPolicyTargetResponse$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListConnectionPolicyTargetResponse$ {
  /** @deprecated use `ListConnectionPolicyTargetResponse$inboundSchema` instead. */
  export const inboundSchema = ListConnectionPolicyTargetResponse$inboundSchema;
  /** @deprecated use `ListConnectionPolicyTargetResponse$outboundSchema` instead. */
  export const outboundSchema =
    ListConnectionPolicyTargetResponse$outboundSchema;
  /** @deprecated use `ListConnectionPolicyTargetResponse$Outbound` instead. */
  export type Outbound = ListConnectionPolicyTargetResponse$Outbound;
}

export function listConnectionPolicyTargetResponseToJSON(
  listConnectionPolicyTargetResponse: ListConnectionPolicyTargetResponse,
): string {
  return JSON.stringify(
    ListConnectionPolicyTargetResponse$outboundSchema.parse(
      listConnectionPolicyTargetResponse,
    ),
  );
}

export function listConnectionPolicyTargetResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListConnectionPolicyTargetResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListConnectionPolicyTargetResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListConnectionPolicyTargetResponse' from JSON`,
  );
}
