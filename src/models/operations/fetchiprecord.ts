/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const FetchIpRecordServerList = [
  "https://voice.twilio.com",
] as const;

export type FetchIpRecordRequest = {
  /**
   * The Twilio-provided string that uniquely identifies the IP Record resource to fetch.
   */
  sid: string;
};

export type FetchIpRecordResponse = {
  headers: { [k: string]: Array<string> };
  result: components.VoiceV1IpRecord;
};

/** @internal */
export const FetchIpRecordRequest$inboundSchema: z.ZodType<
  FetchIpRecordRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  Sid: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Sid": "sid",
  });
});

/** @internal */
export type FetchIpRecordRequest$Outbound = {
  Sid: string;
};

/** @internal */
export const FetchIpRecordRequest$outboundSchema: z.ZodType<
  FetchIpRecordRequest$Outbound,
  z.ZodTypeDef,
  FetchIpRecordRequest
> = z.object({
  sid: z.string(),
}).transform((v) => {
  return remap$(v, {
    sid: "Sid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FetchIpRecordRequest$ {
  /** @deprecated use `FetchIpRecordRequest$inboundSchema` instead. */
  export const inboundSchema = FetchIpRecordRequest$inboundSchema;
  /** @deprecated use `FetchIpRecordRequest$outboundSchema` instead. */
  export const outboundSchema = FetchIpRecordRequest$outboundSchema;
  /** @deprecated use `FetchIpRecordRequest$Outbound` instead. */
  export type Outbound = FetchIpRecordRequest$Outbound;
}

export function fetchIpRecordRequestToJSON(
  fetchIpRecordRequest: FetchIpRecordRequest,
): string {
  return JSON.stringify(
    FetchIpRecordRequest$outboundSchema.parse(fetchIpRecordRequest),
  );
}

export function fetchIpRecordRequestFromJSON(
  jsonString: string,
): SafeParseResult<FetchIpRecordRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FetchIpRecordRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FetchIpRecordRequest' from JSON`,
  );
}

/** @internal */
export const FetchIpRecordResponse$inboundSchema: z.ZodType<
  FetchIpRecordResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.VoiceV1IpRecord$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type FetchIpRecordResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.VoiceV1IpRecord$Outbound;
};

/** @internal */
export const FetchIpRecordResponse$outboundSchema: z.ZodType<
  FetchIpRecordResponse$Outbound,
  z.ZodTypeDef,
  FetchIpRecordResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.VoiceV1IpRecord$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FetchIpRecordResponse$ {
  /** @deprecated use `FetchIpRecordResponse$inboundSchema` instead. */
  export const inboundSchema = FetchIpRecordResponse$inboundSchema;
  /** @deprecated use `FetchIpRecordResponse$outboundSchema` instead. */
  export const outboundSchema = FetchIpRecordResponse$outboundSchema;
  /** @deprecated use `FetchIpRecordResponse$Outbound` instead. */
  export type Outbound = FetchIpRecordResponse$Outbound;
}

export function fetchIpRecordResponseToJSON(
  fetchIpRecordResponse: FetchIpRecordResponse,
): string {
  return JSON.stringify(
    FetchIpRecordResponse$outboundSchema.parse(fetchIpRecordResponse),
  );
}

export function fetchIpRecordResponseFromJSON(
  jsonString: string,
): SafeParseResult<FetchIpRecordResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FetchIpRecordResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FetchIpRecordResponse' from JSON`,
  );
}
