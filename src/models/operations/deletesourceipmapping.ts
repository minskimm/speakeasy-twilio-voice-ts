/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const DeleteSourceIpMappingServerList = [
  "https://voice.twilio.com",
] as const;

export type DeleteSourceIpMappingRequest = {
  /**
   * The Twilio-provided string that uniquely identifies the IP Record resource to delete.
   */
  sid: string;
};

/** @internal */
export const DeleteSourceIpMappingRequest$inboundSchema: z.ZodType<
  DeleteSourceIpMappingRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  Sid: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Sid": "sid",
  });
});

/** @internal */
export type DeleteSourceIpMappingRequest$Outbound = {
  Sid: string;
};

/** @internal */
export const DeleteSourceIpMappingRequest$outboundSchema: z.ZodType<
  DeleteSourceIpMappingRequest$Outbound,
  z.ZodTypeDef,
  DeleteSourceIpMappingRequest
> = z.object({
  sid: z.string(),
}).transform((v) => {
  return remap$(v, {
    sid: "Sid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteSourceIpMappingRequest$ {
  /** @deprecated use `DeleteSourceIpMappingRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteSourceIpMappingRequest$inboundSchema;
  /** @deprecated use `DeleteSourceIpMappingRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteSourceIpMappingRequest$outboundSchema;
  /** @deprecated use `DeleteSourceIpMappingRequest$Outbound` instead. */
  export type Outbound = DeleteSourceIpMappingRequest$Outbound;
}

export function deleteSourceIpMappingRequestToJSON(
  deleteSourceIpMappingRequest: DeleteSourceIpMappingRequest,
): string {
  return JSON.stringify(
    DeleteSourceIpMappingRequest$outboundSchema.parse(
      deleteSourceIpMappingRequest,
    ),
  );
}

export function deleteSourceIpMappingRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteSourceIpMappingRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteSourceIpMappingRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteSourceIpMappingRequest' from JSON`,
  );
}
