/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const FetchSourceIpMappingServerList = [
  "https://voice.twilio.com",
] as const;

export type FetchSourceIpMappingRequest = {
  /**
   * The Twilio-provided string that uniquely identifies the IP Record resource to fetch.
   */
  sid: string;
};

export type FetchSourceIpMappingResponse = {
  headers: { [k: string]: Array<string> };
  result: components.VoiceV1SourceIpMapping;
};

/** @internal */
export const FetchSourceIpMappingRequest$inboundSchema: z.ZodType<
  FetchSourceIpMappingRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  Sid: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Sid": "sid",
  });
});

/** @internal */
export type FetchSourceIpMappingRequest$Outbound = {
  Sid: string;
};

/** @internal */
export const FetchSourceIpMappingRequest$outboundSchema: z.ZodType<
  FetchSourceIpMappingRequest$Outbound,
  z.ZodTypeDef,
  FetchSourceIpMappingRequest
> = z.object({
  sid: z.string(),
}).transform((v) => {
  return remap$(v, {
    sid: "Sid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FetchSourceIpMappingRequest$ {
  /** @deprecated use `FetchSourceIpMappingRequest$inboundSchema` instead. */
  export const inboundSchema = FetchSourceIpMappingRequest$inboundSchema;
  /** @deprecated use `FetchSourceIpMappingRequest$outboundSchema` instead. */
  export const outboundSchema = FetchSourceIpMappingRequest$outboundSchema;
  /** @deprecated use `FetchSourceIpMappingRequest$Outbound` instead. */
  export type Outbound = FetchSourceIpMappingRequest$Outbound;
}

export function fetchSourceIpMappingRequestToJSON(
  fetchSourceIpMappingRequest: FetchSourceIpMappingRequest,
): string {
  return JSON.stringify(
    FetchSourceIpMappingRequest$outboundSchema.parse(
      fetchSourceIpMappingRequest,
    ),
  );
}

export function fetchSourceIpMappingRequestFromJSON(
  jsonString: string,
): SafeParseResult<FetchSourceIpMappingRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FetchSourceIpMappingRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FetchSourceIpMappingRequest' from JSON`,
  );
}

/** @internal */
export const FetchSourceIpMappingResponse$inboundSchema: z.ZodType<
  FetchSourceIpMappingResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.VoiceV1SourceIpMapping$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type FetchSourceIpMappingResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.VoiceV1SourceIpMapping$Outbound;
};

/** @internal */
export const FetchSourceIpMappingResponse$outboundSchema: z.ZodType<
  FetchSourceIpMappingResponse$Outbound,
  z.ZodTypeDef,
  FetchSourceIpMappingResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.VoiceV1SourceIpMapping$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FetchSourceIpMappingResponse$ {
  /** @deprecated use `FetchSourceIpMappingResponse$inboundSchema` instead. */
  export const inboundSchema = FetchSourceIpMappingResponse$inboundSchema;
  /** @deprecated use `FetchSourceIpMappingResponse$outboundSchema` instead. */
  export const outboundSchema = FetchSourceIpMappingResponse$outboundSchema;
  /** @deprecated use `FetchSourceIpMappingResponse$Outbound` instead. */
  export type Outbound = FetchSourceIpMappingResponse$Outbound;
}

export function fetchSourceIpMappingResponseToJSON(
  fetchSourceIpMappingResponse: FetchSourceIpMappingResponse,
): string {
  return JSON.stringify(
    FetchSourceIpMappingResponse$outboundSchema.parse(
      fetchSourceIpMappingResponse,
    ),
  );
}

export function fetchSourceIpMappingResponseFromJSON(
  jsonString: string,
): SafeParseResult<FetchSourceIpMappingResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FetchSourceIpMappingResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FetchSourceIpMappingResponse' from JSON`,
  );
}
