/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CreateSourceIpMappingServerList = [
  "https://voice.twilio.com",
] as const;

export type CreateSourceIpMappingCreateSourceIpMappingRequest = {
  /**
   * The Twilio-provided string that uniquely identifies the IP Record resource to map from.
   */
  ipRecordSid: string;
  /**
   * The SID of the SIP Domain that the IP Record should be mapped to.
   */
  sipDomainSid: string;
};

export type CreateSourceIpMappingResponse = {
  headers: { [k: string]: Array<string> };
  result: components.VoiceV1SourceIpMapping;
};

/** @internal */
export const CreateSourceIpMappingCreateSourceIpMappingRequest$inboundSchema:
  z.ZodType<
    CreateSourceIpMappingCreateSourceIpMappingRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    IpRecordSid: z.string(),
    SipDomainSid: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "IpRecordSid": "ipRecordSid",
      "SipDomainSid": "sipDomainSid",
    });
  });

/** @internal */
export type CreateSourceIpMappingCreateSourceIpMappingRequest$Outbound = {
  IpRecordSid: string;
  SipDomainSid: string;
};

/** @internal */
export const CreateSourceIpMappingCreateSourceIpMappingRequest$outboundSchema:
  z.ZodType<
    CreateSourceIpMappingCreateSourceIpMappingRequest$Outbound,
    z.ZodTypeDef,
    CreateSourceIpMappingCreateSourceIpMappingRequest
  > = z.object({
    ipRecordSid: z.string(),
    sipDomainSid: z.string(),
  }).transform((v) => {
    return remap$(v, {
      ipRecordSid: "IpRecordSid",
      sipDomainSid: "SipDomainSid",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSourceIpMappingCreateSourceIpMappingRequest$ {
  /** @deprecated use `CreateSourceIpMappingCreateSourceIpMappingRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateSourceIpMappingCreateSourceIpMappingRequest$inboundSchema;
  /** @deprecated use `CreateSourceIpMappingCreateSourceIpMappingRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateSourceIpMappingCreateSourceIpMappingRequest$outboundSchema;
  /** @deprecated use `CreateSourceIpMappingCreateSourceIpMappingRequest$Outbound` instead. */
  export type Outbound =
    CreateSourceIpMappingCreateSourceIpMappingRequest$Outbound;
}

export function createSourceIpMappingCreateSourceIpMappingRequestToJSON(
  createSourceIpMappingCreateSourceIpMappingRequest:
    CreateSourceIpMappingCreateSourceIpMappingRequest,
): string {
  return JSON.stringify(
    CreateSourceIpMappingCreateSourceIpMappingRequest$outboundSchema.parse(
      createSourceIpMappingCreateSourceIpMappingRequest,
    ),
  );
}

export function createSourceIpMappingCreateSourceIpMappingRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateSourceIpMappingCreateSourceIpMappingRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSourceIpMappingCreateSourceIpMappingRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateSourceIpMappingCreateSourceIpMappingRequest' from JSON`,
  );
}

/** @internal */
export const CreateSourceIpMappingResponse$inboundSchema: z.ZodType<
  CreateSourceIpMappingResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.VoiceV1SourceIpMapping$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type CreateSourceIpMappingResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.VoiceV1SourceIpMapping$Outbound;
};

/** @internal */
export const CreateSourceIpMappingResponse$outboundSchema: z.ZodType<
  CreateSourceIpMappingResponse$Outbound,
  z.ZodTypeDef,
  CreateSourceIpMappingResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.VoiceV1SourceIpMapping$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSourceIpMappingResponse$ {
  /** @deprecated use `CreateSourceIpMappingResponse$inboundSchema` instead. */
  export const inboundSchema = CreateSourceIpMappingResponse$inboundSchema;
  /** @deprecated use `CreateSourceIpMappingResponse$outboundSchema` instead. */
  export const outboundSchema = CreateSourceIpMappingResponse$outboundSchema;
  /** @deprecated use `CreateSourceIpMappingResponse$Outbound` instead. */
  export type Outbound = CreateSourceIpMappingResponse$Outbound;
}

export function createSourceIpMappingResponseToJSON(
  createSourceIpMappingResponse: CreateSourceIpMappingResponse,
): string {
  return JSON.stringify(
    CreateSourceIpMappingResponse$outboundSchema.parse(
      createSourceIpMappingResponse,
    ),
  );
}

export function createSourceIpMappingResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateSourceIpMappingResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSourceIpMappingResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSourceIpMappingResponse' from JSON`,
  );
}
