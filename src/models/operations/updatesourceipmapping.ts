/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const UpdateSourceIpMappingServerList = [
  "https://voice.twilio.com",
] as const;

export type UpdateSourceIpMappingUpdateSourceIpMappingRequest = {
  /**
   * The SID of the SIP Domain that the IP Record should be mapped to.
   */
  sipDomainSid: string;
};

export type UpdateSourceIpMappingRequest = {
  /**
   * The Twilio-provided string that uniquely identifies the IP Record resource to update.
   */
  sid: string;
  requestBody?: UpdateSourceIpMappingUpdateSourceIpMappingRequest | undefined;
};

export type UpdateSourceIpMappingResponse = {
  headers: { [k: string]: Array<string> };
  result: components.VoiceV1SourceIpMapping;
};

/** @internal */
export const UpdateSourceIpMappingUpdateSourceIpMappingRequest$inboundSchema:
  z.ZodType<
    UpdateSourceIpMappingUpdateSourceIpMappingRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    SipDomainSid: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "SipDomainSid": "sipDomainSid",
    });
  });

/** @internal */
export type UpdateSourceIpMappingUpdateSourceIpMappingRequest$Outbound = {
  SipDomainSid: string;
};

/** @internal */
export const UpdateSourceIpMappingUpdateSourceIpMappingRequest$outboundSchema:
  z.ZodType<
    UpdateSourceIpMappingUpdateSourceIpMappingRequest$Outbound,
    z.ZodTypeDef,
    UpdateSourceIpMappingUpdateSourceIpMappingRequest
  > = z.object({
    sipDomainSid: z.string(),
  }).transform((v) => {
    return remap$(v, {
      sipDomainSid: "SipDomainSid",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSourceIpMappingUpdateSourceIpMappingRequest$ {
  /** @deprecated use `UpdateSourceIpMappingUpdateSourceIpMappingRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateSourceIpMappingUpdateSourceIpMappingRequest$inboundSchema;
  /** @deprecated use `UpdateSourceIpMappingUpdateSourceIpMappingRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSourceIpMappingUpdateSourceIpMappingRequest$outboundSchema;
  /** @deprecated use `UpdateSourceIpMappingUpdateSourceIpMappingRequest$Outbound` instead. */
  export type Outbound =
    UpdateSourceIpMappingUpdateSourceIpMappingRequest$Outbound;
}

export function updateSourceIpMappingUpdateSourceIpMappingRequestToJSON(
  updateSourceIpMappingUpdateSourceIpMappingRequest:
    UpdateSourceIpMappingUpdateSourceIpMappingRequest,
): string {
  return JSON.stringify(
    UpdateSourceIpMappingUpdateSourceIpMappingRequest$outboundSchema.parse(
      updateSourceIpMappingUpdateSourceIpMappingRequest,
    ),
  );
}

export function updateSourceIpMappingUpdateSourceIpMappingRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateSourceIpMappingUpdateSourceIpMappingRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateSourceIpMappingUpdateSourceIpMappingRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateSourceIpMappingUpdateSourceIpMappingRequest' from JSON`,
  );
}

/** @internal */
export const UpdateSourceIpMappingRequest$inboundSchema: z.ZodType<
  UpdateSourceIpMappingRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  Sid: z.string(),
  RequestBody: z.lazy(() =>
    UpdateSourceIpMappingUpdateSourceIpMappingRequest$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "Sid": "sid",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateSourceIpMappingRequest$Outbound = {
  Sid: string;
  RequestBody?:
    | UpdateSourceIpMappingUpdateSourceIpMappingRequest$Outbound
    | undefined;
};

/** @internal */
export const UpdateSourceIpMappingRequest$outboundSchema: z.ZodType<
  UpdateSourceIpMappingRequest$Outbound,
  z.ZodTypeDef,
  UpdateSourceIpMappingRequest
> = z.object({
  sid: z.string(),
  requestBody: z.lazy(() =>
    UpdateSourceIpMappingUpdateSourceIpMappingRequest$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    sid: "Sid",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSourceIpMappingRequest$ {
  /** @deprecated use `UpdateSourceIpMappingRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateSourceIpMappingRequest$inboundSchema;
  /** @deprecated use `UpdateSourceIpMappingRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateSourceIpMappingRequest$outboundSchema;
  /** @deprecated use `UpdateSourceIpMappingRequest$Outbound` instead. */
  export type Outbound = UpdateSourceIpMappingRequest$Outbound;
}

export function updateSourceIpMappingRequestToJSON(
  updateSourceIpMappingRequest: UpdateSourceIpMappingRequest,
): string {
  return JSON.stringify(
    UpdateSourceIpMappingRequest$outboundSchema.parse(
      updateSourceIpMappingRequest,
    ),
  );
}

export function updateSourceIpMappingRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSourceIpMappingRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSourceIpMappingRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSourceIpMappingRequest' from JSON`,
  );
}

/** @internal */
export const UpdateSourceIpMappingResponse$inboundSchema: z.ZodType<
  UpdateSourceIpMappingResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.VoiceV1SourceIpMapping$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type UpdateSourceIpMappingResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.VoiceV1SourceIpMapping$Outbound;
};

/** @internal */
export const UpdateSourceIpMappingResponse$outboundSchema: z.ZodType<
  UpdateSourceIpMappingResponse$Outbound,
  z.ZodTypeDef,
  UpdateSourceIpMappingResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.VoiceV1SourceIpMapping$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSourceIpMappingResponse$ {
  /** @deprecated use `UpdateSourceIpMappingResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateSourceIpMappingResponse$inboundSchema;
  /** @deprecated use `UpdateSourceIpMappingResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateSourceIpMappingResponse$outboundSchema;
  /** @deprecated use `UpdateSourceIpMappingResponse$Outbound` instead. */
  export type Outbound = UpdateSourceIpMappingResponse$Outbound;
}

export function updateSourceIpMappingResponseToJSON(
  updateSourceIpMappingResponse: UpdateSourceIpMappingResponse,
): string {
  return JSON.stringify(
    UpdateSourceIpMappingResponse$outboundSchema.parse(
      updateSourceIpMappingResponse,
    ),
  );
}

export function updateSourceIpMappingResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSourceIpMappingResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSourceIpMappingResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSourceIpMappingResponse' from JSON`,
  );
}
