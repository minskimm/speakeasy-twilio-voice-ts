/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ListConnectionPolicyServerList = [
  "https://voice.twilio.com",
] as const;

export type ListConnectionPolicyRequest = {
  /**
   * How many resources to return in each list page. The default is 50, and the maximum is 1000.
   */
  pageSize?: number | undefined;
  /**
   * The page index. This value is simply for client state.
   */
  page?: number | undefined;
  /**
   * The page token. This is provided by the API.
   */
  pageToken?: string | undefined;
};

export type ListConnectionPolicyMeta = {
  firstPageUrl?: string | undefined;
  key?: string | undefined;
  nextPageUrl?: string | null | undefined;
  page?: number | undefined;
  pageSize?: number | undefined;
  previousPageUrl?: string | null | undefined;
  url?: string | undefined;
};

/**
 * OK
 */
export type ListConnectionPolicyListConnectionPolicyResponse = {
  connectionPolicies?: Array<components.VoiceV1ConnectionPolicy> | undefined;
  meta?: ListConnectionPolicyMeta | undefined;
};

export type ListConnectionPolicyResponse = {
  headers: { [k: string]: Array<string> };
  result: ListConnectionPolicyListConnectionPolicyResponse;
};

/** @internal */
export const ListConnectionPolicyRequest$inboundSchema: z.ZodType<
  ListConnectionPolicyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  PageSize: z.number().int().optional(),
  Page: z.number().int().optional(),
  PageToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "PageSize": "pageSize",
    "Page": "page",
    "PageToken": "pageToken",
  });
});

/** @internal */
export type ListConnectionPolicyRequest$Outbound = {
  PageSize?: number | undefined;
  Page?: number | undefined;
  PageToken?: string | undefined;
};

/** @internal */
export const ListConnectionPolicyRequest$outboundSchema: z.ZodType<
  ListConnectionPolicyRequest$Outbound,
  z.ZodTypeDef,
  ListConnectionPolicyRequest
> = z.object({
  pageSize: z.number().int().optional(),
  page: z.number().int().optional(),
  pageToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    pageSize: "PageSize",
    page: "Page",
    pageToken: "PageToken",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListConnectionPolicyRequest$ {
  /** @deprecated use `ListConnectionPolicyRequest$inboundSchema` instead. */
  export const inboundSchema = ListConnectionPolicyRequest$inboundSchema;
  /** @deprecated use `ListConnectionPolicyRequest$outboundSchema` instead. */
  export const outboundSchema = ListConnectionPolicyRequest$outboundSchema;
  /** @deprecated use `ListConnectionPolicyRequest$Outbound` instead. */
  export type Outbound = ListConnectionPolicyRequest$Outbound;
}

export function listConnectionPolicyRequestToJSON(
  listConnectionPolicyRequest: ListConnectionPolicyRequest,
): string {
  return JSON.stringify(
    ListConnectionPolicyRequest$outboundSchema.parse(
      listConnectionPolicyRequest,
    ),
  );
}

export function listConnectionPolicyRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListConnectionPolicyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListConnectionPolicyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListConnectionPolicyRequest' from JSON`,
  );
}

/** @internal */
export const ListConnectionPolicyMeta$inboundSchema: z.ZodType<
  ListConnectionPolicyMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  first_page_url: z.string().optional(),
  key: z.string().optional(),
  next_page_url: z.nullable(z.string()).optional(),
  page: z.number().int().optional(),
  page_size: z.number().int().optional(),
  previous_page_url: z.nullable(z.string()).optional(),
  url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "first_page_url": "firstPageUrl",
    "next_page_url": "nextPageUrl",
    "page_size": "pageSize",
    "previous_page_url": "previousPageUrl",
  });
});

/** @internal */
export type ListConnectionPolicyMeta$Outbound = {
  first_page_url?: string | undefined;
  key?: string | undefined;
  next_page_url?: string | null | undefined;
  page?: number | undefined;
  page_size?: number | undefined;
  previous_page_url?: string | null | undefined;
  url?: string | undefined;
};

/** @internal */
export const ListConnectionPolicyMeta$outboundSchema: z.ZodType<
  ListConnectionPolicyMeta$Outbound,
  z.ZodTypeDef,
  ListConnectionPolicyMeta
> = z.object({
  firstPageUrl: z.string().optional(),
  key: z.string().optional(),
  nextPageUrl: z.nullable(z.string()).optional(),
  page: z.number().int().optional(),
  pageSize: z.number().int().optional(),
  previousPageUrl: z.nullable(z.string()).optional(),
  url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    firstPageUrl: "first_page_url",
    nextPageUrl: "next_page_url",
    pageSize: "page_size",
    previousPageUrl: "previous_page_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListConnectionPolicyMeta$ {
  /** @deprecated use `ListConnectionPolicyMeta$inboundSchema` instead. */
  export const inboundSchema = ListConnectionPolicyMeta$inboundSchema;
  /** @deprecated use `ListConnectionPolicyMeta$outboundSchema` instead. */
  export const outboundSchema = ListConnectionPolicyMeta$outboundSchema;
  /** @deprecated use `ListConnectionPolicyMeta$Outbound` instead. */
  export type Outbound = ListConnectionPolicyMeta$Outbound;
}

export function listConnectionPolicyMetaToJSON(
  listConnectionPolicyMeta: ListConnectionPolicyMeta,
): string {
  return JSON.stringify(
    ListConnectionPolicyMeta$outboundSchema.parse(listConnectionPolicyMeta),
  );
}

export function listConnectionPolicyMetaFromJSON(
  jsonString: string,
): SafeParseResult<ListConnectionPolicyMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListConnectionPolicyMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListConnectionPolicyMeta' from JSON`,
  );
}

/** @internal */
export const ListConnectionPolicyListConnectionPolicyResponse$inboundSchema:
  z.ZodType<
    ListConnectionPolicyListConnectionPolicyResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    connection_policies: z.array(
      components.VoiceV1ConnectionPolicy$inboundSchema,
    ).optional(),
    meta: z.lazy(() => ListConnectionPolicyMeta$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "connection_policies": "connectionPolicies",
    });
  });

/** @internal */
export type ListConnectionPolicyListConnectionPolicyResponse$Outbound = {
  connection_policies?:
    | Array<components.VoiceV1ConnectionPolicy$Outbound>
    | undefined;
  meta?: ListConnectionPolicyMeta$Outbound | undefined;
};

/** @internal */
export const ListConnectionPolicyListConnectionPolicyResponse$outboundSchema:
  z.ZodType<
    ListConnectionPolicyListConnectionPolicyResponse$Outbound,
    z.ZodTypeDef,
    ListConnectionPolicyListConnectionPolicyResponse
  > = z.object({
    connectionPolicies: z.array(
      components.VoiceV1ConnectionPolicy$outboundSchema,
    ).optional(),
    meta: z.lazy(() => ListConnectionPolicyMeta$outboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      connectionPolicies: "connection_policies",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListConnectionPolicyListConnectionPolicyResponse$ {
  /** @deprecated use `ListConnectionPolicyListConnectionPolicyResponse$inboundSchema` instead. */
  export const inboundSchema =
    ListConnectionPolicyListConnectionPolicyResponse$inboundSchema;
  /** @deprecated use `ListConnectionPolicyListConnectionPolicyResponse$outboundSchema` instead. */
  export const outboundSchema =
    ListConnectionPolicyListConnectionPolicyResponse$outboundSchema;
  /** @deprecated use `ListConnectionPolicyListConnectionPolicyResponse$Outbound` instead. */
  export type Outbound =
    ListConnectionPolicyListConnectionPolicyResponse$Outbound;
}

export function listConnectionPolicyListConnectionPolicyResponseToJSON(
  listConnectionPolicyListConnectionPolicyResponse:
    ListConnectionPolicyListConnectionPolicyResponse,
): string {
  return JSON.stringify(
    ListConnectionPolicyListConnectionPolicyResponse$outboundSchema.parse(
      listConnectionPolicyListConnectionPolicyResponse,
    ),
  );
}

export function listConnectionPolicyListConnectionPolicyResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  ListConnectionPolicyListConnectionPolicyResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListConnectionPolicyListConnectionPolicyResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListConnectionPolicyListConnectionPolicyResponse' from JSON`,
  );
}

/** @internal */
export const ListConnectionPolicyResponse$inboundSchema: z.ZodType<
  ListConnectionPolicyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.lazy(() =>
    ListConnectionPolicyListConnectionPolicyResponse$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ListConnectionPolicyResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: ListConnectionPolicyListConnectionPolicyResponse$Outbound;
};

/** @internal */
export const ListConnectionPolicyResponse$outboundSchema: z.ZodType<
  ListConnectionPolicyResponse$Outbound,
  z.ZodTypeDef,
  ListConnectionPolicyResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.lazy(() =>
    ListConnectionPolicyListConnectionPolicyResponse$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListConnectionPolicyResponse$ {
  /** @deprecated use `ListConnectionPolicyResponse$inboundSchema` instead. */
  export const inboundSchema = ListConnectionPolicyResponse$inboundSchema;
  /** @deprecated use `ListConnectionPolicyResponse$outboundSchema` instead. */
  export const outboundSchema = ListConnectionPolicyResponse$outboundSchema;
  /** @deprecated use `ListConnectionPolicyResponse$Outbound` instead. */
  export type Outbound = ListConnectionPolicyResponse$Outbound;
}

export function listConnectionPolicyResponseToJSON(
  listConnectionPolicyResponse: ListConnectionPolicyResponse,
): string {
  return JSON.stringify(
    ListConnectionPolicyResponse$outboundSchema.parse(
      listConnectionPolicyResponse,
    ),
  );
}

export function listConnectionPolicyResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListConnectionPolicyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListConnectionPolicyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListConnectionPolicyResponse' from JSON`,
  );
}
