/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ListIpRecordServerList = [
  "https://voice.twilio.com",
] as const;

export type ListIpRecordRequest = {
  /**
   * How many resources to return in each list page. The default is 50, and the maximum is 1000.
   */
  pageSize?: number | undefined;
  /**
   * The page index. This value is simply for client state.
   */
  page?: number | undefined;
  /**
   * The page token. This is provided by the API.
   */
  pageToken?: string | undefined;
};

export type ListIpRecordMeta = {
  firstPageUrl?: string | undefined;
  key?: string | undefined;
  nextPageUrl?: string | null | undefined;
  page?: number | undefined;
  pageSize?: number | undefined;
  previousPageUrl?: string | null | undefined;
  url?: string | undefined;
};

/**
 * OK
 */
export type ListIpRecordListIpRecordResponse = {
  ipRecords?: Array<components.VoiceV1IpRecord> | undefined;
  meta?: ListIpRecordMeta | undefined;
};

export type ListIpRecordResponse = {
  headers: { [k: string]: Array<string> };
  result: ListIpRecordListIpRecordResponse;
};

/** @internal */
export const ListIpRecordRequest$inboundSchema: z.ZodType<
  ListIpRecordRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  PageSize: z.number().int().optional(),
  Page: z.number().int().optional(),
  PageToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "PageSize": "pageSize",
    "Page": "page",
    "PageToken": "pageToken",
  });
});

/** @internal */
export type ListIpRecordRequest$Outbound = {
  PageSize?: number | undefined;
  Page?: number | undefined;
  PageToken?: string | undefined;
};

/** @internal */
export const ListIpRecordRequest$outboundSchema: z.ZodType<
  ListIpRecordRequest$Outbound,
  z.ZodTypeDef,
  ListIpRecordRequest
> = z.object({
  pageSize: z.number().int().optional(),
  page: z.number().int().optional(),
  pageToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    pageSize: "PageSize",
    page: "Page",
    pageToken: "PageToken",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIpRecordRequest$ {
  /** @deprecated use `ListIpRecordRequest$inboundSchema` instead. */
  export const inboundSchema = ListIpRecordRequest$inboundSchema;
  /** @deprecated use `ListIpRecordRequest$outboundSchema` instead. */
  export const outboundSchema = ListIpRecordRequest$outboundSchema;
  /** @deprecated use `ListIpRecordRequest$Outbound` instead. */
  export type Outbound = ListIpRecordRequest$Outbound;
}

export function listIpRecordRequestToJSON(
  listIpRecordRequest: ListIpRecordRequest,
): string {
  return JSON.stringify(
    ListIpRecordRequest$outboundSchema.parse(listIpRecordRequest),
  );
}

export function listIpRecordRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListIpRecordRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIpRecordRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIpRecordRequest' from JSON`,
  );
}

/** @internal */
export const ListIpRecordMeta$inboundSchema: z.ZodType<
  ListIpRecordMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  first_page_url: z.string().optional(),
  key: z.string().optional(),
  next_page_url: z.nullable(z.string()).optional(),
  page: z.number().int().optional(),
  page_size: z.number().int().optional(),
  previous_page_url: z.nullable(z.string()).optional(),
  url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "first_page_url": "firstPageUrl",
    "next_page_url": "nextPageUrl",
    "page_size": "pageSize",
    "previous_page_url": "previousPageUrl",
  });
});

/** @internal */
export type ListIpRecordMeta$Outbound = {
  first_page_url?: string | undefined;
  key?: string | undefined;
  next_page_url?: string | null | undefined;
  page?: number | undefined;
  page_size?: number | undefined;
  previous_page_url?: string | null | undefined;
  url?: string | undefined;
};

/** @internal */
export const ListIpRecordMeta$outboundSchema: z.ZodType<
  ListIpRecordMeta$Outbound,
  z.ZodTypeDef,
  ListIpRecordMeta
> = z.object({
  firstPageUrl: z.string().optional(),
  key: z.string().optional(),
  nextPageUrl: z.nullable(z.string()).optional(),
  page: z.number().int().optional(),
  pageSize: z.number().int().optional(),
  previousPageUrl: z.nullable(z.string()).optional(),
  url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    firstPageUrl: "first_page_url",
    nextPageUrl: "next_page_url",
    pageSize: "page_size",
    previousPageUrl: "previous_page_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIpRecordMeta$ {
  /** @deprecated use `ListIpRecordMeta$inboundSchema` instead. */
  export const inboundSchema = ListIpRecordMeta$inboundSchema;
  /** @deprecated use `ListIpRecordMeta$outboundSchema` instead. */
  export const outboundSchema = ListIpRecordMeta$outboundSchema;
  /** @deprecated use `ListIpRecordMeta$Outbound` instead. */
  export type Outbound = ListIpRecordMeta$Outbound;
}

export function listIpRecordMetaToJSON(
  listIpRecordMeta: ListIpRecordMeta,
): string {
  return JSON.stringify(
    ListIpRecordMeta$outboundSchema.parse(listIpRecordMeta),
  );
}

export function listIpRecordMetaFromJSON(
  jsonString: string,
): SafeParseResult<ListIpRecordMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIpRecordMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIpRecordMeta' from JSON`,
  );
}

/** @internal */
export const ListIpRecordListIpRecordResponse$inboundSchema: z.ZodType<
  ListIpRecordListIpRecordResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ip_records: z.array(components.VoiceV1IpRecord$inboundSchema).optional(),
  meta: z.lazy(() => ListIpRecordMeta$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "ip_records": "ipRecords",
  });
});

/** @internal */
export type ListIpRecordListIpRecordResponse$Outbound = {
  ip_records?: Array<components.VoiceV1IpRecord$Outbound> | undefined;
  meta?: ListIpRecordMeta$Outbound | undefined;
};

/** @internal */
export const ListIpRecordListIpRecordResponse$outboundSchema: z.ZodType<
  ListIpRecordListIpRecordResponse$Outbound,
  z.ZodTypeDef,
  ListIpRecordListIpRecordResponse
> = z.object({
  ipRecords: z.array(components.VoiceV1IpRecord$outboundSchema).optional(),
  meta: z.lazy(() => ListIpRecordMeta$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    ipRecords: "ip_records",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIpRecordListIpRecordResponse$ {
  /** @deprecated use `ListIpRecordListIpRecordResponse$inboundSchema` instead. */
  export const inboundSchema = ListIpRecordListIpRecordResponse$inboundSchema;
  /** @deprecated use `ListIpRecordListIpRecordResponse$outboundSchema` instead. */
  export const outboundSchema = ListIpRecordListIpRecordResponse$outboundSchema;
  /** @deprecated use `ListIpRecordListIpRecordResponse$Outbound` instead. */
  export type Outbound = ListIpRecordListIpRecordResponse$Outbound;
}

export function listIpRecordListIpRecordResponseToJSON(
  listIpRecordListIpRecordResponse: ListIpRecordListIpRecordResponse,
): string {
  return JSON.stringify(
    ListIpRecordListIpRecordResponse$outboundSchema.parse(
      listIpRecordListIpRecordResponse,
    ),
  );
}

export function listIpRecordListIpRecordResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListIpRecordListIpRecordResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIpRecordListIpRecordResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIpRecordListIpRecordResponse' from JSON`,
  );
}

/** @internal */
export const ListIpRecordResponse$inboundSchema: z.ZodType<
  ListIpRecordResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.lazy(() => ListIpRecordListIpRecordResponse$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ListIpRecordResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: ListIpRecordListIpRecordResponse$Outbound;
};

/** @internal */
export const ListIpRecordResponse$outboundSchema: z.ZodType<
  ListIpRecordResponse$Outbound,
  z.ZodTypeDef,
  ListIpRecordResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.lazy(() => ListIpRecordListIpRecordResponse$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIpRecordResponse$ {
  /** @deprecated use `ListIpRecordResponse$inboundSchema` instead. */
  export const inboundSchema = ListIpRecordResponse$inboundSchema;
  /** @deprecated use `ListIpRecordResponse$outboundSchema` instead. */
  export const outboundSchema = ListIpRecordResponse$outboundSchema;
  /** @deprecated use `ListIpRecordResponse$Outbound` instead. */
  export type Outbound = ListIpRecordResponse$Outbound;
}

export function listIpRecordResponseToJSON(
  listIpRecordResponse: ListIpRecordResponse,
): string {
  return JSON.stringify(
    ListIpRecordResponse$outboundSchema.parse(listIpRecordResponse),
  );
}

export function listIpRecordResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListIpRecordResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIpRecordResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIpRecordResponse' from JSON`,
  );
}
