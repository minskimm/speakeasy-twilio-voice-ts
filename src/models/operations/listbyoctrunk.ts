/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ListByocTrunkServerList = [
  "https://voice.twilio.com",
] as const;

export type ListByocTrunkRequest = {
  /**
   * How many resources to return in each list page. The default is 50, and the maximum is 1000.
   */
  pageSize?: number | undefined;
  /**
   * The page index. This value is simply for client state.
   */
  page?: number | undefined;
  /**
   * The page token. This is provided by the API.
   */
  pageToken?: string | undefined;
};

export type Meta = {
  firstPageUrl?: string | undefined;
  key?: string | undefined;
  nextPageUrl?: string | null | undefined;
  page?: number | undefined;
  pageSize?: number | undefined;
  previousPageUrl?: string | null | undefined;
  url?: string | undefined;
};

/**
 * OK
 */
export type ListByocTrunkListByocTrunkResponse = {
  byocTrunks?: Array<components.VoiceV1ByocTrunk> | undefined;
  meta?: Meta | undefined;
};

export type ListByocTrunkResponse = {
  headers: { [k: string]: Array<string> };
  result: ListByocTrunkListByocTrunkResponse;
};

/** @internal */
export const ListByocTrunkRequest$inboundSchema: z.ZodType<
  ListByocTrunkRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  PageSize: z.number().int().optional(),
  Page: z.number().int().optional(),
  PageToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "PageSize": "pageSize",
    "Page": "page",
    "PageToken": "pageToken",
  });
});

/** @internal */
export type ListByocTrunkRequest$Outbound = {
  PageSize?: number | undefined;
  Page?: number | undefined;
  PageToken?: string | undefined;
};

/** @internal */
export const ListByocTrunkRequest$outboundSchema: z.ZodType<
  ListByocTrunkRequest$Outbound,
  z.ZodTypeDef,
  ListByocTrunkRequest
> = z.object({
  pageSize: z.number().int().optional(),
  page: z.number().int().optional(),
  pageToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    pageSize: "PageSize",
    page: "Page",
    pageToken: "PageToken",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListByocTrunkRequest$ {
  /** @deprecated use `ListByocTrunkRequest$inboundSchema` instead. */
  export const inboundSchema = ListByocTrunkRequest$inboundSchema;
  /** @deprecated use `ListByocTrunkRequest$outboundSchema` instead. */
  export const outboundSchema = ListByocTrunkRequest$outboundSchema;
  /** @deprecated use `ListByocTrunkRequest$Outbound` instead. */
  export type Outbound = ListByocTrunkRequest$Outbound;
}

export function listByocTrunkRequestToJSON(
  listByocTrunkRequest: ListByocTrunkRequest,
): string {
  return JSON.stringify(
    ListByocTrunkRequest$outboundSchema.parse(listByocTrunkRequest),
  );
}

export function listByocTrunkRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListByocTrunkRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListByocTrunkRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListByocTrunkRequest' from JSON`,
  );
}

/** @internal */
export const Meta$inboundSchema: z.ZodType<Meta, z.ZodTypeDef, unknown> = z
  .object({
    first_page_url: z.string().optional(),
    key: z.string().optional(),
    next_page_url: z.nullable(z.string()).optional(),
    page: z.number().int().optional(),
    page_size: z.number().int().optional(),
    previous_page_url: z.nullable(z.string()).optional(),
    url: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "first_page_url": "firstPageUrl",
      "next_page_url": "nextPageUrl",
      "page_size": "pageSize",
      "previous_page_url": "previousPageUrl",
    });
  });

/** @internal */
export type Meta$Outbound = {
  first_page_url?: string | undefined;
  key?: string | undefined;
  next_page_url?: string | null | undefined;
  page?: number | undefined;
  page_size?: number | undefined;
  previous_page_url?: string | null | undefined;
  url?: string | undefined;
};

/** @internal */
export const Meta$outboundSchema: z.ZodType<Meta$Outbound, z.ZodTypeDef, Meta> =
  z.object({
    firstPageUrl: z.string().optional(),
    key: z.string().optional(),
    nextPageUrl: z.nullable(z.string()).optional(),
    page: z.number().int().optional(),
    pageSize: z.number().int().optional(),
    previousPageUrl: z.nullable(z.string()).optional(),
    url: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      firstPageUrl: "first_page_url",
      nextPageUrl: "next_page_url",
      pageSize: "page_size",
      previousPageUrl: "previous_page_url",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Meta$ {
  /** @deprecated use `Meta$inboundSchema` instead. */
  export const inboundSchema = Meta$inboundSchema;
  /** @deprecated use `Meta$outboundSchema` instead. */
  export const outboundSchema = Meta$outboundSchema;
  /** @deprecated use `Meta$Outbound` instead. */
  export type Outbound = Meta$Outbound;
}

export function metaToJSON(meta: Meta): string {
  return JSON.stringify(Meta$outboundSchema.parse(meta));
}

export function metaFromJSON(
  jsonString: string,
): SafeParseResult<Meta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Meta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Meta' from JSON`,
  );
}

/** @internal */
export const ListByocTrunkListByocTrunkResponse$inboundSchema: z.ZodType<
  ListByocTrunkListByocTrunkResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  byoc_trunks: z.array(components.VoiceV1ByocTrunk$inboundSchema).optional(),
  meta: z.lazy(() => Meta$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "byoc_trunks": "byocTrunks",
  });
});

/** @internal */
export type ListByocTrunkListByocTrunkResponse$Outbound = {
  byoc_trunks?: Array<components.VoiceV1ByocTrunk$Outbound> | undefined;
  meta?: Meta$Outbound | undefined;
};

/** @internal */
export const ListByocTrunkListByocTrunkResponse$outboundSchema: z.ZodType<
  ListByocTrunkListByocTrunkResponse$Outbound,
  z.ZodTypeDef,
  ListByocTrunkListByocTrunkResponse
> = z.object({
  byocTrunks: z.array(components.VoiceV1ByocTrunk$outboundSchema).optional(),
  meta: z.lazy(() => Meta$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    byocTrunks: "byoc_trunks",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListByocTrunkListByocTrunkResponse$ {
  /** @deprecated use `ListByocTrunkListByocTrunkResponse$inboundSchema` instead. */
  export const inboundSchema = ListByocTrunkListByocTrunkResponse$inboundSchema;
  /** @deprecated use `ListByocTrunkListByocTrunkResponse$outboundSchema` instead. */
  export const outboundSchema =
    ListByocTrunkListByocTrunkResponse$outboundSchema;
  /** @deprecated use `ListByocTrunkListByocTrunkResponse$Outbound` instead. */
  export type Outbound = ListByocTrunkListByocTrunkResponse$Outbound;
}

export function listByocTrunkListByocTrunkResponseToJSON(
  listByocTrunkListByocTrunkResponse: ListByocTrunkListByocTrunkResponse,
): string {
  return JSON.stringify(
    ListByocTrunkListByocTrunkResponse$outboundSchema.parse(
      listByocTrunkListByocTrunkResponse,
    ),
  );
}

export function listByocTrunkListByocTrunkResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListByocTrunkListByocTrunkResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListByocTrunkListByocTrunkResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListByocTrunkListByocTrunkResponse' from JSON`,
  );
}

/** @internal */
export const ListByocTrunkResponse$inboundSchema: z.ZodType<
  ListByocTrunkResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.lazy(() => ListByocTrunkListByocTrunkResponse$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ListByocTrunkResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: ListByocTrunkListByocTrunkResponse$Outbound;
};

/** @internal */
export const ListByocTrunkResponse$outboundSchema: z.ZodType<
  ListByocTrunkResponse$Outbound,
  z.ZodTypeDef,
  ListByocTrunkResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.lazy(() => ListByocTrunkListByocTrunkResponse$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListByocTrunkResponse$ {
  /** @deprecated use `ListByocTrunkResponse$inboundSchema` instead. */
  export const inboundSchema = ListByocTrunkResponse$inboundSchema;
  /** @deprecated use `ListByocTrunkResponse$outboundSchema` instead. */
  export const outboundSchema = ListByocTrunkResponse$outboundSchema;
  /** @deprecated use `ListByocTrunkResponse$Outbound` instead. */
  export type Outbound = ListByocTrunkResponse$Outbound;
}

export function listByocTrunkResponseToJSON(
  listByocTrunkResponse: ListByocTrunkResponse,
): string {
  return JSON.stringify(
    ListByocTrunkResponse$outboundSchema.parse(listByocTrunkResponse),
  );
}

export function listByocTrunkResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListByocTrunkResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListByocTrunkResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListByocTrunkResponse' from JSON`,
  );
}
