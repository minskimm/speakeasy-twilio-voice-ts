/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CreateConnectionPolicyTargetServerList = [
  "https://voice.twilio.com",
] as const;

export type CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest = {
  /**
   * The SIP address you want Twilio to route your calls to. This must be a `sip:` schema. `sips` is NOT supported.
   */
  target: string;
  /**
   * A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long.
   */
  friendlyName?: string | undefined;
  /**
   * The relative importance of the target. Can be an integer from 0 to 65535, inclusive, and the default is 10. The lowest number represents the most important target.
   */
  priority?: number | undefined;
  /**
   * The value that determines the relative share of the load the Target should receive compared to other Targets with the same priority. Can be an integer from 1 to 65535, inclusive, and the default is 10. Targets with higher values receive more load than those with lower ones with the same priority.
   */
  weight?: number | undefined;
  /**
   * Whether the Target is enabled. The default is `true`.
   */
  enabled?: boolean | undefined;
};

export type CreateConnectionPolicyTargetRequest = {
  /**
   * The SID of the Connection Policy that owns the Target.
   */
  connectionPolicySid: string;
  requestBody?:
    | CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest
    | undefined;
};

export type CreateConnectionPolicyTargetResponse = {
  headers: { [k: string]: Array<string> };
  result: components.VoiceV1ConnectionPolicyConnectionPolicyTarget;
};

/** @internal */
export const CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$inboundSchema:
  z.ZodType<
    CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Target: z.string(),
    FriendlyName: z.string().optional(),
    Priority: z.number().int().optional(),
    Weight: z.number().int().optional(),
    Enabled: z.boolean().optional(),
  }).transform((v) => {
    return remap$(v, {
      "Target": "target",
      "FriendlyName": "friendlyName",
      "Priority": "priority",
      "Weight": "weight",
      "Enabled": "enabled",
    });
  });

/** @internal */
export type CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$Outbound =
  {
    Target: string;
    FriendlyName?: string | undefined;
    Priority?: number | undefined;
    Weight?: number | undefined;
    Enabled?: boolean | undefined;
  };

/** @internal */
export const CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$outboundSchema:
  z.ZodType<
    CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$Outbound,
    z.ZodTypeDef,
    CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest
  > = z.object({
    target: z.string(),
    friendlyName: z.string().optional(),
    priority: z.number().int().optional(),
    weight: z.number().int().optional(),
    enabled: z.boolean().optional(),
  }).transform((v) => {
    return remap$(v, {
      target: "Target",
      friendlyName: "FriendlyName",
      priority: "Priority",
      weight: "Weight",
      enabled: "Enabled",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$ {
  /** @deprecated use `CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$inboundSchema;
  /** @deprecated use `CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$outboundSchema;
  /** @deprecated use `CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$Outbound` instead. */
  export type Outbound =
    CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$Outbound;
}

export function createConnectionPolicyTargetCreateConnectionPolicyTargetRequestToJSON(
  createConnectionPolicyTargetCreateConnectionPolicyTargetRequest:
    CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest,
): string {
  return JSON.stringify(
    CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$outboundSchema
      .parse(createConnectionPolicyTargetCreateConnectionPolicyTargetRequest),
  );
}

export function createConnectionPolicyTargetCreateConnectionPolicyTargetRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest' from JSON`,
  );
}

/** @internal */
export const CreateConnectionPolicyTargetRequest$inboundSchema: z.ZodType<
  CreateConnectionPolicyTargetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ConnectionPolicySid: z.string(),
  RequestBody: z.lazy(() =>
    CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "ConnectionPolicySid": "connectionPolicySid",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateConnectionPolicyTargetRequest$Outbound = {
  ConnectionPolicySid: string;
  RequestBody?:
    | CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$Outbound
    | undefined;
};

/** @internal */
export const CreateConnectionPolicyTargetRequest$outboundSchema: z.ZodType<
  CreateConnectionPolicyTargetRequest$Outbound,
  z.ZodTypeDef,
  CreateConnectionPolicyTargetRequest
> = z.object({
  connectionPolicySid: z.string(),
  requestBody: z.lazy(() =>
    CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    connectionPolicySid: "ConnectionPolicySid",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateConnectionPolicyTargetRequest$ {
  /** @deprecated use `CreateConnectionPolicyTargetRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateConnectionPolicyTargetRequest$inboundSchema;
  /** @deprecated use `CreateConnectionPolicyTargetRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateConnectionPolicyTargetRequest$outboundSchema;
  /** @deprecated use `CreateConnectionPolicyTargetRequest$Outbound` instead. */
  export type Outbound = CreateConnectionPolicyTargetRequest$Outbound;
}

export function createConnectionPolicyTargetRequestToJSON(
  createConnectionPolicyTargetRequest: CreateConnectionPolicyTargetRequest,
): string {
  return JSON.stringify(
    CreateConnectionPolicyTargetRequest$outboundSchema.parse(
      createConnectionPolicyTargetRequest,
    ),
  );
}

export function createConnectionPolicyTargetRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateConnectionPolicyTargetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateConnectionPolicyTargetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateConnectionPolicyTargetRequest' from JSON`,
  );
}

/** @internal */
export const CreateConnectionPolicyTargetResponse$inboundSchema: z.ZodType<
  CreateConnectionPolicyTargetResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result:
    components.VoiceV1ConnectionPolicyConnectionPolicyTarget$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type CreateConnectionPolicyTargetResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.VoiceV1ConnectionPolicyConnectionPolicyTarget$Outbound;
};

/** @internal */
export const CreateConnectionPolicyTargetResponse$outboundSchema: z.ZodType<
  CreateConnectionPolicyTargetResponse$Outbound,
  z.ZodTypeDef,
  CreateConnectionPolicyTargetResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result:
    components.VoiceV1ConnectionPolicyConnectionPolicyTarget$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateConnectionPolicyTargetResponse$ {
  /** @deprecated use `CreateConnectionPolicyTargetResponse$inboundSchema` instead. */
  export const inboundSchema =
    CreateConnectionPolicyTargetResponse$inboundSchema;
  /** @deprecated use `CreateConnectionPolicyTargetResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateConnectionPolicyTargetResponse$outboundSchema;
  /** @deprecated use `CreateConnectionPolicyTargetResponse$Outbound` instead. */
  export type Outbound = CreateConnectionPolicyTargetResponse$Outbound;
}

export function createConnectionPolicyTargetResponseToJSON(
  createConnectionPolicyTargetResponse: CreateConnectionPolicyTargetResponse,
): string {
  return JSON.stringify(
    CreateConnectionPolicyTargetResponse$outboundSchema.parse(
      createConnectionPolicyTargetResponse,
    ),
  );
}

export function createConnectionPolicyTargetResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateConnectionPolicyTargetResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateConnectionPolicyTargetResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateConnectionPolicyTargetResponse' from JSON`,
  );
}
