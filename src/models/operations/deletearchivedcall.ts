/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const DeleteArchivedCallServerList = [
  "https://voice.twilio.com",
] as const;

export type DeleteArchivedCallRequest = {
  /**
   * The date of the Call in UTC.
   */
  date: RFCDate;
  /**
   * The Twilio-provided Call SID that uniquely identifies the Call resource to delete
   */
  sid: string;
};

/** @internal */
export const DeleteArchivedCallRequest$inboundSchema: z.ZodType<
  DeleteArchivedCallRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  Date: z.string().transform(v => new RFCDate(v)),
  Sid: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Date": "date",
    "Sid": "sid",
  });
});

/** @internal */
export type DeleteArchivedCallRequest$Outbound = {
  Date: string;
  Sid: string;
};

/** @internal */
export const DeleteArchivedCallRequest$outboundSchema: z.ZodType<
  DeleteArchivedCallRequest$Outbound,
  z.ZodTypeDef,
  DeleteArchivedCallRequest
> = z.object({
  date: z.instanceof(RFCDate).transform(v => v.toString()),
  sid: z.string(),
}).transform((v) => {
  return remap$(v, {
    date: "Date",
    sid: "Sid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteArchivedCallRequest$ {
  /** @deprecated use `DeleteArchivedCallRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteArchivedCallRequest$inboundSchema;
  /** @deprecated use `DeleteArchivedCallRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteArchivedCallRequest$outboundSchema;
  /** @deprecated use `DeleteArchivedCallRequest$Outbound` instead. */
  export type Outbound = DeleteArchivedCallRequest$Outbound;
}

export function deleteArchivedCallRequestToJSON(
  deleteArchivedCallRequest: DeleteArchivedCallRequest,
): string {
  return JSON.stringify(
    DeleteArchivedCallRequest$outboundSchema.parse(deleteArchivedCallRequest),
  );
}

export function deleteArchivedCallRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteArchivedCallRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteArchivedCallRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteArchivedCallRequest' from JSON`,
  );
}
