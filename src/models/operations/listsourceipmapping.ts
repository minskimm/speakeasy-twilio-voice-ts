/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ListSourceIpMappingServerList = [
  "https://voice.twilio.com",
] as const;

export type ListSourceIpMappingRequest = {
  /**
   * How many resources to return in each list page. The default is 50, and the maximum is 1000.
   */
  pageSize?: number | undefined;
  /**
   * The page index. This value is simply for client state.
   */
  page?: number | undefined;
  /**
   * The page token. This is provided by the API.
   */
  pageToken?: string | undefined;
};

export type ListSourceIpMappingMeta = {
  firstPageUrl?: string | undefined;
  key?: string | undefined;
  nextPageUrl?: string | null | undefined;
  page?: number | undefined;
  pageSize?: number | undefined;
  previousPageUrl?: string | null | undefined;
  url?: string | undefined;
};

/**
 * OK
 */
export type ListSourceIpMappingListSourceIpMappingResponse = {
  sourceIpMappings?: Array<components.VoiceV1SourceIpMapping> | undefined;
  meta?: ListSourceIpMappingMeta | undefined;
};

export type ListSourceIpMappingResponse = {
  headers: { [k: string]: Array<string> };
  result: ListSourceIpMappingListSourceIpMappingResponse;
};

/** @internal */
export const ListSourceIpMappingRequest$inboundSchema: z.ZodType<
  ListSourceIpMappingRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  PageSize: z.number().int().optional(),
  Page: z.number().int().optional(),
  PageToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "PageSize": "pageSize",
    "Page": "page",
    "PageToken": "pageToken",
  });
});

/** @internal */
export type ListSourceIpMappingRequest$Outbound = {
  PageSize?: number | undefined;
  Page?: number | undefined;
  PageToken?: string | undefined;
};

/** @internal */
export const ListSourceIpMappingRequest$outboundSchema: z.ZodType<
  ListSourceIpMappingRequest$Outbound,
  z.ZodTypeDef,
  ListSourceIpMappingRequest
> = z.object({
  pageSize: z.number().int().optional(),
  page: z.number().int().optional(),
  pageToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    pageSize: "PageSize",
    page: "Page",
    pageToken: "PageToken",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSourceIpMappingRequest$ {
  /** @deprecated use `ListSourceIpMappingRequest$inboundSchema` instead. */
  export const inboundSchema = ListSourceIpMappingRequest$inboundSchema;
  /** @deprecated use `ListSourceIpMappingRequest$outboundSchema` instead. */
  export const outboundSchema = ListSourceIpMappingRequest$outboundSchema;
  /** @deprecated use `ListSourceIpMappingRequest$Outbound` instead. */
  export type Outbound = ListSourceIpMappingRequest$Outbound;
}

export function listSourceIpMappingRequestToJSON(
  listSourceIpMappingRequest: ListSourceIpMappingRequest,
): string {
  return JSON.stringify(
    ListSourceIpMappingRequest$outboundSchema.parse(listSourceIpMappingRequest),
  );
}

export function listSourceIpMappingRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListSourceIpMappingRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSourceIpMappingRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSourceIpMappingRequest' from JSON`,
  );
}

/** @internal */
export const ListSourceIpMappingMeta$inboundSchema: z.ZodType<
  ListSourceIpMappingMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  first_page_url: z.string().optional(),
  key: z.string().optional(),
  next_page_url: z.nullable(z.string()).optional(),
  page: z.number().int().optional(),
  page_size: z.number().int().optional(),
  previous_page_url: z.nullable(z.string()).optional(),
  url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "first_page_url": "firstPageUrl",
    "next_page_url": "nextPageUrl",
    "page_size": "pageSize",
    "previous_page_url": "previousPageUrl",
  });
});

/** @internal */
export type ListSourceIpMappingMeta$Outbound = {
  first_page_url?: string | undefined;
  key?: string | undefined;
  next_page_url?: string | null | undefined;
  page?: number | undefined;
  page_size?: number | undefined;
  previous_page_url?: string | null | undefined;
  url?: string | undefined;
};

/** @internal */
export const ListSourceIpMappingMeta$outboundSchema: z.ZodType<
  ListSourceIpMappingMeta$Outbound,
  z.ZodTypeDef,
  ListSourceIpMappingMeta
> = z.object({
  firstPageUrl: z.string().optional(),
  key: z.string().optional(),
  nextPageUrl: z.nullable(z.string()).optional(),
  page: z.number().int().optional(),
  pageSize: z.number().int().optional(),
  previousPageUrl: z.nullable(z.string()).optional(),
  url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    firstPageUrl: "first_page_url",
    nextPageUrl: "next_page_url",
    pageSize: "page_size",
    previousPageUrl: "previous_page_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSourceIpMappingMeta$ {
  /** @deprecated use `ListSourceIpMappingMeta$inboundSchema` instead. */
  export const inboundSchema = ListSourceIpMappingMeta$inboundSchema;
  /** @deprecated use `ListSourceIpMappingMeta$outboundSchema` instead. */
  export const outboundSchema = ListSourceIpMappingMeta$outboundSchema;
  /** @deprecated use `ListSourceIpMappingMeta$Outbound` instead. */
  export type Outbound = ListSourceIpMappingMeta$Outbound;
}

export function listSourceIpMappingMetaToJSON(
  listSourceIpMappingMeta: ListSourceIpMappingMeta,
): string {
  return JSON.stringify(
    ListSourceIpMappingMeta$outboundSchema.parse(listSourceIpMappingMeta),
  );
}

export function listSourceIpMappingMetaFromJSON(
  jsonString: string,
): SafeParseResult<ListSourceIpMappingMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSourceIpMappingMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSourceIpMappingMeta' from JSON`,
  );
}

/** @internal */
export const ListSourceIpMappingListSourceIpMappingResponse$inboundSchema:
  z.ZodType<
    ListSourceIpMappingListSourceIpMappingResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    source_ip_mappings: z.array(components.VoiceV1SourceIpMapping$inboundSchema)
      .optional(),
    meta: z.lazy(() => ListSourceIpMappingMeta$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "source_ip_mappings": "sourceIpMappings",
    });
  });

/** @internal */
export type ListSourceIpMappingListSourceIpMappingResponse$Outbound = {
  source_ip_mappings?:
    | Array<components.VoiceV1SourceIpMapping$Outbound>
    | undefined;
  meta?: ListSourceIpMappingMeta$Outbound | undefined;
};

/** @internal */
export const ListSourceIpMappingListSourceIpMappingResponse$outboundSchema:
  z.ZodType<
    ListSourceIpMappingListSourceIpMappingResponse$Outbound,
    z.ZodTypeDef,
    ListSourceIpMappingListSourceIpMappingResponse
  > = z.object({
    sourceIpMappings: z.array(components.VoiceV1SourceIpMapping$outboundSchema)
      .optional(),
    meta: z.lazy(() => ListSourceIpMappingMeta$outboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      sourceIpMappings: "source_ip_mappings",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSourceIpMappingListSourceIpMappingResponse$ {
  /** @deprecated use `ListSourceIpMappingListSourceIpMappingResponse$inboundSchema` instead. */
  export const inboundSchema =
    ListSourceIpMappingListSourceIpMappingResponse$inboundSchema;
  /** @deprecated use `ListSourceIpMappingListSourceIpMappingResponse$outboundSchema` instead. */
  export const outboundSchema =
    ListSourceIpMappingListSourceIpMappingResponse$outboundSchema;
  /** @deprecated use `ListSourceIpMappingListSourceIpMappingResponse$Outbound` instead. */
  export type Outbound =
    ListSourceIpMappingListSourceIpMappingResponse$Outbound;
}

export function listSourceIpMappingListSourceIpMappingResponseToJSON(
  listSourceIpMappingListSourceIpMappingResponse:
    ListSourceIpMappingListSourceIpMappingResponse,
): string {
  return JSON.stringify(
    ListSourceIpMappingListSourceIpMappingResponse$outboundSchema.parse(
      listSourceIpMappingListSourceIpMappingResponse,
    ),
  );
}

export function listSourceIpMappingListSourceIpMappingResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  ListSourceIpMappingListSourceIpMappingResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListSourceIpMappingListSourceIpMappingResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListSourceIpMappingListSourceIpMappingResponse' from JSON`,
  );
}

/** @internal */
export const ListSourceIpMappingResponse$inboundSchema: z.ZodType<
  ListSourceIpMappingResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.lazy(() =>
    ListSourceIpMappingListSourceIpMappingResponse$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ListSourceIpMappingResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: ListSourceIpMappingListSourceIpMappingResponse$Outbound;
};

/** @internal */
export const ListSourceIpMappingResponse$outboundSchema: z.ZodType<
  ListSourceIpMappingResponse$Outbound,
  z.ZodTypeDef,
  ListSourceIpMappingResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.lazy(() =>
    ListSourceIpMappingListSourceIpMappingResponse$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSourceIpMappingResponse$ {
  /** @deprecated use `ListSourceIpMappingResponse$inboundSchema` instead. */
  export const inboundSchema = ListSourceIpMappingResponse$inboundSchema;
  /** @deprecated use `ListSourceIpMappingResponse$outboundSchema` instead. */
  export const outboundSchema = ListSourceIpMappingResponse$outboundSchema;
  /** @deprecated use `ListSourceIpMappingResponse$Outbound` instead. */
  export type Outbound = ListSourceIpMappingResponse$Outbound;
}

export function listSourceIpMappingResponseToJSON(
  listSourceIpMappingResponse: ListSourceIpMappingResponse,
): string {
  return JSON.stringify(
    ListSourceIpMappingResponse$outboundSchema.parse(
      listSourceIpMappingResponse,
    ),
  );
}

export function listSourceIpMappingResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListSourceIpMappingResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSourceIpMappingResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSourceIpMappingResponse' from JSON`,
  );
}
