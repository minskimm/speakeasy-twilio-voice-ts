/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const FetchDialingPermissionsCountryServerList = [
  "https://voice.twilio.com",
] as const;

export type FetchDialingPermissionsCountryRequest = {
  /**
   * The [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the DialingPermissions Country resource to fetch
   */
  isoCode: string;
};

export type FetchDialingPermissionsCountryResponse = {
  headers: { [k: string]: Array<string> };
  result: components.VoiceV1DialingPermissionsDialingPermissionsCountryInstance;
};

/** @internal */
export const FetchDialingPermissionsCountryRequest$inboundSchema: z.ZodType<
  FetchDialingPermissionsCountryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  IsoCode: z.string(),
}).transform((v) => {
  return remap$(v, {
    "IsoCode": "isoCode",
  });
});

/** @internal */
export type FetchDialingPermissionsCountryRequest$Outbound = {
  IsoCode: string;
};

/** @internal */
export const FetchDialingPermissionsCountryRequest$outboundSchema: z.ZodType<
  FetchDialingPermissionsCountryRequest$Outbound,
  z.ZodTypeDef,
  FetchDialingPermissionsCountryRequest
> = z.object({
  isoCode: z.string(),
}).transform((v) => {
  return remap$(v, {
    isoCode: "IsoCode",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FetchDialingPermissionsCountryRequest$ {
  /** @deprecated use `FetchDialingPermissionsCountryRequest$inboundSchema` instead. */
  export const inboundSchema =
    FetchDialingPermissionsCountryRequest$inboundSchema;
  /** @deprecated use `FetchDialingPermissionsCountryRequest$outboundSchema` instead. */
  export const outboundSchema =
    FetchDialingPermissionsCountryRequest$outboundSchema;
  /** @deprecated use `FetchDialingPermissionsCountryRequest$Outbound` instead. */
  export type Outbound = FetchDialingPermissionsCountryRequest$Outbound;
}

export function fetchDialingPermissionsCountryRequestToJSON(
  fetchDialingPermissionsCountryRequest: FetchDialingPermissionsCountryRequest,
): string {
  return JSON.stringify(
    FetchDialingPermissionsCountryRequest$outboundSchema.parse(
      fetchDialingPermissionsCountryRequest,
    ),
  );
}

export function fetchDialingPermissionsCountryRequestFromJSON(
  jsonString: string,
): SafeParseResult<FetchDialingPermissionsCountryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FetchDialingPermissionsCountryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FetchDialingPermissionsCountryRequest' from JSON`,
  );
}

/** @internal */
export const FetchDialingPermissionsCountryResponse$inboundSchema: z.ZodType<
  FetchDialingPermissionsCountryResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result:
    components
      .VoiceV1DialingPermissionsDialingPermissionsCountryInstance$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type FetchDialingPermissionsCountryResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result:
    components.VoiceV1DialingPermissionsDialingPermissionsCountryInstance$Outbound;
};

/** @internal */
export const FetchDialingPermissionsCountryResponse$outboundSchema: z.ZodType<
  FetchDialingPermissionsCountryResponse$Outbound,
  z.ZodTypeDef,
  FetchDialingPermissionsCountryResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result:
    components
      .VoiceV1DialingPermissionsDialingPermissionsCountryInstance$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FetchDialingPermissionsCountryResponse$ {
  /** @deprecated use `FetchDialingPermissionsCountryResponse$inboundSchema` instead. */
  export const inboundSchema =
    FetchDialingPermissionsCountryResponse$inboundSchema;
  /** @deprecated use `FetchDialingPermissionsCountryResponse$outboundSchema` instead. */
  export const outboundSchema =
    FetchDialingPermissionsCountryResponse$outboundSchema;
  /** @deprecated use `FetchDialingPermissionsCountryResponse$Outbound` instead. */
  export type Outbound = FetchDialingPermissionsCountryResponse$Outbound;
}

export function fetchDialingPermissionsCountryResponseToJSON(
  fetchDialingPermissionsCountryResponse:
    FetchDialingPermissionsCountryResponse,
): string {
  return JSON.stringify(
    FetchDialingPermissionsCountryResponse$outboundSchema.parse(
      fetchDialingPermissionsCountryResponse,
    ),
  );
}

export function fetchDialingPermissionsCountryResponseFromJSON(
  jsonString: string,
): SafeParseResult<FetchDialingPermissionsCountryResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FetchDialingPermissionsCountryResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FetchDialingPermissionsCountryResponse' from JSON`,
  );
}
