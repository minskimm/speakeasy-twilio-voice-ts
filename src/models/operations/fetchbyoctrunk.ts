/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const FetchByocTrunkServerList = [
  "https://voice.twilio.com",
] as const;

export type FetchByocTrunkRequest = {
  /**
   * The Twilio-provided string that uniquely identifies the BYOC Trunk resource to fetch.
   */
  sid: string;
};

export type FetchByocTrunkResponse = {
  headers: { [k: string]: Array<string> };
  result: components.VoiceV1ByocTrunk;
};

/** @internal */
export const FetchByocTrunkRequest$inboundSchema: z.ZodType<
  FetchByocTrunkRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  Sid: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Sid": "sid",
  });
});

/** @internal */
export type FetchByocTrunkRequest$Outbound = {
  Sid: string;
};

/** @internal */
export const FetchByocTrunkRequest$outboundSchema: z.ZodType<
  FetchByocTrunkRequest$Outbound,
  z.ZodTypeDef,
  FetchByocTrunkRequest
> = z.object({
  sid: z.string(),
}).transform((v) => {
  return remap$(v, {
    sid: "Sid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FetchByocTrunkRequest$ {
  /** @deprecated use `FetchByocTrunkRequest$inboundSchema` instead. */
  export const inboundSchema = FetchByocTrunkRequest$inboundSchema;
  /** @deprecated use `FetchByocTrunkRequest$outboundSchema` instead. */
  export const outboundSchema = FetchByocTrunkRequest$outboundSchema;
  /** @deprecated use `FetchByocTrunkRequest$Outbound` instead. */
  export type Outbound = FetchByocTrunkRequest$Outbound;
}

export function fetchByocTrunkRequestToJSON(
  fetchByocTrunkRequest: FetchByocTrunkRequest,
): string {
  return JSON.stringify(
    FetchByocTrunkRequest$outboundSchema.parse(fetchByocTrunkRequest),
  );
}

export function fetchByocTrunkRequestFromJSON(
  jsonString: string,
): SafeParseResult<FetchByocTrunkRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FetchByocTrunkRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FetchByocTrunkRequest' from JSON`,
  );
}

/** @internal */
export const FetchByocTrunkResponse$inboundSchema: z.ZodType<
  FetchByocTrunkResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.VoiceV1ByocTrunk$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type FetchByocTrunkResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.VoiceV1ByocTrunk$Outbound;
};

/** @internal */
export const FetchByocTrunkResponse$outboundSchema: z.ZodType<
  FetchByocTrunkResponse$Outbound,
  z.ZodTypeDef,
  FetchByocTrunkResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.VoiceV1ByocTrunk$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FetchByocTrunkResponse$ {
  /** @deprecated use `FetchByocTrunkResponse$inboundSchema` instead. */
  export const inboundSchema = FetchByocTrunkResponse$inboundSchema;
  /** @deprecated use `FetchByocTrunkResponse$outboundSchema` instead. */
  export const outboundSchema = FetchByocTrunkResponse$outboundSchema;
  /** @deprecated use `FetchByocTrunkResponse$Outbound` instead. */
  export type Outbound = FetchByocTrunkResponse$Outbound;
}

export function fetchByocTrunkResponseToJSON(
  fetchByocTrunkResponse: FetchByocTrunkResponse,
): string {
  return JSON.stringify(
    FetchByocTrunkResponse$outboundSchema.parse(fetchByocTrunkResponse),
  );
}

export function fetchByocTrunkResponseFromJSON(
  jsonString: string,
): SafeParseResult<FetchByocTrunkResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FetchByocTrunkResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FetchByocTrunkResponse' from JSON`,
  );
}
