/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CreateIpRecordServerList = [
  "https://voice.twilio.com",
] as const;

export type CreateIpRecordCreateIpRecordRequest = {
  /**
   * An IP address in dotted decimal notation, IPv4 only.
   */
  ipAddress: string;
  /**
   * A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long.
   */
  friendlyName?: string | undefined;
  /**
   * An integer representing the length of the [CIDR](https://tools.ietf.org/html/rfc4632) prefix to use with this IP address. By default the entire IP address is used, which for IPv4 is value 32.
   */
  cidrPrefixLength?: number | undefined;
};

export type CreateIpRecordResponse = {
  headers: { [k: string]: Array<string> };
  result: components.VoiceV1IpRecord;
};

/** @internal */
export const CreateIpRecordCreateIpRecordRequest$inboundSchema: z.ZodType<
  CreateIpRecordCreateIpRecordRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  IpAddress: z.string(),
  FriendlyName: z.string().optional(),
  CidrPrefixLength: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "IpAddress": "ipAddress",
    "FriendlyName": "friendlyName",
    "CidrPrefixLength": "cidrPrefixLength",
  });
});

/** @internal */
export type CreateIpRecordCreateIpRecordRequest$Outbound = {
  IpAddress: string;
  FriendlyName?: string | undefined;
  CidrPrefixLength?: number | undefined;
};

/** @internal */
export const CreateIpRecordCreateIpRecordRequest$outboundSchema: z.ZodType<
  CreateIpRecordCreateIpRecordRequest$Outbound,
  z.ZodTypeDef,
  CreateIpRecordCreateIpRecordRequest
> = z.object({
  ipAddress: z.string(),
  friendlyName: z.string().optional(),
  cidrPrefixLength: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    ipAddress: "IpAddress",
    friendlyName: "FriendlyName",
    cidrPrefixLength: "CidrPrefixLength",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateIpRecordCreateIpRecordRequest$ {
  /** @deprecated use `CreateIpRecordCreateIpRecordRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateIpRecordCreateIpRecordRequest$inboundSchema;
  /** @deprecated use `CreateIpRecordCreateIpRecordRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateIpRecordCreateIpRecordRequest$outboundSchema;
  /** @deprecated use `CreateIpRecordCreateIpRecordRequest$Outbound` instead. */
  export type Outbound = CreateIpRecordCreateIpRecordRequest$Outbound;
}

export function createIpRecordCreateIpRecordRequestToJSON(
  createIpRecordCreateIpRecordRequest: CreateIpRecordCreateIpRecordRequest,
): string {
  return JSON.stringify(
    CreateIpRecordCreateIpRecordRequest$outboundSchema.parse(
      createIpRecordCreateIpRecordRequest,
    ),
  );
}

export function createIpRecordCreateIpRecordRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateIpRecordCreateIpRecordRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateIpRecordCreateIpRecordRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateIpRecordCreateIpRecordRequest' from JSON`,
  );
}

/** @internal */
export const CreateIpRecordResponse$inboundSchema: z.ZodType<
  CreateIpRecordResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.VoiceV1IpRecord$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type CreateIpRecordResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.VoiceV1IpRecord$Outbound;
};

/** @internal */
export const CreateIpRecordResponse$outboundSchema: z.ZodType<
  CreateIpRecordResponse$Outbound,
  z.ZodTypeDef,
  CreateIpRecordResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.VoiceV1IpRecord$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateIpRecordResponse$ {
  /** @deprecated use `CreateIpRecordResponse$inboundSchema` instead. */
  export const inboundSchema = CreateIpRecordResponse$inboundSchema;
  /** @deprecated use `CreateIpRecordResponse$outboundSchema` instead. */
  export const outboundSchema = CreateIpRecordResponse$outboundSchema;
  /** @deprecated use `CreateIpRecordResponse$Outbound` instead. */
  export type Outbound = CreateIpRecordResponse$Outbound;
}

export function createIpRecordResponseToJSON(
  createIpRecordResponse: CreateIpRecordResponse,
): string {
  return JSON.stringify(
    CreateIpRecordResponse$outboundSchema.parse(createIpRecordResponse),
  );
}

export function createIpRecordResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateIpRecordResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateIpRecordResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateIpRecordResponse' from JSON`,
  );
}
