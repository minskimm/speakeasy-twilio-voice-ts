/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const FetchConnectionPolicyServerList = [
  "https://voice.twilio.com",
] as const;

export type FetchConnectionPolicyRequest = {
  /**
   * The unique string that we created to identify the Connection Policy resource to fetch.
   */
  sid: string;
};

export type FetchConnectionPolicyResponse = {
  headers: { [k: string]: Array<string> };
  result: components.VoiceV1ConnectionPolicy;
};

/** @internal */
export const FetchConnectionPolicyRequest$inboundSchema: z.ZodType<
  FetchConnectionPolicyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  Sid: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Sid": "sid",
  });
});

/** @internal */
export type FetchConnectionPolicyRequest$Outbound = {
  Sid: string;
};

/** @internal */
export const FetchConnectionPolicyRequest$outboundSchema: z.ZodType<
  FetchConnectionPolicyRequest$Outbound,
  z.ZodTypeDef,
  FetchConnectionPolicyRequest
> = z.object({
  sid: z.string(),
}).transform((v) => {
  return remap$(v, {
    sid: "Sid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FetchConnectionPolicyRequest$ {
  /** @deprecated use `FetchConnectionPolicyRequest$inboundSchema` instead. */
  export const inboundSchema = FetchConnectionPolicyRequest$inboundSchema;
  /** @deprecated use `FetchConnectionPolicyRequest$outboundSchema` instead. */
  export const outboundSchema = FetchConnectionPolicyRequest$outboundSchema;
  /** @deprecated use `FetchConnectionPolicyRequest$Outbound` instead. */
  export type Outbound = FetchConnectionPolicyRequest$Outbound;
}

export function fetchConnectionPolicyRequestToJSON(
  fetchConnectionPolicyRequest: FetchConnectionPolicyRequest,
): string {
  return JSON.stringify(
    FetchConnectionPolicyRequest$outboundSchema.parse(
      fetchConnectionPolicyRequest,
    ),
  );
}

export function fetchConnectionPolicyRequestFromJSON(
  jsonString: string,
): SafeParseResult<FetchConnectionPolicyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FetchConnectionPolicyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FetchConnectionPolicyRequest' from JSON`,
  );
}

/** @internal */
export const FetchConnectionPolicyResponse$inboundSchema: z.ZodType<
  FetchConnectionPolicyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.VoiceV1ConnectionPolicy$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type FetchConnectionPolicyResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.VoiceV1ConnectionPolicy$Outbound;
};

/** @internal */
export const FetchConnectionPolicyResponse$outboundSchema: z.ZodType<
  FetchConnectionPolicyResponse$Outbound,
  z.ZodTypeDef,
  FetchConnectionPolicyResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.VoiceV1ConnectionPolicy$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FetchConnectionPolicyResponse$ {
  /** @deprecated use `FetchConnectionPolicyResponse$inboundSchema` instead. */
  export const inboundSchema = FetchConnectionPolicyResponse$inboundSchema;
  /** @deprecated use `FetchConnectionPolicyResponse$outboundSchema` instead. */
  export const outboundSchema = FetchConnectionPolicyResponse$outboundSchema;
  /** @deprecated use `FetchConnectionPolicyResponse$Outbound` instead. */
  export type Outbound = FetchConnectionPolicyResponse$Outbound;
}

export function fetchConnectionPolicyResponseToJSON(
  fetchConnectionPolicyResponse: FetchConnectionPolicyResponse,
): string {
  return JSON.stringify(
    FetchConnectionPolicyResponse$outboundSchema.parse(
      fetchConnectionPolicyResponse,
    ),
  );
}

export function fetchConnectionPolicyResponseFromJSON(
  jsonString: string,
): SafeParseResult<FetchConnectionPolicyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FetchConnectionPolicyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FetchConnectionPolicyResponse' from JSON`,
  );
}
