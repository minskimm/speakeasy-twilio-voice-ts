/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const DeleteConnectionPolicyTargetServerList = [
  "https://voice.twilio.com",
] as const;

export type DeleteConnectionPolicyTargetRequest = {
  /**
   * The SID of the Connection Policy that owns the Target.
   */
  connectionPolicySid: string;
  /**
   * The unique string that we created to identify the Target resource to delete.
   */
  sid: string;
};

/** @internal */
export const DeleteConnectionPolicyTargetRequest$inboundSchema: z.ZodType<
  DeleteConnectionPolicyTargetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ConnectionPolicySid: z.string(),
  Sid: z.string(),
}).transform((v) => {
  return remap$(v, {
    "ConnectionPolicySid": "connectionPolicySid",
    "Sid": "sid",
  });
});

/** @internal */
export type DeleteConnectionPolicyTargetRequest$Outbound = {
  ConnectionPolicySid: string;
  Sid: string;
};

/** @internal */
export const DeleteConnectionPolicyTargetRequest$outboundSchema: z.ZodType<
  DeleteConnectionPolicyTargetRequest$Outbound,
  z.ZodTypeDef,
  DeleteConnectionPolicyTargetRequest
> = z.object({
  connectionPolicySid: z.string(),
  sid: z.string(),
}).transform((v) => {
  return remap$(v, {
    connectionPolicySid: "ConnectionPolicySid",
    sid: "Sid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteConnectionPolicyTargetRequest$ {
  /** @deprecated use `DeleteConnectionPolicyTargetRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeleteConnectionPolicyTargetRequest$inboundSchema;
  /** @deprecated use `DeleteConnectionPolicyTargetRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteConnectionPolicyTargetRequest$outboundSchema;
  /** @deprecated use `DeleteConnectionPolicyTargetRequest$Outbound` instead. */
  export type Outbound = DeleteConnectionPolicyTargetRequest$Outbound;
}

export function deleteConnectionPolicyTargetRequestToJSON(
  deleteConnectionPolicyTargetRequest: DeleteConnectionPolicyTargetRequest,
): string {
  return JSON.stringify(
    DeleteConnectionPolicyTargetRequest$outboundSchema.parse(
      deleteConnectionPolicyTargetRequest,
    ),
  );
}

export function deleteConnectionPolicyTargetRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteConnectionPolicyTargetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteConnectionPolicyTargetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteConnectionPolicyTargetRequest' from JSON`,
  );
}
