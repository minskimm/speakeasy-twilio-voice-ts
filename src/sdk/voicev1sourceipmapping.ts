/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { voiceV1SourceIpMappingCreateSourceIpMapping } from "../funcs/voiceV1SourceIpMappingCreateSourceIpMapping.js";
import { voiceV1SourceIpMappingDeleteSourceIpMapping } from "../funcs/voiceV1SourceIpMappingDeleteSourceIpMapping.js";
import { voiceV1SourceIpMappingFetchSourceIpMapping } from "../funcs/voiceV1SourceIpMappingFetchSourceIpMapping.js";
import { voiceV1SourceIpMappingListSourceIpMapping } from "../funcs/voiceV1SourceIpMappingListSourceIpMapping.js";
import { voiceV1SourceIpMappingUpdateSourceIpMapping } from "../funcs/voiceV1SourceIpMappingUpdateSourceIpMapping.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class VoiceV1SourceIpMapping extends ClientSDK {
  async createSourceIpMapping(
    request?:
      | operations.CreateSourceIpMappingCreateSourceIpMappingRequest
      | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateSourceIpMappingResponse> {
    return unwrapAsync(voiceV1SourceIpMappingCreateSourceIpMapping(
      this,
      request,
      options,
    ));
  }

  async listSourceIpMapping(
    request: operations.ListSourceIpMappingRequest,
    options?: RequestOptions,
  ): Promise<operations.ListSourceIpMappingResponse> {
    return unwrapAsync(voiceV1SourceIpMappingListSourceIpMapping(
      this,
      request,
      options,
    ));
  }

  async fetchSourceIpMapping(
    request: operations.FetchSourceIpMappingRequest,
    options?: RequestOptions,
  ): Promise<operations.FetchSourceIpMappingResponse> {
    return unwrapAsync(voiceV1SourceIpMappingFetchSourceIpMapping(
      this,
      request,
      options,
    ));
  }

  async updateSourceIpMapping(
    request: operations.UpdateSourceIpMappingRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateSourceIpMappingResponse> {
    return unwrapAsync(voiceV1SourceIpMappingUpdateSourceIpMapping(
      this,
      request,
      options,
    ));
  }

  async deleteSourceIpMapping(
    request: operations.DeleteSourceIpMappingRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(voiceV1SourceIpMappingDeleteSourceIpMapping(
      this,
      request,
      options,
    ));
  }
}
