/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { voiceV1ConnectionPolicyTargetCreateConnectionPolicyTarget } from "../funcs/voiceV1ConnectionPolicyTargetCreateConnectionPolicyTarget.js";
import { voiceV1ConnectionPolicyTargetDeleteConnectionPolicyTarget } from "../funcs/voiceV1ConnectionPolicyTargetDeleteConnectionPolicyTarget.js";
import { voiceV1ConnectionPolicyTargetFetchConnectionPolicyTarget } from "../funcs/voiceV1ConnectionPolicyTargetFetchConnectionPolicyTarget.js";
import { voiceV1ConnectionPolicyTargetListConnectionPolicyTarget } from "../funcs/voiceV1ConnectionPolicyTargetListConnectionPolicyTarget.js";
import { voiceV1ConnectionPolicyTargetUpdateConnectionPolicyTarget } from "../funcs/voiceV1ConnectionPolicyTargetUpdateConnectionPolicyTarget.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class VoiceV1ConnectionPolicyTarget extends ClientSDK {
  async createConnectionPolicyTarget(
    request: operations.CreateConnectionPolicyTargetRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateConnectionPolicyTargetResponse> {
    return unwrapAsync(
      voiceV1ConnectionPolicyTargetCreateConnectionPolicyTarget(
        this,
        request,
        options,
      ),
    );
  }

  async listConnectionPolicyTarget(
    request: operations.ListConnectionPolicyTargetRequest,
    options?: RequestOptions,
  ): Promise<operations.ListConnectionPolicyTargetResponse> {
    return unwrapAsync(voiceV1ConnectionPolicyTargetListConnectionPolicyTarget(
      this,
      request,
      options,
    ));
  }

  async fetchConnectionPolicyTarget(
    request: operations.FetchConnectionPolicyTargetRequest,
    options?: RequestOptions,
  ): Promise<operations.FetchConnectionPolicyTargetResponse> {
    return unwrapAsync(voiceV1ConnectionPolicyTargetFetchConnectionPolicyTarget(
      this,
      request,
      options,
    ));
  }

  async updateConnectionPolicyTarget(
    request: operations.UpdateConnectionPolicyTargetRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateConnectionPolicyTargetResponse> {
    return unwrapAsync(
      voiceV1ConnectionPolicyTargetUpdateConnectionPolicyTarget(
        this,
        request,
        options,
      ),
    );
  }

  async deleteConnectionPolicyTarget(
    request: operations.DeleteConnectionPolicyTargetRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(
      voiceV1ConnectionPolicyTargetDeleteConnectionPolicyTarget(
        this,
        request,
        options,
      ),
    );
  }
}
