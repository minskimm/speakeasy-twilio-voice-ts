/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const VoiceV1SourceIpMapping$inboundSchema = z.object({
    sid: z.nullable(z.string()).optional(),
    ip_record_sid: z.nullable(z.string()).optional(),
    sip_domain_sid: z.nullable(z.string()).optional(),
    date_created: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    date_updated: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    url: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        "ip_record_sid": "ipRecordSid",
        "sip_domain_sid": "sipDomainSid",
        "date_created": "dateCreated",
        "date_updated": "dateUpdated",
    });
});
/** @internal */
export const VoiceV1SourceIpMapping$outboundSchema = z.object({
    sid: z.nullable(z.string()).optional(),
    ipRecordSid: z.nullable(z.string()).optional(),
    sipDomainSid: z.nullable(z.string()).optional(),
    dateCreated: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    dateUpdated: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    url: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        ipRecordSid: "ip_record_sid",
        sipDomainSid: "sip_domain_sid",
        dateCreated: "date_created",
        dateUpdated: "date_updated",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var VoiceV1SourceIpMapping$;
(function (VoiceV1SourceIpMapping$) {
    /** @deprecated use `VoiceV1SourceIpMapping$inboundSchema` instead. */
    VoiceV1SourceIpMapping$.inboundSchema = VoiceV1SourceIpMapping$inboundSchema;
    /** @deprecated use `VoiceV1SourceIpMapping$outboundSchema` instead. */
    VoiceV1SourceIpMapping$.outboundSchema = VoiceV1SourceIpMapping$outboundSchema;
})(VoiceV1SourceIpMapping$ || (VoiceV1SourceIpMapping$ = {}));
export function voiceV1SourceIpMappingToJSON(voiceV1SourceIpMapping) {
    return JSON.stringify(VoiceV1SourceIpMapping$outboundSchema.parse(voiceV1SourceIpMapping));
}
export function voiceV1SourceIpMappingFromJSON(jsonString) {
    return safeParse(jsonString, (x) => VoiceV1SourceIpMapping$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'VoiceV1SourceIpMapping' from JSON`);
}
//# sourceMappingURL=voicev1sourceipmapping.js.map