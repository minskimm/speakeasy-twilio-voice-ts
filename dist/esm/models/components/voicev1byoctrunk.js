/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * The HTTP method we use to call `voice_url`. Can be: `GET` or `POST`.
 */
export const VoiceMethod = {
    Get: "GET",
    Post: "POST",
};
/**
 * The HTTP method we use to call `voice_fallback_url`. Can be: `GET` or `POST`.
 */
export const VoiceFallbackMethod = {
    Get: "GET",
    Post: "POST",
};
/**
 * The HTTP method we use to call `status_callback_url`. Either `GET` or `POST`.
 */
export const StatusCallbackMethod = {
    Get: "GET",
    Post: "POST",
};
/** @internal */
export const VoiceMethod$inboundSchema = z
    .nativeEnum(VoiceMethod);
/** @internal */
export const VoiceMethod$outboundSchema = VoiceMethod$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var VoiceMethod$;
(function (VoiceMethod$) {
    /** @deprecated use `VoiceMethod$inboundSchema` instead. */
    VoiceMethod$.inboundSchema = VoiceMethod$inboundSchema;
    /** @deprecated use `VoiceMethod$outboundSchema` instead. */
    VoiceMethod$.outboundSchema = VoiceMethod$outboundSchema;
})(VoiceMethod$ || (VoiceMethod$ = {}));
/** @internal */
export const VoiceFallbackMethod$inboundSchema = z.nativeEnum(VoiceFallbackMethod);
/** @internal */
export const VoiceFallbackMethod$outboundSchema = VoiceFallbackMethod$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var VoiceFallbackMethod$;
(function (VoiceFallbackMethod$) {
    /** @deprecated use `VoiceFallbackMethod$inboundSchema` instead. */
    VoiceFallbackMethod$.inboundSchema = VoiceFallbackMethod$inboundSchema;
    /** @deprecated use `VoiceFallbackMethod$outboundSchema` instead. */
    VoiceFallbackMethod$.outboundSchema = VoiceFallbackMethod$outboundSchema;
})(VoiceFallbackMethod$ || (VoiceFallbackMethod$ = {}));
/** @internal */
export const StatusCallbackMethod$inboundSchema = z.nativeEnum(StatusCallbackMethod);
/** @internal */
export const StatusCallbackMethod$outboundSchema = StatusCallbackMethod$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var StatusCallbackMethod$;
(function (StatusCallbackMethod$) {
    /** @deprecated use `StatusCallbackMethod$inboundSchema` instead. */
    StatusCallbackMethod$.inboundSchema = StatusCallbackMethod$inboundSchema;
    /** @deprecated use `StatusCallbackMethod$outboundSchema` instead. */
    StatusCallbackMethod$.outboundSchema = StatusCallbackMethod$outboundSchema;
})(StatusCallbackMethod$ || (StatusCallbackMethod$ = {}));
/** @internal */
export const VoiceV1ByocTrunk$inboundSchema = z.object({
    account_sid: z.nullable(z.string()).optional(),
    sid: z.nullable(z.string()).optional(),
    friendly_name: z.nullable(z.string()).optional(),
    voice_url: z.nullable(z.string()).optional(),
    voice_method: z.nullable(VoiceMethod$inboundSchema).optional(),
    voice_fallback_url: z.nullable(z.string()).optional(),
    voice_fallback_method: z.nullable(VoiceFallbackMethod$inboundSchema)
        .optional(),
    status_callback_url: z.nullable(z.string()).optional(),
    status_callback_method: z.nullable(StatusCallbackMethod$inboundSchema)
        .optional(),
    cnam_lookup_enabled: z.nullable(z.boolean()).optional(),
    connection_policy_sid: z.nullable(z.string()).optional(),
    from_domain_sid: z.nullable(z.string()).optional(),
    date_created: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    date_updated: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    url: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        "account_sid": "accountSid",
        "friendly_name": "friendlyName",
        "voice_url": "voiceUrl",
        "voice_method": "voiceMethod",
        "voice_fallback_url": "voiceFallbackUrl",
        "voice_fallback_method": "voiceFallbackMethod",
        "status_callback_url": "statusCallbackUrl",
        "status_callback_method": "statusCallbackMethod",
        "cnam_lookup_enabled": "cnamLookupEnabled",
        "connection_policy_sid": "connectionPolicySid",
        "from_domain_sid": "fromDomainSid",
        "date_created": "dateCreated",
        "date_updated": "dateUpdated",
    });
});
/** @internal */
export const VoiceV1ByocTrunk$outboundSchema = z.object({
    accountSid: z.nullable(z.string()).optional(),
    sid: z.nullable(z.string()).optional(),
    friendlyName: z.nullable(z.string()).optional(),
    voiceUrl: z.nullable(z.string()).optional(),
    voiceMethod: z.nullable(VoiceMethod$outboundSchema).optional(),
    voiceFallbackUrl: z.nullable(z.string()).optional(),
    voiceFallbackMethod: z.nullable(VoiceFallbackMethod$outboundSchema)
        .optional(),
    statusCallbackUrl: z.nullable(z.string()).optional(),
    statusCallbackMethod: z.nullable(StatusCallbackMethod$outboundSchema)
        .optional(),
    cnamLookupEnabled: z.nullable(z.boolean()).optional(),
    connectionPolicySid: z.nullable(z.string()).optional(),
    fromDomainSid: z.nullable(z.string()).optional(),
    dateCreated: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    dateUpdated: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    url: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        accountSid: "account_sid",
        friendlyName: "friendly_name",
        voiceUrl: "voice_url",
        voiceMethod: "voice_method",
        voiceFallbackUrl: "voice_fallback_url",
        voiceFallbackMethod: "voice_fallback_method",
        statusCallbackUrl: "status_callback_url",
        statusCallbackMethod: "status_callback_method",
        cnamLookupEnabled: "cnam_lookup_enabled",
        connectionPolicySid: "connection_policy_sid",
        fromDomainSid: "from_domain_sid",
        dateCreated: "date_created",
        dateUpdated: "date_updated",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var VoiceV1ByocTrunk$;
(function (VoiceV1ByocTrunk$) {
    /** @deprecated use `VoiceV1ByocTrunk$inboundSchema` instead. */
    VoiceV1ByocTrunk$.inboundSchema = VoiceV1ByocTrunk$inboundSchema;
    /** @deprecated use `VoiceV1ByocTrunk$outboundSchema` instead. */
    VoiceV1ByocTrunk$.outboundSchema = VoiceV1ByocTrunk$outboundSchema;
})(VoiceV1ByocTrunk$ || (VoiceV1ByocTrunk$ = {}));
export function voiceV1ByocTrunkToJSON(voiceV1ByocTrunk) {
    return JSON.stringify(VoiceV1ByocTrunk$outboundSchema.parse(voiceV1ByocTrunk));
}
export function voiceV1ByocTrunkFromJSON(jsonString) {
    return safeParse(jsonString, (x) => VoiceV1ByocTrunk$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'VoiceV1ByocTrunk' from JSON`);
}
//# sourceMappingURL=voicev1byoctrunk.js.map