/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const Links$inboundSchema = z
    .object({});
/** @internal */
export const Links$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Links$;
(function (Links$) {
    /** @deprecated use `Links$inboundSchema` instead. */
    Links$.inboundSchema = Links$inboundSchema;
    /** @deprecated use `Links$outboundSchema` instead. */
    Links$.outboundSchema = Links$outboundSchema;
})(Links$ || (Links$ = {}));
export function linksToJSON(links) {
    return JSON.stringify(Links$outboundSchema.parse(links));
}
export function linksFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Links$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Links' from JSON`);
}
/** @internal */
export const VoiceV1ConnectionPolicy$inboundSchema = z.object({
    account_sid: z.nullable(z.string()).optional(),
    sid: z.nullable(z.string()).optional(),
    friendly_name: z.nullable(z.string()).optional(),
    date_created: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    date_updated: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    url: z.nullable(z.string()).optional(),
    links: z.nullable(z.lazy(() => Links$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "account_sid": "accountSid",
        "friendly_name": "friendlyName",
        "date_created": "dateCreated",
        "date_updated": "dateUpdated",
    });
});
/** @internal */
export const VoiceV1ConnectionPolicy$outboundSchema = z.object({
    accountSid: z.nullable(z.string()).optional(),
    sid: z.nullable(z.string()).optional(),
    friendlyName: z.nullable(z.string()).optional(),
    dateCreated: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    dateUpdated: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    url: z.nullable(z.string()).optional(),
    links: z.nullable(z.lazy(() => Links$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        accountSid: "account_sid",
        friendlyName: "friendly_name",
        dateCreated: "date_created",
        dateUpdated: "date_updated",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var VoiceV1ConnectionPolicy$;
(function (VoiceV1ConnectionPolicy$) {
    /** @deprecated use `VoiceV1ConnectionPolicy$inboundSchema` instead. */
    VoiceV1ConnectionPolicy$.inboundSchema = VoiceV1ConnectionPolicy$inboundSchema;
    /** @deprecated use `VoiceV1ConnectionPolicy$outboundSchema` instead. */
    VoiceV1ConnectionPolicy$.outboundSchema = VoiceV1ConnectionPolicy$outboundSchema;
})(VoiceV1ConnectionPolicy$ || (VoiceV1ConnectionPolicy$ = {}));
export function voiceV1ConnectionPolicyToJSON(voiceV1ConnectionPolicy) {
    return JSON.stringify(VoiceV1ConnectionPolicy$outboundSchema.parse(voiceV1ConnectionPolicy));
}
export function voiceV1ConnectionPolicyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => VoiceV1ConnectionPolicy$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'VoiceV1ConnectionPolicy' from JSON`);
}
//# sourceMappingURL=voicev1connectionpolicy.js.map