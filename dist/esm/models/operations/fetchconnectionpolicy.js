/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
export const FetchConnectionPolicyServerList = [
    "https://voice.twilio.com",
];
/** @internal */
export const FetchConnectionPolicyRequest$inboundSchema = z.object({
    Sid: z.string(),
}).transform((v) => {
    return remap$(v, {
        "Sid": "sid",
    });
});
/** @internal */
export const FetchConnectionPolicyRequest$outboundSchema = z.object({
    sid: z.string(),
}).transform((v) => {
    return remap$(v, {
        sid: "Sid",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FetchConnectionPolicyRequest$;
(function (FetchConnectionPolicyRequest$) {
    /** @deprecated use `FetchConnectionPolicyRequest$inboundSchema` instead. */
    FetchConnectionPolicyRequest$.inboundSchema = FetchConnectionPolicyRequest$inboundSchema;
    /** @deprecated use `FetchConnectionPolicyRequest$outboundSchema` instead. */
    FetchConnectionPolicyRequest$.outboundSchema = FetchConnectionPolicyRequest$outboundSchema;
})(FetchConnectionPolicyRequest$ || (FetchConnectionPolicyRequest$ = {}));
export function fetchConnectionPolicyRequestToJSON(fetchConnectionPolicyRequest) {
    return JSON.stringify(FetchConnectionPolicyRequest$outboundSchema.parse(fetchConnectionPolicyRequest));
}
export function fetchConnectionPolicyRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FetchConnectionPolicyRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FetchConnectionPolicyRequest' from JSON`);
}
/** @internal */
export const FetchConnectionPolicyResponse$inboundSchema = z.object({
    Headers: z.record(z.array(z.string())),
    Result: components.VoiceV1ConnectionPolicy$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "Headers": "headers",
        "Result": "result",
    });
});
/** @internal */
export const FetchConnectionPolicyResponse$outboundSchema = z.object({
    headers: z.record(z.array(z.string())),
    result: components.VoiceV1ConnectionPolicy$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        headers: "Headers",
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FetchConnectionPolicyResponse$;
(function (FetchConnectionPolicyResponse$) {
    /** @deprecated use `FetchConnectionPolicyResponse$inboundSchema` instead. */
    FetchConnectionPolicyResponse$.inboundSchema = FetchConnectionPolicyResponse$inboundSchema;
    /** @deprecated use `FetchConnectionPolicyResponse$outboundSchema` instead. */
    FetchConnectionPolicyResponse$.outboundSchema = FetchConnectionPolicyResponse$outboundSchema;
})(FetchConnectionPolicyResponse$ || (FetchConnectionPolicyResponse$ = {}));
export function fetchConnectionPolicyResponseToJSON(fetchConnectionPolicyResponse) {
    return JSON.stringify(FetchConnectionPolicyResponse$outboundSchema.parse(fetchConnectionPolicyResponse));
}
export function fetchConnectionPolicyResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FetchConnectionPolicyResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FetchConnectionPolicyResponse' from JSON`);
}
//# sourceMappingURL=fetchconnectionpolicy.js.map