/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
export const CreateConnectionPolicyTargetServerList = [
    "https://voice.twilio.com",
];
/** @internal */
export const CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$inboundSchema = z.object({
    Target: z.string(),
    FriendlyName: z.string().optional(),
    Priority: z.number().int().optional(),
    Weight: z.number().int().optional(),
    Enabled: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        "Target": "target",
        "FriendlyName": "friendlyName",
        "Priority": "priority",
        "Weight": "weight",
        "Enabled": "enabled",
    });
});
/** @internal */
export const CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$outboundSchema = z.object({
    target: z.string(),
    friendlyName: z.string().optional(),
    priority: z.number().int().optional(),
    weight: z.number().int().optional(),
    enabled: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        target: "Target",
        friendlyName: "FriendlyName",
        priority: "Priority",
        weight: "Weight",
        enabled: "Enabled",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$;
(function (CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$) {
    /** @deprecated use `CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$inboundSchema` instead. */
    CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$.inboundSchema = CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$inboundSchema;
    /** @deprecated use `CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$outboundSchema` instead. */
    CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$.outboundSchema = CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$outboundSchema;
})(CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$ || (CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$ = {}));
export function createConnectionPolicyTargetCreateConnectionPolicyTargetRequestToJSON(createConnectionPolicyTargetCreateConnectionPolicyTargetRequest) {
    return JSON.stringify(CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$outboundSchema
        .parse(createConnectionPolicyTargetCreateConnectionPolicyTargetRequest));
}
export function createConnectionPolicyTargetCreateConnectionPolicyTargetRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest' from JSON`);
}
/** @internal */
export const CreateConnectionPolicyTargetRequest$inboundSchema = z.object({
    ConnectionPolicySid: z.string(),
    RequestBody: z.lazy(() => CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "ConnectionPolicySid": "connectionPolicySid",
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const CreateConnectionPolicyTargetRequest$outboundSchema = z.object({
    connectionPolicySid: z.string(),
    requestBody: z.lazy(() => CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        connectionPolicySid: "ConnectionPolicySid",
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateConnectionPolicyTargetRequest$;
(function (CreateConnectionPolicyTargetRequest$) {
    /** @deprecated use `CreateConnectionPolicyTargetRequest$inboundSchema` instead. */
    CreateConnectionPolicyTargetRequest$.inboundSchema = CreateConnectionPolicyTargetRequest$inboundSchema;
    /** @deprecated use `CreateConnectionPolicyTargetRequest$outboundSchema` instead. */
    CreateConnectionPolicyTargetRequest$.outboundSchema = CreateConnectionPolicyTargetRequest$outboundSchema;
})(CreateConnectionPolicyTargetRequest$ || (CreateConnectionPolicyTargetRequest$ = {}));
export function createConnectionPolicyTargetRequestToJSON(createConnectionPolicyTargetRequest) {
    return JSON.stringify(CreateConnectionPolicyTargetRequest$outboundSchema.parse(createConnectionPolicyTargetRequest));
}
export function createConnectionPolicyTargetRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateConnectionPolicyTargetRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateConnectionPolicyTargetRequest' from JSON`);
}
/** @internal */
export const CreateConnectionPolicyTargetResponse$inboundSchema = z.object({
    Headers: z.record(z.array(z.string())),
    Result: components.VoiceV1ConnectionPolicyConnectionPolicyTarget$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "Headers": "headers",
        "Result": "result",
    });
});
/** @internal */
export const CreateConnectionPolicyTargetResponse$outboundSchema = z.object({
    headers: z.record(z.array(z.string())),
    result: components.VoiceV1ConnectionPolicyConnectionPolicyTarget$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        headers: "Headers",
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateConnectionPolicyTargetResponse$;
(function (CreateConnectionPolicyTargetResponse$) {
    /** @deprecated use `CreateConnectionPolicyTargetResponse$inboundSchema` instead. */
    CreateConnectionPolicyTargetResponse$.inboundSchema = CreateConnectionPolicyTargetResponse$inboundSchema;
    /** @deprecated use `CreateConnectionPolicyTargetResponse$outboundSchema` instead. */
    CreateConnectionPolicyTargetResponse$.outboundSchema = CreateConnectionPolicyTargetResponse$outboundSchema;
})(CreateConnectionPolicyTargetResponse$ || (CreateConnectionPolicyTargetResponse$ = {}));
export function createConnectionPolicyTargetResponseToJSON(createConnectionPolicyTargetResponse) {
    return JSON.stringify(CreateConnectionPolicyTargetResponse$outboundSchema.parse(createConnectionPolicyTargetResponse));
}
export function createConnectionPolicyTargetResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateConnectionPolicyTargetResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateConnectionPolicyTargetResponse' from JSON`);
}
//# sourceMappingURL=createconnectionpolicytarget.js.map