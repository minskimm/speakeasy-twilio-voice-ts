/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
export const FetchSourceIpMappingServerList = [
    "https://voice.twilio.com",
];
/** @internal */
export const FetchSourceIpMappingRequest$inboundSchema = z.object({
    Sid: z.string(),
}).transform((v) => {
    return remap$(v, {
        "Sid": "sid",
    });
});
/** @internal */
export const FetchSourceIpMappingRequest$outboundSchema = z.object({
    sid: z.string(),
}).transform((v) => {
    return remap$(v, {
        sid: "Sid",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FetchSourceIpMappingRequest$;
(function (FetchSourceIpMappingRequest$) {
    /** @deprecated use `FetchSourceIpMappingRequest$inboundSchema` instead. */
    FetchSourceIpMappingRequest$.inboundSchema = FetchSourceIpMappingRequest$inboundSchema;
    /** @deprecated use `FetchSourceIpMappingRequest$outboundSchema` instead. */
    FetchSourceIpMappingRequest$.outboundSchema = FetchSourceIpMappingRequest$outboundSchema;
})(FetchSourceIpMappingRequest$ || (FetchSourceIpMappingRequest$ = {}));
export function fetchSourceIpMappingRequestToJSON(fetchSourceIpMappingRequest) {
    return JSON.stringify(FetchSourceIpMappingRequest$outboundSchema.parse(fetchSourceIpMappingRequest));
}
export function fetchSourceIpMappingRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FetchSourceIpMappingRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FetchSourceIpMappingRequest' from JSON`);
}
/** @internal */
export const FetchSourceIpMappingResponse$inboundSchema = z.object({
    Headers: z.record(z.array(z.string())),
    Result: components.VoiceV1SourceIpMapping$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "Headers": "headers",
        "Result": "result",
    });
});
/** @internal */
export const FetchSourceIpMappingResponse$outboundSchema = z.object({
    headers: z.record(z.array(z.string())),
    result: components.VoiceV1SourceIpMapping$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        headers: "Headers",
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FetchSourceIpMappingResponse$;
(function (FetchSourceIpMappingResponse$) {
    /** @deprecated use `FetchSourceIpMappingResponse$inboundSchema` instead. */
    FetchSourceIpMappingResponse$.inboundSchema = FetchSourceIpMappingResponse$inboundSchema;
    /** @deprecated use `FetchSourceIpMappingResponse$outboundSchema` instead. */
    FetchSourceIpMappingResponse$.outboundSchema = FetchSourceIpMappingResponse$outboundSchema;
})(FetchSourceIpMappingResponse$ || (FetchSourceIpMappingResponse$ = {}));
export function fetchSourceIpMappingResponseToJSON(fetchSourceIpMappingResponse) {
    return JSON.stringify(FetchSourceIpMappingResponse$outboundSchema.parse(fetchSourceIpMappingResponse));
}
export function fetchSourceIpMappingResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FetchSourceIpMappingResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FetchSourceIpMappingResponse' from JSON`);
}
//# sourceMappingURL=fetchsourceipmapping.js.map