/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
export const CreateIpRecordServerList = [
    "https://voice.twilio.com",
];
/** @internal */
export const CreateIpRecordCreateIpRecordRequest$inboundSchema = z.object({
    IpAddress: z.string(),
    FriendlyName: z.string().optional(),
    CidrPrefixLength: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        "IpAddress": "ipAddress",
        "FriendlyName": "friendlyName",
        "CidrPrefixLength": "cidrPrefixLength",
    });
});
/** @internal */
export const CreateIpRecordCreateIpRecordRequest$outboundSchema = z.object({
    ipAddress: z.string(),
    friendlyName: z.string().optional(),
    cidrPrefixLength: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        ipAddress: "IpAddress",
        friendlyName: "FriendlyName",
        cidrPrefixLength: "CidrPrefixLength",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateIpRecordCreateIpRecordRequest$;
(function (CreateIpRecordCreateIpRecordRequest$) {
    /** @deprecated use `CreateIpRecordCreateIpRecordRequest$inboundSchema` instead. */
    CreateIpRecordCreateIpRecordRequest$.inboundSchema = CreateIpRecordCreateIpRecordRequest$inboundSchema;
    /** @deprecated use `CreateIpRecordCreateIpRecordRequest$outboundSchema` instead. */
    CreateIpRecordCreateIpRecordRequest$.outboundSchema = CreateIpRecordCreateIpRecordRequest$outboundSchema;
})(CreateIpRecordCreateIpRecordRequest$ || (CreateIpRecordCreateIpRecordRequest$ = {}));
export function createIpRecordCreateIpRecordRequestToJSON(createIpRecordCreateIpRecordRequest) {
    return JSON.stringify(CreateIpRecordCreateIpRecordRequest$outboundSchema.parse(createIpRecordCreateIpRecordRequest));
}
export function createIpRecordCreateIpRecordRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateIpRecordCreateIpRecordRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateIpRecordCreateIpRecordRequest' from JSON`);
}
/** @internal */
export const CreateIpRecordResponse$inboundSchema = z.object({
    Headers: z.record(z.array(z.string())),
    Result: components.VoiceV1IpRecord$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "Headers": "headers",
        "Result": "result",
    });
});
/** @internal */
export const CreateIpRecordResponse$outboundSchema = z.object({
    headers: z.record(z.array(z.string())),
    result: components.VoiceV1IpRecord$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        headers: "Headers",
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateIpRecordResponse$;
(function (CreateIpRecordResponse$) {
    /** @deprecated use `CreateIpRecordResponse$inboundSchema` instead. */
    CreateIpRecordResponse$.inboundSchema = CreateIpRecordResponse$inboundSchema;
    /** @deprecated use `CreateIpRecordResponse$outboundSchema` instead. */
    CreateIpRecordResponse$.outboundSchema = CreateIpRecordResponse$outboundSchema;
})(CreateIpRecordResponse$ || (CreateIpRecordResponse$ = {}));
export function createIpRecordResponseToJSON(createIpRecordResponse) {
    return JSON.stringify(CreateIpRecordResponse$outboundSchema.parse(createIpRecordResponse));
}
export function createIpRecordResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateIpRecordResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateIpRecordResponse' from JSON`);
}
//# sourceMappingURL=createiprecord.js.map