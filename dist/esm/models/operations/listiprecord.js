/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
export const ListIpRecordServerList = [
    "https://voice.twilio.com",
];
/** @internal */
export const ListIpRecordRequest$inboundSchema = z.object({
    PageSize: z.number().int().optional(),
    Page: z.number().int().optional(),
    PageToken: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "PageSize": "pageSize",
        "Page": "page",
        "PageToken": "pageToken",
    });
});
/** @internal */
export const ListIpRecordRequest$outboundSchema = z.object({
    pageSize: z.number().int().optional(),
    page: z.number().int().optional(),
    pageToken: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        pageSize: "PageSize",
        page: "Page",
        pageToken: "PageToken",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ListIpRecordRequest$;
(function (ListIpRecordRequest$) {
    /** @deprecated use `ListIpRecordRequest$inboundSchema` instead. */
    ListIpRecordRequest$.inboundSchema = ListIpRecordRequest$inboundSchema;
    /** @deprecated use `ListIpRecordRequest$outboundSchema` instead. */
    ListIpRecordRequest$.outboundSchema = ListIpRecordRequest$outboundSchema;
})(ListIpRecordRequest$ || (ListIpRecordRequest$ = {}));
export function listIpRecordRequestToJSON(listIpRecordRequest) {
    return JSON.stringify(ListIpRecordRequest$outboundSchema.parse(listIpRecordRequest));
}
export function listIpRecordRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ListIpRecordRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListIpRecordRequest' from JSON`);
}
/** @internal */
export const ListIpRecordMeta$inboundSchema = z.object({
    first_page_url: z.string().optional(),
    key: z.string().optional(),
    next_page_url: z.nullable(z.string()).optional(),
    page: z.number().int().optional(),
    page_size: z.number().int().optional(),
    previous_page_url: z.nullable(z.string()).optional(),
    url: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "first_page_url": "firstPageUrl",
        "next_page_url": "nextPageUrl",
        "page_size": "pageSize",
        "previous_page_url": "previousPageUrl",
    });
});
/** @internal */
export const ListIpRecordMeta$outboundSchema = z.object({
    firstPageUrl: z.string().optional(),
    key: z.string().optional(),
    nextPageUrl: z.nullable(z.string()).optional(),
    page: z.number().int().optional(),
    pageSize: z.number().int().optional(),
    previousPageUrl: z.nullable(z.string()).optional(),
    url: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        firstPageUrl: "first_page_url",
        nextPageUrl: "next_page_url",
        pageSize: "page_size",
        previousPageUrl: "previous_page_url",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ListIpRecordMeta$;
(function (ListIpRecordMeta$) {
    /** @deprecated use `ListIpRecordMeta$inboundSchema` instead. */
    ListIpRecordMeta$.inboundSchema = ListIpRecordMeta$inboundSchema;
    /** @deprecated use `ListIpRecordMeta$outboundSchema` instead. */
    ListIpRecordMeta$.outboundSchema = ListIpRecordMeta$outboundSchema;
})(ListIpRecordMeta$ || (ListIpRecordMeta$ = {}));
export function listIpRecordMetaToJSON(listIpRecordMeta) {
    return JSON.stringify(ListIpRecordMeta$outboundSchema.parse(listIpRecordMeta));
}
export function listIpRecordMetaFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ListIpRecordMeta$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListIpRecordMeta' from JSON`);
}
/** @internal */
export const ListIpRecordListIpRecordResponse$inboundSchema = z.object({
    ip_records: z.array(components.VoiceV1IpRecord$inboundSchema).optional(),
    meta: z.lazy(() => ListIpRecordMeta$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "ip_records": "ipRecords",
    });
});
/** @internal */
export const ListIpRecordListIpRecordResponse$outboundSchema = z.object({
    ipRecords: z.array(components.VoiceV1IpRecord$outboundSchema).optional(),
    meta: z.lazy(() => ListIpRecordMeta$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        ipRecords: "ip_records",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ListIpRecordListIpRecordResponse$;
(function (ListIpRecordListIpRecordResponse$) {
    /** @deprecated use `ListIpRecordListIpRecordResponse$inboundSchema` instead. */
    ListIpRecordListIpRecordResponse$.inboundSchema = ListIpRecordListIpRecordResponse$inboundSchema;
    /** @deprecated use `ListIpRecordListIpRecordResponse$outboundSchema` instead. */
    ListIpRecordListIpRecordResponse$.outboundSchema = ListIpRecordListIpRecordResponse$outboundSchema;
})(ListIpRecordListIpRecordResponse$ || (ListIpRecordListIpRecordResponse$ = {}));
export function listIpRecordListIpRecordResponseToJSON(listIpRecordListIpRecordResponse) {
    return JSON.stringify(ListIpRecordListIpRecordResponse$outboundSchema.parse(listIpRecordListIpRecordResponse));
}
export function listIpRecordListIpRecordResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ListIpRecordListIpRecordResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListIpRecordListIpRecordResponse' from JSON`);
}
/** @internal */
export const ListIpRecordResponse$inboundSchema = z.object({
    Headers: z.record(z.array(z.string())),
    Result: z.lazy(() => ListIpRecordListIpRecordResponse$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "Headers": "headers",
        "Result": "result",
    });
});
/** @internal */
export const ListIpRecordResponse$outboundSchema = z.object({
    headers: z.record(z.array(z.string())),
    result: z.lazy(() => ListIpRecordListIpRecordResponse$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        headers: "Headers",
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ListIpRecordResponse$;
(function (ListIpRecordResponse$) {
    /** @deprecated use `ListIpRecordResponse$inboundSchema` instead. */
    ListIpRecordResponse$.inboundSchema = ListIpRecordResponse$inboundSchema;
    /** @deprecated use `ListIpRecordResponse$outboundSchema` instead. */
    ListIpRecordResponse$.outboundSchema = ListIpRecordResponse$outboundSchema;
})(ListIpRecordResponse$ || (ListIpRecordResponse$ = {}));
export function listIpRecordResponseToJSON(listIpRecordResponse) {
    return JSON.stringify(ListIpRecordResponse$outboundSchema.parse(listIpRecordResponse));
}
export function listIpRecordResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ListIpRecordResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListIpRecordResponse' from JSON`);
}
//# sourceMappingURL=listiprecord.js.map