/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
export const UpdateByocTrunkServerList = [
    "https://voice.twilio.com",
];
/**
 * The HTTP method we should use to call `voice_url`
 */
export const UpdateByocTrunkVoiceMethod = {
    Get: "GET",
    Post: "POST",
};
/**
 * The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`.
 */
export const UpdateByocTrunkVoiceFallbackMethod = {
    Get: "GET",
    Post: "POST",
};
/**
 * The HTTP method we should use to call `status_callback_url`. Can be: `GET` or `POST`.
 */
export const UpdateByocTrunkStatusCallbackMethod = {
    Get: "GET",
    Post: "POST",
};
/** @internal */
export const UpdateByocTrunkVoiceMethod$inboundSchema = z.nativeEnum(UpdateByocTrunkVoiceMethod);
/** @internal */
export const UpdateByocTrunkVoiceMethod$outboundSchema = UpdateByocTrunkVoiceMethod$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateByocTrunkVoiceMethod$;
(function (UpdateByocTrunkVoiceMethod$) {
    /** @deprecated use `UpdateByocTrunkVoiceMethod$inboundSchema` instead. */
    UpdateByocTrunkVoiceMethod$.inboundSchema = UpdateByocTrunkVoiceMethod$inboundSchema;
    /** @deprecated use `UpdateByocTrunkVoiceMethod$outboundSchema` instead. */
    UpdateByocTrunkVoiceMethod$.outboundSchema = UpdateByocTrunkVoiceMethod$outboundSchema;
})(UpdateByocTrunkVoiceMethod$ || (UpdateByocTrunkVoiceMethod$ = {}));
/** @internal */
export const UpdateByocTrunkVoiceFallbackMethod$inboundSchema = z.nativeEnum(UpdateByocTrunkVoiceFallbackMethod);
/** @internal */
export const UpdateByocTrunkVoiceFallbackMethod$outboundSchema = UpdateByocTrunkVoiceFallbackMethod$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateByocTrunkVoiceFallbackMethod$;
(function (UpdateByocTrunkVoiceFallbackMethod$) {
    /** @deprecated use `UpdateByocTrunkVoiceFallbackMethod$inboundSchema` instead. */
    UpdateByocTrunkVoiceFallbackMethod$.inboundSchema = UpdateByocTrunkVoiceFallbackMethod$inboundSchema;
    /** @deprecated use `UpdateByocTrunkVoiceFallbackMethod$outboundSchema` instead. */
    UpdateByocTrunkVoiceFallbackMethod$.outboundSchema = UpdateByocTrunkVoiceFallbackMethod$outboundSchema;
})(UpdateByocTrunkVoiceFallbackMethod$ || (UpdateByocTrunkVoiceFallbackMethod$ = {}));
/** @internal */
export const UpdateByocTrunkStatusCallbackMethod$inboundSchema = z.nativeEnum(UpdateByocTrunkStatusCallbackMethod);
/** @internal */
export const UpdateByocTrunkStatusCallbackMethod$outboundSchema = UpdateByocTrunkStatusCallbackMethod$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateByocTrunkStatusCallbackMethod$;
(function (UpdateByocTrunkStatusCallbackMethod$) {
    /** @deprecated use `UpdateByocTrunkStatusCallbackMethod$inboundSchema` instead. */
    UpdateByocTrunkStatusCallbackMethod$.inboundSchema = UpdateByocTrunkStatusCallbackMethod$inboundSchema;
    /** @deprecated use `UpdateByocTrunkStatusCallbackMethod$outboundSchema` instead. */
    UpdateByocTrunkStatusCallbackMethod$.outboundSchema = UpdateByocTrunkStatusCallbackMethod$outboundSchema;
})(UpdateByocTrunkStatusCallbackMethod$ || (UpdateByocTrunkStatusCallbackMethod$ = {}));
/** @internal */
export const UpdateByocTrunkUpdateByocTrunkRequest$inboundSchema = z.object({
    FriendlyName: z.string().optional(),
    VoiceUrl: z.string().optional(),
    VoiceMethod: UpdateByocTrunkVoiceMethod$inboundSchema.optional(),
    VoiceFallbackUrl: z.string().optional(),
    VoiceFallbackMethod: UpdateByocTrunkVoiceFallbackMethod$inboundSchema
        .optional(),
    StatusCallbackUrl: z.string().optional(),
    StatusCallbackMethod: UpdateByocTrunkStatusCallbackMethod$inboundSchema
        .optional(),
    CnamLookupEnabled: z.boolean().optional(),
    ConnectionPolicySid: z.string().optional(),
    FromDomainSid: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "FriendlyName": "friendlyName",
        "VoiceUrl": "voiceUrl",
        "VoiceMethod": "voiceMethod",
        "VoiceFallbackUrl": "voiceFallbackUrl",
        "VoiceFallbackMethod": "voiceFallbackMethod",
        "StatusCallbackUrl": "statusCallbackUrl",
        "StatusCallbackMethod": "statusCallbackMethod",
        "CnamLookupEnabled": "cnamLookupEnabled",
        "ConnectionPolicySid": "connectionPolicySid",
        "FromDomainSid": "fromDomainSid",
    });
});
/** @internal */
export const UpdateByocTrunkUpdateByocTrunkRequest$outboundSchema = z.object({
    friendlyName: z.string().optional(),
    voiceUrl: z.string().optional(),
    voiceMethod: UpdateByocTrunkVoiceMethod$outboundSchema.optional(),
    voiceFallbackUrl: z.string().optional(),
    voiceFallbackMethod: UpdateByocTrunkVoiceFallbackMethod$outboundSchema
        .optional(),
    statusCallbackUrl: z.string().optional(),
    statusCallbackMethod: UpdateByocTrunkStatusCallbackMethod$outboundSchema
        .optional(),
    cnamLookupEnabled: z.boolean().optional(),
    connectionPolicySid: z.string().optional(),
    fromDomainSid: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        friendlyName: "FriendlyName",
        voiceUrl: "VoiceUrl",
        voiceMethod: "VoiceMethod",
        voiceFallbackUrl: "VoiceFallbackUrl",
        voiceFallbackMethod: "VoiceFallbackMethod",
        statusCallbackUrl: "StatusCallbackUrl",
        statusCallbackMethod: "StatusCallbackMethod",
        cnamLookupEnabled: "CnamLookupEnabled",
        connectionPolicySid: "ConnectionPolicySid",
        fromDomainSid: "FromDomainSid",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateByocTrunkUpdateByocTrunkRequest$;
(function (UpdateByocTrunkUpdateByocTrunkRequest$) {
    /** @deprecated use `UpdateByocTrunkUpdateByocTrunkRequest$inboundSchema` instead. */
    UpdateByocTrunkUpdateByocTrunkRequest$.inboundSchema = UpdateByocTrunkUpdateByocTrunkRequest$inboundSchema;
    /** @deprecated use `UpdateByocTrunkUpdateByocTrunkRequest$outboundSchema` instead. */
    UpdateByocTrunkUpdateByocTrunkRequest$.outboundSchema = UpdateByocTrunkUpdateByocTrunkRequest$outboundSchema;
})(UpdateByocTrunkUpdateByocTrunkRequest$ || (UpdateByocTrunkUpdateByocTrunkRequest$ = {}));
export function updateByocTrunkUpdateByocTrunkRequestToJSON(updateByocTrunkUpdateByocTrunkRequest) {
    return JSON.stringify(UpdateByocTrunkUpdateByocTrunkRequest$outboundSchema.parse(updateByocTrunkUpdateByocTrunkRequest));
}
export function updateByocTrunkUpdateByocTrunkRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateByocTrunkUpdateByocTrunkRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateByocTrunkUpdateByocTrunkRequest' from JSON`);
}
/** @internal */
export const UpdateByocTrunkRequest$inboundSchema = z.object({
    Sid: z.string(),
    RequestBody: z.lazy(() => UpdateByocTrunkUpdateByocTrunkRequest$inboundSchema)
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "Sid": "sid",
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const UpdateByocTrunkRequest$outboundSchema = z.object({
    sid: z.string(),
    requestBody: z.lazy(() => UpdateByocTrunkUpdateByocTrunkRequest$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        sid: "Sid",
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateByocTrunkRequest$;
(function (UpdateByocTrunkRequest$) {
    /** @deprecated use `UpdateByocTrunkRequest$inboundSchema` instead. */
    UpdateByocTrunkRequest$.inboundSchema = UpdateByocTrunkRequest$inboundSchema;
    /** @deprecated use `UpdateByocTrunkRequest$outboundSchema` instead. */
    UpdateByocTrunkRequest$.outboundSchema = UpdateByocTrunkRequest$outboundSchema;
})(UpdateByocTrunkRequest$ || (UpdateByocTrunkRequest$ = {}));
export function updateByocTrunkRequestToJSON(updateByocTrunkRequest) {
    return JSON.stringify(UpdateByocTrunkRequest$outboundSchema.parse(updateByocTrunkRequest));
}
export function updateByocTrunkRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateByocTrunkRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateByocTrunkRequest' from JSON`);
}
/** @internal */
export const UpdateByocTrunkResponse$inboundSchema = z.object({
    Headers: z.record(z.array(z.string())),
    Result: components.VoiceV1ByocTrunk$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "Headers": "headers",
        "Result": "result",
    });
});
/** @internal */
export const UpdateByocTrunkResponse$outboundSchema = z.object({
    headers: z.record(z.array(z.string())),
    result: components.VoiceV1ByocTrunk$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        headers: "Headers",
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateByocTrunkResponse$;
(function (UpdateByocTrunkResponse$) {
    /** @deprecated use `UpdateByocTrunkResponse$inboundSchema` instead. */
    UpdateByocTrunkResponse$.inboundSchema = UpdateByocTrunkResponse$inboundSchema;
    /** @deprecated use `UpdateByocTrunkResponse$outboundSchema` instead. */
    UpdateByocTrunkResponse$.outboundSchema = UpdateByocTrunkResponse$outboundSchema;
})(UpdateByocTrunkResponse$ || (UpdateByocTrunkResponse$ = {}));
export function updateByocTrunkResponseToJSON(updateByocTrunkResponse) {
    return JSON.stringify(UpdateByocTrunkResponse$outboundSchema.parse(updateByocTrunkResponse));
}
export function updateByocTrunkResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateByocTrunkResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateByocTrunkResponse' from JSON`);
}
//# sourceMappingURL=updatebyoctrunk.js.map