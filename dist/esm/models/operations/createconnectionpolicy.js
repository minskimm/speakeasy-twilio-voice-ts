/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
export const CreateConnectionPolicyServerList = [
    "https://voice.twilio.com",
];
/** @internal */
export const CreateConnectionPolicyCreateConnectionPolicyRequest$inboundSchema = z.object({
    FriendlyName: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "FriendlyName": "friendlyName",
    });
});
/** @internal */
export const CreateConnectionPolicyCreateConnectionPolicyRequest$outboundSchema = z.object({
    friendlyName: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        friendlyName: "FriendlyName",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateConnectionPolicyCreateConnectionPolicyRequest$;
(function (CreateConnectionPolicyCreateConnectionPolicyRequest$) {
    /** @deprecated use `CreateConnectionPolicyCreateConnectionPolicyRequest$inboundSchema` instead. */
    CreateConnectionPolicyCreateConnectionPolicyRequest$.inboundSchema = CreateConnectionPolicyCreateConnectionPolicyRequest$inboundSchema;
    /** @deprecated use `CreateConnectionPolicyCreateConnectionPolicyRequest$outboundSchema` instead. */
    CreateConnectionPolicyCreateConnectionPolicyRequest$.outboundSchema = CreateConnectionPolicyCreateConnectionPolicyRequest$outboundSchema;
})(CreateConnectionPolicyCreateConnectionPolicyRequest$ || (CreateConnectionPolicyCreateConnectionPolicyRequest$ = {}));
export function createConnectionPolicyCreateConnectionPolicyRequestToJSON(createConnectionPolicyCreateConnectionPolicyRequest) {
    return JSON.stringify(CreateConnectionPolicyCreateConnectionPolicyRequest$outboundSchema.parse(createConnectionPolicyCreateConnectionPolicyRequest));
}
export function createConnectionPolicyCreateConnectionPolicyRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateConnectionPolicyCreateConnectionPolicyRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateConnectionPolicyCreateConnectionPolicyRequest' from JSON`);
}
/** @internal */
export const CreateConnectionPolicyResponse$inboundSchema = z.object({
    Headers: z.record(z.array(z.string())),
    Result: components.VoiceV1ConnectionPolicy$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "Headers": "headers",
        "Result": "result",
    });
});
/** @internal */
export const CreateConnectionPolicyResponse$outboundSchema = z.object({
    headers: z.record(z.array(z.string())),
    result: components.VoiceV1ConnectionPolicy$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        headers: "Headers",
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateConnectionPolicyResponse$;
(function (CreateConnectionPolicyResponse$) {
    /** @deprecated use `CreateConnectionPolicyResponse$inboundSchema` instead. */
    CreateConnectionPolicyResponse$.inboundSchema = CreateConnectionPolicyResponse$inboundSchema;
    /** @deprecated use `CreateConnectionPolicyResponse$outboundSchema` instead. */
    CreateConnectionPolicyResponse$.outboundSchema = CreateConnectionPolicyResponse$outboundSchema;
})(CreateConnectionPolicyResponse$ || (CreateConnectionPolicyResponse$ = {}));
export function createConnectionPolicyResponseToJSON(createConnectionPolicyResponse) {
    return JSON.stringify(CreateConnectionPolicyResponse$outboundSchema.parse(createConnectionPolicyResponse));
}
export function createConnectionPolicyResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateConnectionPolicyResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateConnectionPolicyResponse' from JSON`);
}
//# sourceMappingURL=createconnectionpolicy.js.map