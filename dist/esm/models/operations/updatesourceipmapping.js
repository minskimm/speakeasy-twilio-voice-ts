/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
export const UpdateSourceIpMappingServerList = [
    "https://voice.twilio.com",
];
/** @internal */
export const UpdateSourceIpMappingUpdateSourceIpMappingRequest$inboundSchema = z.object({
    SipDomainSid: z.string(),
}).transform((v) => {
    return remap$(v, {
        "SipDomainSid": "sipDomainSid",
    });
});
/** @internal */
export const UpdateSourceIpMappingUpdateSourceIpMappingRequest$outboundSchema = z.object({
    sipDomainSid: z.string(),
}).transform((v) => {
    return remap$(v, {
        sipDomainSid: "SipDomainSid",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateSourceIpMappingUpdateSourceIpMappingRequest$;
(function (UpdateSourceIpMappingUpdateSourceIpMappingRequest$) {
    /** @deprecated use `UpdateSourceIpMappingUpdateSourceIpMappingRequest$inboundSchema` instead. */
    UpdateSourceIpMappingUpdateSourceIpMappingRequest$.inboundSchema = UpdateSourceIpMappingUpdateSourceIpMappingRequest$inboundSchema;
    /** @deprecated use `UpdateSourceIpMappingUpdateSourceIpMappingRequest$outboundSchema` instead. */
    UpdateSourceIpMappingUpdateSourceIpMappingRequest$.outboundSchema = UpdateSourceIpMappingUpdateSourceIpMappingRequest$outboundSchema;
})(UpdateSourceIpMappingUpdateSourceIpMappingRequest$ || (UpdateSourceIpMappingUpdateSourceIpMappingRequest$ = {}));
export function updateSourceIpMappingUpdateSourceIpMappingRequestToJSON(updateSourceIpMappingUpdateSourceIpMappingRequest) {
    return JSON.stringify(UpdateSourceIpMappingUpdateSourceIpMappingRequest$outboundSchema.parse(updateSourceIpMappingUpdateSourceIpMappingRequest));
}
export function updateSourceIpMappingUpdateSourceIpMappingRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateSourceIpMappingUpdateSourceIpMappingRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateSourceIpMappingUpdateSourceIpMappingRequest' from JSON`);
}
/** @internal */
export const UpdateSourceIpMappingRequest$inboundSchema = z.object({
    Sid: z.string(),
    RequestBody: z.lazy(() => UpdateSourceIpMappingUpdateSourceIpMappingRequest$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "Sid": "sid",
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const UpdateSourceIpMappingRequest$outboundSchema = z.object({
    sid: z.string(),
    requestBody: z.lazy(() => UpdateSourceIpMappingUpdateSourceIpMappingRequest$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        sid: "Sid",
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateSourceIpMappingRequest$;
(function (UpdateSourceIpMappingRequest$) {
    /** @deprecated use `UpdateSourceIpMappingRequest$inboundSchema` instead. */
    UpdateSourceIpMappingRequest$.inboundSchema = UpdateSourceIpMappingRequest$inboundSchema;
    /** @deprecated use `UpdateSourceIpMappingRequest$outboundSchema` instead. */
    UpdateSourceIpMappingRequest$.outboundSchema = UpdateSourceIpMappingRequest$outboundSchema;
})(UpdateSourceIpMappingRequest$ || (UpdateSourceIpMappingRequest$ = {}));
export function updateSourceIpMappingRequestToJSON(updateSourceIpMappingRequest) {
    return JSON.stringify(UpdateSourceIpMappingRequest$outboundSchema.parse(updateSourceIpMappingRequest));
}
export function updateSourceIpMappingRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateSourceIpMappingRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateSourceIpMappingRequest' from JSON`);
}
/** @internal */
export const UpdateSourceIpMappingResponse$inboundSchema = z.object({
    Headers: z.record(z.array(z.string())),
    Result: components.VoiceV1SourceIpMapping$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "Headers": "headers",
        "Result": "result",
    });
});
/** @internal */
export const UpdateSourceIpMappingResponse$outboundSchema = z.object({
    headers: z.record(z.array(z.string())),
    result: components.VoiceV1SourceIpMapping$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        headers: "Headers",
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateSourceIpMappingResponse$;
(function (UpdateSourceIpMappingResponse$) {
    /** @deprecated use `UpdateSourceIpMappingResponse$inboundSchema` instead. */
    UpdateSourceIpMappingResponse$.inboundSchema = UpdateSourceIpMappingResponse$inboundSchema;
    /** @deprecated use `UpdateSourceIpMappingResponse$outboundSchema` instead. */
    UpdateSourceIpMappingResponse$.outboundSchema = UpdateSourceIpMappingResponse$outboundSchema;
})(UpdateSourceIpMappingResponse$ || (UpdateSourceIpMappingResponse$ = {}));
export function updateSourceIpMappingResponseToJSON(updateSourceIpMappingResponse) {
    return JSON.stringify(UpdateSourceIpMappingResponse$outboundSchema.parse(updateSourceIpMappingResponse));
}
export function updateSourceIpMappingResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateSourceIpMappingResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateSourceIpMappingResponse' from JSON`);
}
//# sourceMappingURL=updatesourceipmapping.js.map