/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
export const UpdateConnectionPolicyTargetServerList = [
    "https://voice.twilio.com",
];
/** @internal */
export const UpdateConnectionPolicyTargetUpdateConnectionPolicyTargetRequest$inboundSchema = z.object({
    FriendlyName: z.string().optional(),
    Target: z.string().optional(),
    Priority: z.number().int().optional(),
    Weight: z.number().int().optional(),
    Enabled: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        "FriendlyName": "friendlyName",
        "Target": "target",
        "Priority": "priority",
        "Weight": "weight",
        "Enabled": "enabled",
    });
});
/** @internal */
export const UpdateConnectionPolicyTargetUpdateConnectionPolicyTargetRequest$outboundSchema = z.object({
    friendlyName: z.string().optional(),
    target: z.string().optional(),
    priority: z.number().int().optional(),
    weight: z.number().int().optional(),
    enabled: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        friendlyName: "FriendlyName",
        target: "Target",
        priority: "Priority",
        weight: "Weight",
        enabled: "Enabled",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateConnectionPolicyTargetUpdateConnectionPolicyTargetRequest$;
(function (UpdateConnectionPolicyTargetUpdateConnectionPolicyTargetRequest$) {
    /** @deprecated use `UpdateConnectionPolicyTargetUpdateConnectionPolicyTargetRequest$inboundSchema` instead. */
    UpdateConnectionPolicyTargetUpdateConnectionPolicyTargetRequest$.inboundSchema = UpdateConnectionPolicyTargetUpdateConnectionPolicyTargetRequest$inboundSchema;
    /** @deprecated use `UpdateConnectionPolicyTargetUpdateConnectionPolicyTargetRequest$outboundSchema` instead. */
    UpdateConnectionPolicyTargetUpdateConnectionPolicyTargetRequest$.outboundSchema = UpdateConnectionPolicyTargetUpdateConnectionPolicyTargetRequest$outboundSchema;
})(UpdateConnectionPolicyTargetUpdateConnectionPolicyTargetRequest$ || (UpdateConnectionPolicyTargetUpdateConnectionPolicyTargetRequest$ = {}));
export function updateConnectionPolicyTargetUpdateConnectionPolicyTargetRequestToJSON(updateConnectionPolicyTargetUpdateConnectionPolicyTargetRequest) {
    return JSON.stringify(UpdateConnectionPolicyTargetUpdateConnectionPolicyTargetRequest$outboundSchema
        .parse(updateConnectionPolicyTargetUpdateConnectionPolicyTargetRequest));
}
export function updateConnectionPolicyTargetUpdateConnectionPolicyTargetRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateConnectionPolicyTargetUpdateConnectionPolicyTargetRequest$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'UpdateConnectionPolicyTargetUpdateConnectionPolicyTargetRequest' from JSON`);
}
/** @internal */
export const UpdateConnectionPolicyTargetRequest$inboundSchema = z.object({
    ConnectionPolicySid: z.string(),
    Sid: z.string(),
    RequestBody: z.lazy(() => UpdateConnectionPolicyTargetUpdateConnectionPolicyTargetRequest$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "ConnectionPolicySid": "connectionPolicySid",
        "Sid": "sid",
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const UpdateConnectionPolicyTargetRequest$outboundSchema = z.object({
    connectionPolicySid: z.string(),
    sid: z.string(),
    requestBody: z.lazy(() => UpdateConnectionPolicyTargetUpdateConnectionPolicyTargetRequest$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        connectionPolicySid: "ConnectionPolicySid",
        sid: "Sid",
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateConnectionPolicyTargetRequest$;
(function (UpdateConnectionPolicyTargetRequest$) {
    /** @deprecated use `UpdateConnectionPolicyTargetRequest$inboundSchema` instead. */
    UpdateConnectionPolicyTargetRequest$.inboundSchema = UpdateConnectionPolicyTargetRequest$inboundSchema;
    /** @deprecated use `UpdateConnectionPolicyTargetRequest$outboundSchema` instead. */
    UpdateConnectionPolicyTargetRequest$.outboundSchema = UpdateConnectionPolicyTargetRequest$outboundSchema;
})(UpdateConnectionPolicyTargetRequest$ || (UpdateConnectionPolicyTargetRequest$ = {}));
export function updateConnectionPolicyTargetRequestToJSON(updateConnectionPolicyTargetRequest) {
    return JSON.stringify(UpdateConnectionPolicyTargetRequest$outboundSchema.parse(updateConnectionPolicyTargetRequest));
}
export function updateConnectionPolicyTargetRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateConnectionPolicyTargetRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateConnectionPolicyTargetRequest' from JSON`);
}
/** @internal */
export const UpdateConnectionPolicyTargetResponse$inboundSchema = z.object({
    Headers: z.record(z.array(z.string())),
    Result: components.VoiceV1ConnectionPolicyConnectionPolicyTarget$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "Headers": "headers",
        "Result": "result",
    });
});
/** @internal */
export const UpdateConnectionPolicyTargetResponse$outboundSchema = z.object({
    headers: z.record(z.array(z.string())),
    result: components.VoiceV1ConnectionPolicyConnectionPolicyTarget$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        headers: "Headers",
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateConnectionPolicyTargetResponse$;
(function (UpdateConnectionPolicyTargetResponse$) {
    /** @deprecated use `UpdateConnectionPolicyTargetResponse$inboundSchema` instead. */
    UpdateConnectionPolicyTargetResponse$.inboundSchema = UpdateConnectionPolicyTargetResponse$inboundSchema;
    /** @deprecated use `UpdateConnectionPolicyTargetResponse$outboundSchema` instead. */
    UpdateConnectionPolicyTargetResponse$.outboundSchema = UpdateConnectionPolicyTargetResponse$outboundSchema;
})(UpdateConnectionPolicyTargetResponse$ || (UpdateConnectionPolicyTargetResponse$ = {}));
export function updateConnectionPolicyTargetResponseToJSON(updateConnectionPolicyTargetResponse) {
    return JSON.stringify(UpdateConnectionPolicyTargetResponse$outboundSchema.parse(updateConnectionPolicyTargetResponse));
}
export function updateConnectionPolicyTargetResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateConnectionPolicyTargetResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateConnectionPolicyTargetResponse' from JSON`);
}
//# sourceMappingURL=updateconnectionpolicytarget.js.map