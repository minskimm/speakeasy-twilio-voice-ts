/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
export const FetchConnectionPolicyTargetServerList = [
    "https://voice.twilio.com",
];
/** @internal */
export const FetchConnectionPolicyTargetRequest$inboundSchema = z.object({
    ConnectionPolicySid: z.string(),
    Sid: z.string(),
}).transform((v) => {
    return remap$(v, {
        "ConnectionPolicySid": "connectionPolicySid",
        "Sid": "sid",
    });
});
/** @internal */
export const FetchConnectionPolicyTargetRequest$outboundSchema = z.object({
    connectionPolicySid: z.string(),
    sid: z.string(),
}).transform((v) => {
    return remap$(v, {
        connectionPolicySid: "ConnectionPolicySid",
        sid: "Sid",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FetchConnectionPolicyTargetRequest$;
(function (FetchConnectionPolicyTargetRequest$) {
    /** @deprecated use `FetchConnectionPolicyTargetRequest$inboundSchema` instead. */
    FetchConnectionPolicyTargetRequest$.inboundSchema = FetchConnectionPolicyTargetRequest$inboundSchema;
    /** @deprecated use `FetchConnectionPolicyTargetRequest$outboundSchema` instead. */
    FetchConnectionPolicyTargetRequest$.outboundSchema = FetchConnectionPolicyTargetRequest$outboundSchema;
})(FetchConnectionPolicyTargetRequest$ || (FetchConnectionPolicyTargetRequest$ = {}));
export function fetchConnectionPolicyTargetRequestToJSON(fetchConnectionPolicyTargetRequest) {
    return JSON.stringify(FetchConnectionPolicyTargetRequest$outboundSchema.parse(fetchConnectionPolicyTargetRequest));
}
export function fetchConnectionPolicyTargetRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FetchConnectionPolicyTargetRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FetchConnectionPolicyTargetRequest' from JSON`);
}
/** @internal */
export const FetchConnectionPolicyTargetResponse$inboundSchema = z.object({
    Headers: z.record(z.array(z.string())),
    Result: components.VoiceV1ConnectionPolicyConnectionPolicyTarget$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "Headers": "headers",
        "Result": "result",
    });
});
/** @internal */
export const FetchConnectionPolicyTargetResponse$outboundSchema = z.object({
    headers: z.record(z.array(z.string())),
    result: components.VoiceV1ConnectionPolicyConnectionPolicyTarget$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        headers: "Headers",
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FetchConnectionPolicyTargetResponse$;
(function (FetchConnectionPolicyTargetResponse$) {
    /** @deprecated use `FetchConnectionPolicyTargetResponse$inboundSchema` instead. */
    FetchConnectionPolicyTargetResponse$.inboundSchema = FetchConnectionPolicyTargetResponse$inboundSchema;
    /** @deprecated use `FetchConnectionPolicyTargetResponse$outboundSchema` instead. */
    FetchConnectionPolicyTargetResponse$.outboundSchema = FetchConnectionPolicyTargetResponse$outboundSchema;
})(FetchConnectionPolicyTargetResponse$ || (FetchConnectionPolicyTargetResponse$ = {}));
export function fetchConnectionPolicyTargetResponseToJSON(fetchConnectionPolicyTargetResponse) {
    return JSON.stringify(FetchConnectionPolicyTargetResponse$outboundSchema.parse(fetchConnectionPolicyTargetResponse));
}
export function fetchConnectionPolicyTargetResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FetchConnectionPolicyTargetResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FetchConnectionPolicyTargetResponse' from JSON`);
}
//# sourceMappingURL=fetchconnectionpolicytarget.js.map