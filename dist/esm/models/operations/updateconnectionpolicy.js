/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
export const UpdateConnectionPolicyServerList = [
    "https://voice.twilio.com",
];
/** @internal */
export const UpdateConnectionPolicyUpdateConnectionPolicyRequest$inboundSchema = z.object({
    FriendlyName: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "FriendlyName": "friendlyName",
    });
});
/** @internal */
export const UpdateConnectionPolicyUpdateConnectionPolicyRequest$outboundSchema = z.object({
    friendlyName: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        friendlyName: "FriendlyName",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateConnectionPolicyUpdateConnectionPolicyRequest$;
(function (UpdateConnectionPolicyUpdateConnectionPolicyRequest$) {
    /** @deprecated use `UpdateConnectionPolicyUpdateConnectionPolicyRequest$inboundSchema` instead. */
    UpdateConnectionPolicyUpdateConnectionPolicyRequest$.inboundSchema = UpdateConnectionPolicyUpdateConnectionPolicyRequest$inboundSchema;
    /** @deprecated use `UpdateConnectionPolicyUpdateConnectionPolicyRequest$outboundSchema` instead. */
    UpdateConnectionPolicyUpdateConnectionPolicyRequest$.outboundSchema = UpdateConnectionPolicyUpdateConnectionPolicyRequest$outboundSchema;
})(UpdateConnectionPolicyUpdateConnectionPolicyRequest$ || (UpdateConnectionPolicyUpdateConnectionPolicyRequest$ = {}));
export function updateConnectionPolicyUpdateConnectionPolicyRequestToJSON(updateConnectionPolicyUpdateConnectionPolicyRequest) {
    return JSON.stringify(UpdateConnectionPolicyUpdateConnectionPolicyRequest$outboundSchema.parse(updateConnectionPolicyUpdateConnectionPolicyRequest));
}
export function updateConnectionPolicyUpdateConnectionPolicyRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateConnectionPolicyUpdateConnectionPolicyRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateConnectionPolicyUpdateConnectionPolicyRequest' from JSON`);
}
/** @internal */
export const UpdateConnectionPolicyRequest$inboundSchema = z.object({
    Sid: z.string(),
    RequestBody: z.lazy(() => UpdateConnectionPolicyUpdateConnectionPolicyRequest$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "Sid": "sid",
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const UpdateConnectionPolicyRequest$outboundSchema = z.object({
    sid: z.string(),
    requestBody: z.lazy(() => UpdateConnectionPolicyUpdateConnectionPolicyRequest$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        sid: "Sid",
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateConnectionPolicyRequest$;
(function (UpdateConnectionPolicyRequest$) {
    /** @deprecated use `UpdateConnectionPolicyRequest$inboundSchema` instead. */
    UpdateConnectionPolicyRequest$.inboundSchema = UpdateConnectionPolicyRequest$inboundSchema;
    /** @deprecated use `UpdateConnectionPolicyRequest$outboundSchema` instead. */
    UpdateConnectionPolicyRequest$.outboundSchema = UpdateConnectionPolicyRequest$outboundSchema;
})(UpdateConnectionPolicyRequest$ || (UpdateConnectionPolicyRequest$ = {}));
export function updateConnectionPolicyRequestToJSON(updateConnectionPolicyRequest) {
    return JSON.stringify(UpdateConnectionPolicyRequest$outboundSchema.parse(updateConnectionPolicyRequest));
}
export function updateConnectionPolicyRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateConnectionPolicyRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateConnectionPolicyRequest' from JSON`);
}
/** @internal */
export const UpdateConnectionPolicyResponse$inboundSchema = z.object({
    Headers: z.record(z.array(z.string())),
    Result: components.VoiceV1ConnectionPolicy$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "Headers": "headers",
        "Result": "result",
    });
});
/** @internal */
export const UpdateConnectionPolicyResponse$outboundSchema = z.object({
    headers: z.record(z.array(z.string())),
    result: components.VoiceV1ConnectionPolicy$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        headers: "Headers",
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateConnectionPolicyResponse$;
(function (UpdateConnectionPolicyResponse$) {
    /** @deprecated use `UpdateConnectionPolicyResponse$inboundSchema` instead. */
    UpdateConnectionPolicyResponse$.inboundSchema = UpdateConnectionPolicyResponse$inboundSchema;
    /** @deprecated use `UpdateConnectionPolicyResponse$outboundSchema` instead. */
    UpdateConnectionPolicyResponse$.outboundSchema = UpdateConnectionPolicyResponse$outboundSchema;
})(UpdateConnectionPolicyResponse$ || (UpdateConnectionPolicyResponse$ = {}));
export function updateConnectionPolicyResponseToJSON(updateConnectionPolicyResponse) {
    return JSON.stringify(UpdateConnectionPolicyResponse$outboundSchema.parse(updateConnectionPolicyResponse));
}
export function updateConnectionPolicyResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateConnectionPolicyResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateConnectionPolicyResponse' from JSON`);
}
//# sourceMappingURL=updateconnectionpolicy.js.map