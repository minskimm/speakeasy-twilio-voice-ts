/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
export const CreateByocTrunkServerList = [
    "https://voice.twilio.com",
];
/**
 * The HTTP method we should use to call `voice_url`. Can be: `GET` or `POST`.
 */
export const VoiceMethod = {
    Get: "GET",
    Post: "POST",
};
/**
 * The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`.
 */
export const VoiceFallbackMethod = {
    Get: "GET",
    Post: "POST",
};
/**
 * The HTTP method we should use to call `status_callback_url`. Can be: `GET` or `POST`.
 */
export const StatusCallbackMethod = {
    Get: "GET",
    Post: "POST",
};
/** @internal */
export const VoiceMethod$inboundSchema = z
    .nativeEnum(VoiceMethod);
/** @internal */
export const VoiceMethod$outboundSchema = VoiceMethod$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var VoiceMethod$;
(function (VoiceMethod$) {
    /** @deprecated use `VoiceMethod$inboundSchema` instead. */
    VoiceMethod$.inboundSchema = VoiceMethod$inboundSchema;
    /** @deprecated use `VoiceMethod$outboundSchema` instead. */
    VoiceMethod$.outboundSchema = VoiceMethod$outboundSchema;
})(VoiceMethod$ || (VoiceMethod$ = {}));
/** @internal */
export const VoiceFallbackMethod$inboundSchema = z.nativeEnum(VoiceFallbackMethod);
/** @internal */
export const VoiceFallbackMethod$outboundSchema = VoiceFallbackMethod$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var VoiceFallbackMethod$;
(function (VoiceFallbackMethod$) {
    /** @deprecated use `VoiceFallbackMethod$inboundSchema` instead. */
    VoiceFallbackMethod$.inboundSchema = VoiceFallbackMethod$inboundSchema;
    /** @deprecated use `VoiceFallbackMethod$outboundSchema` instead. */
    VoiceFallbackMethod$.outboundSchema = VoiceFallbackMethod$outboundSchema;
})(VoiceFallbackMethod$ || (VoiceFallbackMethod$ = {}));
/** @internal */
export const StatusCallbackMethod$inboundSchema = z.nativeEnum(StatusCallbackMethod);
/** @internal */
export const StatusCallbackMethod$outboundSchema = StatusCallbackMethod$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var StatusCallbackMethod$;
(function (StatusCallbackMethod$) {
    /** @deprecated use `StatusCallbackMethod$inboundSchema` instead. */
    StatusCallbackMethod$.inboundSchema = StatusCallbackMethod$inboundSchema;
    /** @deprecated use `StatusCallbackMethod$outboundSchema` instead. */
    StatusCallbackMethod$.outboundSchema = StatusCallbackMethod$outboundSchema;
})(StatusCallbackMethod$ || (StatusCallbackMethod$ = {}));
/** @internal */
export const CreateByocTrunkCreateByocTrunkRequest$inboundSchema = z.object({
    FriendlyName: z.string().optional(),
    VoiceUrl: z.string().optional(),
    VoiceMethod: VoiceMethod$inboundSchema.optional(),
    VoiceFallbackUrl: z.string().optional(),
    VoiceFallbackMethod: VoiceFallbackMethod$inboundSchema.optional(),
    StatusCallbackUrl: z.string().optional(),
    StatusCallbackMethod: StatusCallbackMethod$inboundSchema.optional(),
    CnamLookupEnabled: z.boolean().optional(),
    ConnectionPolicySid: z.string().optional(),
    FromDomainSid: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "FriendlyName": "friendlyName",
        "VoiceUrl": "voiceUrl",
        "VoiceMethod": "voiceMethod",
        "VoiceFallbackUrl": "voiceFallbackUrl",
        "VoiceFallbackMethod": "voiceFallbackMethod",
        "StatusCallbackUrl": "statusCallbackUrl",
        "StatusCallbackMethod": "statusCallbackMethod",
        "CnamLookupEnabled": "cnamLookupEnabled",
        "ConnectionPolicySid": "connectionPolicySid",
        "FromDomainSid": "fromDomainSid",
    });
});
/** @internal */
export const CreateByocTrunkCreateByocTrunkRequest$outboundSchema = z.object({
    friendlyName: z.string().optional(),
    voiceUrl: z.string().optional(),
    voiceMethod: VoiceMethod$outboundSchema.optional(),
    voiceFallbackUrl: z.string().optional(),
    voiceFallbackMethod: VoiceFallbackMethod$outboundSchema.optional(),
    statusCallbackUrl: z.string().optional(),
    statusCallbackMethod: StatusCallbackMethod$outboundSchema.optional(),
    cnamLookupEnabled: z.boolean().optional(),
    connectionPolicySid: z.string().optional(),
    fromDomainSid: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        friendlyName: "FriendlyName",
        voiceUrl: "VoiceUrl",
        voiceMethod: "VoiceMethod",
        voiceFallbackUrl: "VoiceFallbackUrl",
        voiceFallbackMethod: "VoiceFallbackMethod",
        statusCallbackUrl: "StatusCallbackUrl",
        statusCallbackMethod: "StatusCallbackMethod",
        cnamLookupEnabled: "CnamLookupEnabled",
        connectionPolicySid: "ConnectionPolicySid",
        fromDomainSid: "FromDomainSid",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateByocTrunkCreateByocTrunkRequest$;
(function (CreateByocTrunkCreateByocTrunkRequest$) {
    /** @deprecated use `CreateByocTrunkCreateByocTrunkRequest$inboundSchema` instead. */
    CreateByocTrunkCreateByocTrunkRequest$.inboundSchema = CreateByocTrunkCreateByocTrunkRequest$inboundSchema;
    /** @deprecated use `CreateByocTrunkCreateByocTrunkRequest$outboundSchema` instead. */
    CreateByocTrunkCreateByocTrunkRequest$.outboundSchema = CreateByocTrunkCreateByocTrunkRequest$outboundSchema;
})(CreateByocTrunkCreateByocTrunkRequest$ || (CreateByocTrunkCreateByocTrunkRequest$ = {}));
export function createByocTrunkCreateByocTrunkRequestToJSON(createByocTrunkCreateByocTrunkRequest) {
    return JSON.stringify(CreateByocTrunkCreateByocTrunkRequest$outboundSchema.parse(createByocTrunkCreateByocTrunkRequest));
}
export function createByocTrunkCreateByocTrunkRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateByocTrunkCreateByocTrunkRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateByocTrunkCreateByocTrunkRequest' from JSON`);
}
/** @internal */
export const CreateByocTrunkResponse$inboundSchema = z.object({
    Headers: z.record(z.array(z.string())),
    Result: components.VoiceV1ByocTrunk$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "Headers": "headers",
        "Result": "result",
    });
});
/** @internal */
export const CreateByocTrunkResponse$outboundSchema = z.object({
    headers: z.record(z.array(z.string())),
    result: components.VoiceV1ByocTrunk$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        headers: "Headers",
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateByocTrunkResponse$;
(function (CreateByocTrunkResponse$) {
    /** @deprecated use `CreateByocTrunkResponse$inboundSchema` instead. */
    CreateByocTrunkResponse$.inboundSchema = CreateByocTrunkResponse$inboundSchema;
    /** @deprecated use `CreateByocTrunkResponse$outboundSchema` instead. */
    CreateByocTrunkResponse$.outboundSchema = CreateByocTrunkResponse$outboundSchema;
})(CreateByocTrunkResponse$ || (CreateByocTrunkResponse$ = {}));
export function createByocTrunkResponseToJSON(createByocTrunkResponse) {
    return JSON.stringify(CreateByocTrunkResponse$outboundSchema.parse(createByocTrunkResponse));
}
export function createByocTrunkResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateByocTrunkResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateByocTrunkResponse' from JSON`);
}
//# sourceMappingURL=createbyoctrunk.js.map