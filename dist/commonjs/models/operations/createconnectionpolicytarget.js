"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateConnectionPolicyTargetResponse$ = exports.CreateConnectionPolicyTargetResponse$outboundSchema = exports.CreateConnectionPolicyTargetResponse$inboundSchema = exports.CreateConnectionPolicyTargetRequest$ = exports.CreateConnectionPolicyTargetRequest$outboundSchema = exports.CreateConnectionPolicyTargetRequest$inboundSchema = exports.CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$ = exports.CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$outboundSchema = exports.CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$inboundSchema = exports.CreateConnectionPolicyTargetServerList = void 0;
exports.createConnectionPolicyTargetCreateConnectionPolicyTargetRequestToJSON = createConnectionPolicyTargetCreateConnectionPolicyTargetRequestToJSON;
exports.createConnectionPolicyTargetCreateConnectionPolicyTargetRequestFromJSON = createConnectionPolicyTargetCreateConnectionPolicyTargetRequestFromJSON;
exports.createConnectionPolicyTargetRequestToJSON = createConnectionPolicyTargetRequestToJSON;
exports.createConnectionPolicyTargetRequestFromJSON = createConnectionPolicyTargetRequestFromJSON;
exports.createConnectionPolicyTargetResponseToJSON = createConnectionPolicyTargetResponseToJSON;
exports.createConnectionPolicyTargetResponseFromJSON = createConnectionPolicyTargetResponseFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const components = __importStar(require("../components/index.js"));
exports.CreateConnectionPolicyTargetServerList = [
    "https://voice.twilio.com",
];
/** @internal */
exports.CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$inboundSchema = z.object({
    Target: z.string(),
    FriendlyName: z.string().optional(),
    Priority: z.number().int().optional(),
    Weight: z.number().int().optional(),
    Enabled: z.boolean().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "Target": "target",
        "FriendlyName": "friendlyName",
        "Priority": "priority",
        "Weight": "weight",
        "Enabled": "enabled",
    });
});
/** @internal */
exports.CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$outboundSchema = z.object({
    target: z.string(),
    friendlyName: z.string().optional(),
    priority: z.number().int().optional(),
    weight: z.number().int().optional(),
    enabled: z.boolean().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        target: "Target",
        friendlyName: "FriendlyName",
        priority: "Priority",
        weight: "Weight",
        enabled: "Enabled",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$;
(function (CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$) {
    /** @deprecated use `CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$inboundSchema` instead. */
    CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$.inboundSchema = exports.CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$inboundSchema;
    /** @deprecated use `CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$outboundSchema` instead. */
    CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$.outboundSchema = exports.CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$outboundSchema;
})(CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$ || (exports.CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$ = CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$ = {}));
function createConnectionPolicyTargetCreateConnectionPolicyTargetRequestToJSON(createConnectionPolicyTargetCreateConnectionPolicyTargetRequest) {
    return JSON.stringify(exports.CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$outboundSchema
        .parse(createConnectionPolicyTargetCreateConnectionPolicyTargetRequest));
}
function createConnectionPolicyTargetCreateConnectionPolicyTargetRequestFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest' from JSON`);
}
/** @internal */
exports.CreateConnectionPolicyTargetRequest$inboundSchema = z.object({
    ConnectionPolicySid: z.string(),
    RequestBody: z.lazy(() => exports.CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$inboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "ConnectionPolicySid": "connectionPolicySid",
        "RequestBody": "requestBody",
    });
});
/** @internal */
exports.CreateConnectionPolicyTargetRequest$outboundSchema = z.object({
    connectionPolicySid: z.string(),
    requestBody: z.lazy(() => exports.CreateConnectionPolicyTargetCreateConnectionPolicyTargetRequest$outboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        connectionPolicySid: "ConnectionPolicySid",
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CreateConnectionPolicyTargetRequest$;
(function (CreateConnectionPolicyTargetRequest$) {
    /** @deprecated use `CreateConnectionPolicyTargetRequest$inboundSchema` instead. */
    CreateConnectionPolicyTargetRequest$.inboundSchema = exports.CreateConnectionPolicyTargetRequest$inboundSchema;
    /** @deprecated use `CreateConnectionPolicyTargetRequest$outboundSchema` instead. */
    CreateConnectionPolicyTargetRequest$.outboundSchema = exports.CreateConnectionPolicyTargetRequest$outboundSchema;
})(CreateConnectionPolicyTargetRequest$ || (exports.CreateConnectionPolicyTargetRequest$ = CreateConnectionPolicyTargetRequest$ = {}));
function createConnectionPolicyTargetRequestToJSON(createConnectionPolicyTargetRequest) {
    return JSON.stringify(exports.CreateConnectionPolicyTargetRequest$outboundSchema.parse(createConnectionPolicyTargetRequest));
}
function createConnectionPolicyTargetRequestFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CreateConnectionPolicyTargetRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateConnectionPolicyTargetRequest' from JSON`);
}
/** @internal */
exports.CreateConnectionPolicyTargetResponse$inboundSchema = z.object({
    Headers: z.record(z.array(z.string())),
    Result: components.VoiceV1ConnectionPolicyConnectionPolicyTarget$inboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "Headers": "headers",
        "Result": "result",
    });
});
/** @internal */
exports.CreateConnectionPolicyTargetResponse$outboundSchema = z.object({
    headers: z.record(z.array(z.string())),
    result: components.VoiceV1ConnectionPolicyConnectionPolicyTarget$outboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        headers: "Headers",
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CreateConnectionPolicyTargetResponse$;
(function (CreateConnectionPolicyTargetResponse$) {
    /** @deprecated use `CreateConnectionPolicyTargetResponse$inboundSchema` instead. */
    CreateConnectionPolicyTargetResponse$.inboundSchema = exports.CreateConnectionPolicyTargetResponse$inboundSchema;
    /** @deprecated use `CreateConnectionPolicyTargetResponse$outboundSchema` instead. */
    CreateConnectionPolicyTargetResponse$.outboundSchema = exports.CreateConnectionPolicyTargetResponse$outboundSchema;
})(CreateConnectionPolicyTargetResponse$ || (exports.CreateConnectionPolicyTargetResponse$ = CreateConnectionPolicyTargetResponse$ = {}));
function createConnectionPolicyTargetResponseToJSON(createConnectionPolicyTargetResponse) {
    return JSON.stringify(exports.CreateConnectionPolicyTargetResponse$outboundSchema.parse(createConnectionPolicyTargetResponse));
}
function createConnectionPolicyTargetResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CreateConnectionPolicyTargetResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateConnectionPolicyTargetResponse' from JSON`);
}
//# sourceMappingURL=createconnectionpolicytarget.js.map