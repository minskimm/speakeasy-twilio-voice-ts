"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListIpRecordResponse$ = exports.ListIpRecordResponse$outboundSchema = exports.ListIpRecordResponse$inboundSchema = exports.ListIpRecordListIpRecordResponse$ = exports.ListIpRecordListIpRecordResponse$outboundSchema = exports.ListIpRecordListIpRecordResponse$inboundSchema = exports.ListIpRecordMeta$ = exports.ListIpRecordMeta$outboundSchema = exports.ListIpRecordMeta$inboundSchema = exports.ListIpRecordRequest$ = exports.ListIpRecordRequest$outboundSchema = exports.ListIpRecordRequest$inboundSchema = exports.ListIpRecordServerList = void 0;
exports.listIpRecordRequestToJSON = listIpRecordRequestToJSON;
exports.listIpRecordRequestFromJSON = listIpRecordRequestFromJSON;
exports.listIpRecordMetaToJSON = listIpRecordMetaToJSON;
exports.listIpRecordMetaFromJSON = listIpRecordMetaFromJSON;
exports.listIpRecordListIpRecordResponseToJSON = listIpRecordListIpRecordResponseToJSON;
exports.listIpRecordListIpRecordResponseFromJSON = listIpRecordListIpRecordResponseFromJSON;
exports.listIpRecordResponseToJSON = listIpRecordResponseToJSON;
exports.listIpRecordResponseFromJSON = listIpRecordResponseFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const components = __importStar(require("../components/index.js"));
exports.ListIpRecordServerList = [
    "https://voice.twilio.com",
];
/** @internal */
exports.ListIpRecordRequest$inboundSchema = z.object({
    PageSize: z.number().int().optional(),
    Page: z.number().int().optional(),
    PageToken: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "PageSize": "pageSize",
        "Page": "page",
        "PageToken": "pageToken",
    });
});
/** @internal */
exports.ListIpRecordRequest$outboundSchema = z.object({
    pageSize: z.number().int().optional(),
    page: z.number().int().optional(),
    pageToken: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        pageSize: "PageSize",
        page: "Page",
        pageToken: "PageToken",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ListIpRecordRequest$;
(function (ListIpRecordRequest$) {
    /** @deprecated use `ListIpRecordRequest$inboundSchema` instead. */
    ListIpRecordRequest$.inboundSchema = exports.ListIpRecordRequest$inboundSchema;
    /** @deprecated use `ListIpRecordRequest$outboundSchema` instead. */
    ListIpRecordRequest$.outboundSchema = exports.ListIpRecordRequest$outboundSchema;
})(ListIpRecordRequest$ || (exports.ListIpRecordRequest$ = ListIpRecordRequest$ = {}));
function listIpRecordRequestToJSON(listIpRecordRequest) {
    return JSON.stringify(exports.ListIpRecordRequest$outboundSchema.parse(listIpRecordRequest));
}
function listIpRecordRequestFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ListIpRecordRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListIpRecordRequest' from JSON`);
}
/** @internal */
exports.ListIpRecordMeta$inboundSchema = z.object({
    first_page_url: z.string().optional(),
    key: z.string().optional(),
    next_page_url: z.nullable(z.string()).optional(),
    page: z.number().int().optional(),
    page_size: z.number().int().optional(),
    previous_page_url: z.nullable(z.string()).optional(),
    url: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "first_page_url": "firstPageUrl",
        "next_page_url": "nextPageUrl",
        "page_size": "pageSize",
        "previous_page_url": "previousPageUrl",
    });
});
/** @internal */
exports.ListIpRecordMeta$outboundSchema = z.object({
    firstPageUrl: z.string().optional(),
    key: z.string().optional(),
    nextPageUrl: z.nullable(z.string()).optional(),
    page: z.number().int().optional(),
    pageSize: z.number().int().optional(),
    previousPageUrl: z.nullable(z.string()).optional(),
    url: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        firstPageUrl: "first_page_url",
        nextPageUrl: "next_page_url",
        pageSize: "page_size",
        previousPageUrl: "previous_page_url",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ListIpRecordMeta$;
(function (ListIpRecordMeta$) {
    /** @deprecated use `ListIpRecordMeta$inboundSchema` instead. */
    ListIpRecordMeta$.inboundSchema = exports.ListIpRecordMeta$inboundSchema;
    /** @deprecated use `ListIpRecordMeta$outboundSchema` instead. */
    ListIpRecordMeta$.outboundSchema = exports.ListIpRecordMeta$outboundSchema;
})(ListIpRecordMeta$ || (exports.ListIpRecordMeta$ = ListIpRecordMeta$ = {}));
function listIpRecordMetaToJSON(listIpRecordMeta) {
    return JSON.stringify(exports.ListIpRecordMeta$outboundSchema.parse(listIpRecordMeta));
}
function listIpRecordMetaFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ListIpRecordMeta$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListIpRecordMeta' from JSON`);
}
/** @internal */
exports.ListIpRecordListIpRecordResponse$inboundSchema = z.object({
    ip_records: z.array(components.VoiceV1IpRecord$inboundSchema).optional(),
    meta: z.lazy(() => exports.ListIpRecordMeta$inboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "ip_records": "ipRecords",
    });
});
/** @internal */
exports.ListIpRecordListIpRecordResponse$outboundSchema = z.object({
    ipRecords: z.array(components.VoiceV1IpRecord$outboundSchema).optional(),
    meta: z.lazy(() => exports.ListIpRecordMeta$outboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        ipRecords: "ip_records",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ListIpRecordListIpRecordResponse$;
(function (ListIpRecordListIpRecordResponse$) {
    /** @deprecated use `ListIpRecordListIpRecordResponse$inboundSchema` instead. */
    ListIpRecordListIpRecordResponse$.inboundSchema = exports.ListIpRecordListIpRecordResponse$inboundSchema;
    /** @deprecated use `ListIpRecordListIpRecordResponse$outboundSchema` instead. */
    ListIpRecordListIpRecordResponse$.outboundSchema = exports.ListIpRecordListIpRecordResponse$outboundSchema;
})(ListIpRecordListIpRecordResponse$ || (exports.ListIpRecordListIpRecordResponse$ = ListIpRecordListIpRecordResponse$ = {}));
function listIpRecordListIpRecordResponseToJSON(listIpRecordListIpRecordResponse) {
    return JSON.stringify(exports.ListIpRecordListIpRecordResponse$outboundSchema.parse(listIpRecordListIpRecordResponse));
}
function listIpRecordListIpRecordResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ListIpRecordListIpRecordResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListIpRecordListIpRecordResponse' from JSON`);
}
/** @internal */
exports.ListIpRecordResponse$inboundSchema = z.object({
    Headers: z.record(z.array(z.string())),
    Result: z.lazy(() => exports.ListIpRecordListIpRecordResponse$inboundSchema),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "Headers": "headers",
        "Result": "result",
    });
});
/** @internal */
exports.ListIpRecordResponse$outboundSchema = z.object({
    headers: z.record(z.array(z.string())),
    result: z.lazy(() => exports.ListIpRecordListIpRecordResponse$outboundSchema),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        headers: "Headers",
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ListIpRecordResponse$;
(function (ListIpRecordResponse$) {
    /** @deprecated use `ListIpRecordResponse$inboundSchema` instead. */
    ListIpRecordResponse$.inboundSchema = exports.ListIpRecordResponse$inboundSchema;
    /** @deprecated use `ListIpRecordResponse$outboundSchema` instead. */
    ListIpRecordResponse$.outboundSchema = exports.ListIpRecordResponse$outboundSchema;
})(ListIpRecordResponse$ || (exports.ListIpRecordResponse$ = ListIpRecordResponse$ = {}));
function listIpRecordResponseToJSON(listIpRecordResponse) {
    return JSON.stringify(exports.ListIpRecordResponse$outboundSchema.parse(listIpRecordResponse));
}
function listIpRecordResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ListIpRecordResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListIpRecordResponse' from JSON`);
}
//# sourceMappingURL=listiprecord.js.map