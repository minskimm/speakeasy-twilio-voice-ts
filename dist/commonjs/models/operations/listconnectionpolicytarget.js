"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListConnectionPolicyTargetResponse$ = exports.ListConnectionPolicyTargetResponse$outboundSchema = exports.ListConnectionPolicyTargetResponse$inboundSchema = exports.ListConnectionPolicyTargetListConnectionPolicyTargetResponse$ = exports.ListConnectionPolicyTargetListConnectionPolicyTargetResponse$outboundSchema = exports.ListConnectionPolicyTargetListConnectionPolicyTargetResponse$inboundSchema = exports.ListConnectionPolicyTargetMeta$ = exports.ListConnectionPolicyTargetMeta$outboundSchema = exports.ListConnectionPolicyTargetMeta$inboundSchema = exports.ListConnectionPolicyTargetRequest$ = exports.ListConnectionPolicyTargetRequest$outboundSchema = exports.ListConnectionPolicyTargetRequest$inboundSchema = exports.ListConnectionPolicyTargetServerList = void 0;
exports.listConnectionPolicyTargetRequestToJSON = listConnectionPolicyTargetRequestToJSON;
exports.listConnectionPolicyTargetRequestFromJSON = listConnectionPolicyTargetRequestFromJSON;
exports.listConnectionPolicyTargetMetaToJSON = listConnectionPolicyTargetMetaToJSON;
exports.listConnectionPolicyTargetMetaFromJSON = listConnectionPolicyTargetMetaFromJSON;
exports.listConnectionPolicyTargetListConnectionPolicyTargetResponseToJSON = listConnectionPolicyTargetListConnectionPolicyTargetResponseToJSON;
exports.listConnectionPolicyTargetListConnectionPolicyTargetResponseFromJSON = listConnectionPolicyTargetListConnectionPolicyTargetResponseFromJSON;
exports.listConnectionPolicyTargetResponseToJSON = listConnectionPolicyTargetResponseToJSON;
exports.listConnectionPolicyTargetResponseFromJSON = listConnectionPolicyTargetResponseFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const components = __importStar(require("../components/index.js"));
exports.ListConnectionPolicyTargetServerList = [
    "https://voice.twilio.com",
];
/** @internal */
exports.ListConnectionPolicyTargetRequest$inboundSchema = z.object({
    ConnectionPolicySid: z.string(),
    PageSize: z.number().int().optional(),
    Page: z.number().int().optional(),
    PageToken: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "ConnectionPolicySid": "connectionPolicySid",
        "PageSize": "pageSize",
        "Page": "page",
        "PageToken": "pageToken",
    });
});
/** @internal */
exports.ListConnectionPolicyTargetRequest$outboundSchema = z.object({
    connectionPolicySid: z.string(),
    pageSize: z.number().int().optional(),
    page: z.number().int().optional(),
    pageToken: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        connectionPolicySid: "ConnectionPolicySid",
        pageSize: "PageSize",
        page: "Page",
        pageToken: "PageToken",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ListConnectionPolicyTargetRequest$;
(function (ListConnectionPolicyTargetRequest$) {
    /** @deprecated use `ListConnectionPolicyTargetRequest$inboundSchema` instead. */
    ListConnectionPolicyTargetRequest$.inboundSchema = exports.ListConnectionPolicyTargetRequest$inboundSchema;
    /** @deprecated use `ListConnectionPolicyTargetRequest$outboundSchema` instead. */
    ListConnectionPolicyTargetRequest$.outboundSchema = exports.ListConnectionPolicyTargetRequest$outboundSchema;
})(ListConnectionPolicyTargetRequest$ || (exports.ListConnectionPolicyTargetRequest$ = ListConnectionPolicyTargetRequest$ = {}));
function listConnectionPolicyTargetRequestToJSON(listConnectionPolicyTargetRequest) {
    return JSON.stringify(exports.ListConnectionPolicyTargetRequest$outboundSchema.parse(listConnectionPolicyTargetRequest));
}
function listConnectionPolicyTargetRequestFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ListConnectionPolicyTargetRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListConnectionPolicyTargetRequest' from JSON`);
}
/** @internal */
exports.ListConnectionPolicyTargetMeta$inboundSchema = z.object({
    first_page_url: z.string().optional(),
    key: z.string().optional(),
    next_page_url: z.nullable(z.string()).optional(),
    page: z.number().int().optional(),
    page_size: z.number().int().optional(),
    previous_page_url: z.nullable(z.string()).optional(),
    url: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "first_page_url": "firstPageUrl",
        "next_page_url": "nextPageUrl",
        "page_size": "pageSize",
        "previous_page_url": "previousPageUrl",
    });
});
/** @internal */
exports.ListConnectionPolicyTargetMeta$outboundSchema = z.object({
    firstPageUrl: z.string().optional(),
    key: z.string().optional(),
    nextPageUrl: z.nullable(z.string()).optional(),
    page: z.number().int().optional(),
    pageSize: z.number().int().optional(),
    previousPageUrl: z.nullable(z.string()).optional(),
    url: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        firstPageUrl: "first_page_url",
        nextPageUrl: "next_page_url",
        pageSize: "page_size",
        previousPageUrl: "previous_page_url",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ListConnectionPolicyTargetMeta$;
(function (ListConnectionPolicyTargetMeta$) {
    /** @deprecated use `ListConnectionPolicyTargetMeta$inboundSchema` instead. */
    ListConnectionPolicyTargetMeta$.inboundSchema = exports.ListConnectionPolicyTargetMeta$inboundSchema;
    /** @deprecated use `ListConnectionPolicyTargetMeta$outboundSchema` instead. */
    ListConnectionPolicyTargetMeta$.outboundSchema = exports.ListConnectionPolicyTargetMeta$outboundSchema;
})(ListConnectionPolicyTargetMeta$ || (exports.ListConnectionPolicyTargetMeta$ = ListConnectionPolicyTargetMeta$ = {}));
function listConnectionPolicyTargetMetaToJSON(listConnectionPolicyTargetMeta) {
    return JSON.stringify(exports.ListConnectionPolicyTargetMeta$outboundSchema.parse(listConnectionPolicyTargetMeta));
}
function listConnectionPolicyTargetMetaFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ListConnectionPolicyTargetMeta$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListConnectionPolicyTargetMeta' from JSON`);
}
/** @internal */
exports.ListConnectionPolicyTargetListConnectionPolicyTargetResponse$inboundSchema = z.object({
    targets: z.array(components.VoiceV1ConnectionPolicyConnectionPolicyTarget$inboundSchema).optional(),
    meta: z.lazy(() => exports.ListConnectionPolicyTargetMeta$inboundSchema).optional(),
});
/** @internal */
exports.ListConnectionPolicyTargetListConnectionPolicyTargetResponse$outboundSchema = z.object({
    targets: z.array(components.VoiceV1ConnectionPolicyConnectionPolicyTarget$outboundSchema).optional(),
    meta: z.lazy(() => exports.ListConnectionPolicyTargetMeta$outboundSchema)
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ListConnectionPolicyTargetListConnectionPolicyTargetResponse$;
(function (ListConnectionPolicyTargetListConnectionPolicyTargetResponse$) {
    /** @deprecated use `ListConnectionPolicyTargetListConnectionPolicyTargetResponse$inboundSchema` instead. */
    ListConnectionPolicyTargetListConnectionPolicyTargetResponse$.inboundSchema = exports.ListConnectionPolicyTargetListConnectionPolicyTargetResponse$inboundSchema;
    /** @deprecated use `ListConnectionPolicyTargetListConnectionPolicyTargetResponse$outboundSchema` instead. */
    ListConnectionPolicyTargetListConnectionPolicyTargetResponse$.outboundSchema = exports.ListConnectionPolicyTargetListConnectionPolicyTargetResponse$outboundSchema;
})(ListConnectionPolicyTargetListConnectionPolicyTargetResponse$ || (exports.ListConnectionPolicyTargetListConnectionPolicyTargetResponse$ = ListConnectionPolicyTargetListConnectionPolicyTargetResponse$ = {}));
function listConnectionPolicyTargetListConnectionPolicyTargetResponseToJSON(listConnectionPolicyTargetListConnectionPolicyTargetResponse) {
    return JSON.stringify(exports.ListConnectionPolicyTargetListConnectionPolicyTargetResponse$outboundSchema
        .parse(listConnectionPolicyTargetListConnectionPolicyTargetResponse));
}
function listConnectionPolicyTargetListConnectionPolicyTargetResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ListConnectionPolicyTargetListConnectionPolicyTargetResponse$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'ListConnectionPolicyTargetListConnectionPolicyTargetResponse' from JSON`);
}
/** @internal */
exports.ListConnectionPolicyTargetResponse$inboundSchema = z.object({
    Headers: z.record(z.array(z.string())),
    Result: z.lazy(() => exports.ListConnectionPolicyTargetListConnectionPolicyTargetResponse$inboundSchema),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "Headers": "headers",
        "Result": "result",
    });
});
/** @internal */
exports.ListConnectionPolicyTargetResponse$outboundSchema = z.object({
    headers: z.record(z.array(z.string())),
    result: z.lazy(() => exports.ListConnectionPolicyTargetListConnectionPolicyTargetResponse$outboundSchema),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        headers: "Headers",
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ListConnectionPolicyTargetResponse$;
(function (ListConnectionPolicyTargetResponse$) {
    /** @deprecated use `ListConnectionPolicyTargetResponse$inboundSchema` instead. */
    ListConnectionPolicyTargetResponse$.inboundSchema = exports.ListConnectionPolicyTargetResponse$inboundSchema;
    /** @deprecated use `ListConnectionPolicyTargetResponse$outboundSchema` instead. */
    ListConnectionPolicyTargetResponse$.outboundSchema = exports.ListConnectionPolicyTargetResponse$outboundSchema;
})(ListConnectionPolicyTargetResponse$ || (exports.ListConnectionPolicyTargetResponse$ = ListConnectionPolicyTargetResponse$ = {}));
function listConnectionPolicyTargetResponseToJSON(listConnectionPolicyTargetResponse) {
    return JSON.stringify(exports.ListConnectionPolicyTargetResponse$outboundSchema.parse(listConnectionPolicyTargetResponse));
}
function listConnectionPolicyTargetResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ListConnectionPolicyTargetResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListConnectionPolicyTargetResponse' from JSON`);
}
//# sourceMappingURL=listconnectionpolicytarget.js.map