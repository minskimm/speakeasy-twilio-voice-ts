"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListSourceIpMappingResponse$ = exports.ListSourceIpMappingResponse$outboundSchema = exports.ListSourceIpMappingResponse$inboundSchema = exports.ListSourceIpMappingListSourceIpMappingResponse$ = exports.ListSourceIpMappingListSourceIpMappingResponse$outboundSchema = exports.ListSourceIpMappingListSourceIpMappingResponse$inboundSchema = exports.ListSourceIpMappingMeta$ = exports.ListSourceIpMappingMeta$outboundSchema = exports.ListSourceIpMappingMeta$inboundSchema = exports.ListSourceIpMappingRequest$ = exports.ListSourceIpMappingRequest$outboundSchema = exports.ListSourceIpMappingRequest$inboundSchema = exports.ListSourceIpMappingServerList = void 0;
exports.listSourceIpMappingRequestToJSON = listSourceIpMappingRequestToJSON;
exports.listSourceIpMappingRequestFromJSON = listSourceIpMappingRequestFromJSON;
exports.listSourceIpMappingMetaToJSON = listSourceIpMappingMetaToJSON;
exports.listSourceIpMappingMetaFromJSON = listSourceIpMappingMetaFromJSON;
exports.listSourceIpMappingListSourceIpMappingResponseToJSON = listSourceIpMappingListSourceIpMappingResponseToJSON;
exports.listSourceIpMappingListSourceIpMappingResponseFromJSON = listSourceIpMappingListSourceIpMappingResponseFromJSON;
exports.listSourceIpMappingResponseToJSON = listSourceIpMappingResponseToJSON;
exports.listSourceIpMappingResponseFromJSON = listSourceIpMappingResponseFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const components = __importStar(require("../components/index.js"));
exports.ListSourceIpMappingServerList = [
    "https://voice.twilio.com",
];
/** @internal */
exports.ListSourceIpMappingRequest$inboundSchema = z.object({
    PageSize: z.number().int().optional(),
    Page: z.number().int().optional(),
    PageToken: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "PageSize": "pageSize",
        "Page": "page",
        "PageToken": "pageToken",
    });
});
/** @internal */
exports.ListSourceIpMappingRequest$outboundSchema = z.object({
    pageSize: z.number().int().optional(),
    page: z.number().int().optional(),
    pageToken: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        pageSize: "PageSize",
        page: "Page",
        pageToken: "PageToken",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ListSourceIpMappingRequest$;
(function (ListSourceIpMappingRequest$) {
    /** @deprecated use `ListSourceIpMappingRequest$inboundSchema` instead. */
    ListSourceIpMappingRequest$.inboundSchema = exports.ListSourceIpMappingRequest$inboundSchema;
    /** @deprecated use `ListSourceIpMappingRequest$outboundSchema` instead. */
    ListSourceIpMappingRequest$.outboundSchema = exports.ListSourceIpMappingRequest$outboundSchema;
})(ListSourceIpMappingRequest$ || (exports.ListSourceIpMappingRequest$ = ListSourceIpMappingRequest$ = {}));
function listSourceIpMappingRequestToJSON(listSourceIpMappingRequest) {
    return JSON.stringify(exports.ListSourceIpMappingRequest$outboundSchema.parse(listSourceIpMappingRequest));
}
function listSourceIpMappingRequestFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ListSourceIpMappingRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListSourceIpMappingRequest' from JSON`);
}
/** @internal */
exports.ListSourceIpMappingMeta$inboundSchema = z.object({
    first_page_url: z.string().optional(),
    key: z.string().optional(),
    next_page_url: z.nullable(z.string()).optional(),
    page: z.number().int().optional(),
    page_size: z.number().int().optional(),
    previous_page_url: z.nullable(z.string()).optional(),
    url: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "first_page_url": "firstPageUrl",
        "next_page_url": "nextPageUrl",
        "page_size": "pageSize",
        "previous_page_url": "previousPageUrl",
    });
});
/** @internal */
exports.ListSourceIpMappingMeta$outboundSchema = z.object({
    firstPageUrl: z.string().optional(),
    key: z.string().optional(),
    nextPageUrl: z.nullable(z.string()).optional(),
    page: z.number().int().optional(),
    pageSize: z.number().int().optional(),
    previousPageUrl: z.nullable(z.string()).optional(),
    url: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        firstPageUrl: "first_page_url",
        nextPageUrl: "next_page_url",
        pageSize: "page_size",
        previousPageUrl: "previous_page_url",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ListSourceIpMappingMeta$;
(function (ListSourceIpMappingMeta$) {
    /** @deprecated use `ListSourceIpMappingMeta$inboundSchema` instead. */
    ListSourceIpMappingMeta$.inboundSchema = exports.ListSourceIpMappingMeta$inboundSchema;
    /** @deprecated use `ListSourceIpMappingMeta$outboundSchema` instead. */
    ListSourceIpMappingMeta$.outboundSchema = exports.ListSourceIpMappingMeta$outboundSchema;
})(ListSourceIpMappingMeta$ || (exports.ListSourceIpMappingMeta$ = ListSourceIpMappingMeta$ = {}));
function listSourceIpMappingMetaToJSON(listSourceIpMappingMeta) {
    return JSON.stringify(exports.ListSourceIpMappingMeta$outboundSchema.parse(listSourceIpMappingMeta));
}
function listSourceIpMappingMetaFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ListSourceIpMappingMeta$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListSourceIpMappingMeta' from JSON`);
}
/** @internal */
exports.ListSourceIpMappingListSourceIpMappingResponse$inboundSchema = z.object({
    source_ip_mappings: z.array(components.VoiceV1SourceIpMapping$inboundSchema)
        .optional(),
    meta: z.lazy(() => exports.ListSourceIpMappingMeta$inboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "source_ip_mappings": "sourceIpMappings",
    });
});
/** @internal */
exports.ListSourceIpMappingListSourceIpMappingResponse$outboundSchema = z.object({
    sourceIpMappings: z.array(components.VoiceV1SourceIpMapping$outboundSchema)
        .optional(),
    meta: z.lazy(() => exports.ListSourceIpMappingMeta$outboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        sourceIpMappings: "source_ip_mappings",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ListSourceIpMappingListSourceIpMappingResponse$;
(function (ListSourceIpMappingListSourceIpMappingResponse$) {
    /** @deprecated use `ListSourceIpMappingListSourceIpMappingResponse$inboundSchema` instead. */
    ListSourceIpMappingListSourceIpMappingResponse$.inboundSchema = exports.ListSourceIpMappingListSourceIpMappingResponse$inboundSchema;
    /** @deprecated use `ListSourceIpMappingListSourceIpMappingResponse$outboundSchema` instead. */
    ListSourceIpMappingListSourceIpMappingResponse$.outboundSchema = exports.ListSourceIpMappingListSourceIpMappingResponse$outboundSchema;
})(ListSourceIpMappingListSourceIpMappingResponse$ || (exports.ListSourceIpMappingListSourceIpMappingResponse$ = ListSourceIpMappingListSourceIpMappingResponse$ = {}));
function listSourceIpMappingListSourceIpMappingResponseToJSON(listSourceIpMappingListSourceIpMappingResponse) {
    return JSON.stringify(exports.ListSourceIpMappingListSourceIpMappingResponse$outboundSchema.parse(listSourceIpMappingListSourceIpMappingResponse));
}
function listSourceIpMappingListSourceIpMappingResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ListSourceIpMappingListSourceIpMappingResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListSourceIpMappingListSourceIpMappingResponse' from JSON`);
}
/** @internal */
exports.ListSourceIpMappingResponse$inboundSchema = z.object({
    Headers: z.record(z.array(z.string())),
    Result: z.lazy(() => exports.ListSourceIpMappingListSourceIpMappingResponse$inboundSchema),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "Headers": "headers",
        "Result": "result",
    });
});
/** @internal */
exports.ListSourceIpMappingResponse$outboundSchema = z.object({
    headers: z.record(z.array(z.string())),
    result: z.lazy(() => exports.ListSourceIpMappingListSourceIpMappingResponse$outboundSchema),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        headers: "Headers",
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ListSourceIpMappingResponse$;
(function (ListSourceIpMappingResponse$) {
    /** @deprecated use `ListSourceIpMappingResponse$inboundSchema` instead. */
    ListSourceIpMappingResponse$.inboundSchema = exports.ListSourceIpMappingResponse$inboundSchema;
    /** @deprecated use `ListSourceIpMappingResponse$outboundSchema` instead. */
    ListSourceIpMappingResponse$.outboundSchema = exports.ListSourceIpMappingResponse$outboundSchema;
})(ListSourceIpMappingResponse$ || (exports.ListSourceIpMappingResponse$ = ListSourceIpMappingResponse$ = {}));
function listSourceIpMappingResponseToJSON(listSourceIpMappingResponse) {
    return JSON.stringify(exports.ListSourceIpMappingResponse$outboundSchema.parse(listSourceIpMappingResponse));
}
function listSourceIpMappingResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ListSourceIpMappingResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListSourceIpMappingResponse' from JSON`);
}
//# sourceMappingURL=listsourceipmapping.js.map