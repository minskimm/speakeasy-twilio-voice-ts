"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatResult = formatResult;
const shared_js_1 = require("./shared.js");
async function formatResult(result, uri, init) {
    if (!result.ok) {
        throw result.error;
    }
    const { value } = result;
    if (typeof value === "undefined") {
        return { contents: [] };
    }
    const { response } = init;
    const mimeType = response?.headers.get("content-type") ?? "";
    let contents = [];
    if (mimeType.search(/\bjson\b/g)) {
        contents = [{ uri: uri.toString(), mimeType, text: JSON.stringify(value) }];
    }
    else if (mimeType.startsWith("text/event-stream")
        && (0, shared_js_1.isAsyncIterable)(value)) {
        contents = [
            {
                uri: uri.toString(),
                mimeType: "application/json",
                text: await stringifySSEToJSON(value),
            },
        ];
    }
    else if (mimeType.startsWith("text/") && typeof value === "string") {
        contents = [{ uri: uri.toString(), mimeType, text: value }];
    }
    else if ((0, shared_js_1.isBinaryData)(value)) {
        const blob = await (0, shared_js_1.valueToBase64)(value);
        contents = blob == null ? [] : [{ uri: uri.toString(), blob, mimeType }];
    }
    else {
        throw new Error(`Unsupported content type: "${mimeType}"`);
    }
    return { contents };
}
async function stringifySSEToJSON(value) {
    const payloads = [];
    for await (const chunk of value) {
        payloads.push(chunk);
    }
    return JSON.stringify(payloads);
}
//# sourceMappingURL=resources.js.map